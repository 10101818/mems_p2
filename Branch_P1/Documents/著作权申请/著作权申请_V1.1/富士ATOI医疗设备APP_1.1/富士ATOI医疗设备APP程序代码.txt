
----------------------------------------------------------------------complete_info.dart----------------------------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:atoi/widgets/build_widget.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:atoi/utils/http_request.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:flutter/cupertino.dart';

/// 完善用户信息类
class CompleteInfo extends StatefulWidget {
  _CompleteInfoState createState() => new _CompleteInfoState();
}

class _CompleteInfoState extends State<CompleteInfo> {

  Map userInfo = {};
  Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
  TextEditingController _name = new TextEditingController();
  TextEditingController _mobile = new TextEditingController();
  TextEditingController _email = new TextEditingController();
  TextEditingController _addr = new TextEditingController();
  TextEditingController _newPass = new TextEditingController();
  List<String> departmentNames = [];
  List<dynamic> departments = [];
  var currentDepart;
  var dropdownItems;
  var emailReg = RegExp(r"[w!#$%&'*+/=?^_`{|}~-]+(?:.[w!#$%&'*+/=?^_`{|}~-]+)*@(?:[w](?:[w-]*[w])?.)+[w](?:[w-]*[w])?");
  var emailValid = RegExp(r"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z]+");
  String serverUrl = '';

  /// 获取用户信息
  Future<Null> getUserInfo() async {
    var prefs = await _prefs;
    var _userInfo = prefs.getString('userInfo');
    print(_userInfo);
    var decoded = jsonDecode(_userInfo);
    var _server = await prefs.getString('serverUrl');
    setState(() {
      userInfo = decoded;
      _name.text = decoded['Name'];
      _mobile.text = decoded['Mobile'];
      _email.text = decoded['Email'];
      _addr.text = decoded['Address'];
      currentDepart = decoded['Department']['Name'];
      serverUrl = _server??HttpRequest.API_PREFIX;
    });
  }

  void initState() {
    super.initState();
    getUserInfo();
    getDepartments();
  }

  /// 获取科室
  Future<Null> getDepartments() async {
    var resp = await HttpRequest.request(
      '/User/GetDepartments',
      method: HttpRequest.GET
    );
    if (resp['ResultCode'] == '00') {
      for(var depart in resp['Data']) {
        departmentNames.add(depart['Description']);
      }
      setState(() {
        departments = resp['Data'];
        departmentNames = departmentNames;
      });
      dropdownItems = getDropDownMenuItems(departmentNames);
    }
  }

  /// 初始化下拉菜单
  List<DropdownMenuItem<String>> getDropDownMenuItems(List list) {
    List<DropdownMenuItem<String>> items = new List();
    for (String method in list) {
      items.add(new DropdownMenuItem(
          value: method,
          child: new Text(method,
            style: new TextStyle(
                fontSize: 16.0
            ),
          )
      ));
    }
    return items;
  }

  /// 选择下拉菜单
  void changedDropDownMethod(String selectedMethod) {
    setState(() {
      currentDepart = selectedMethod;
    });
  }

  Row buildDropdown(String title, String currentItem, List dropdownItems, Function changeDropdown) {
    return new Row(
      children: <Widget>[
        new Expanded(
          flex: 2,
          child: new Wrap(
            alignment: WrapAlignment.start,
            crossAxisAlignment: WrapCrossAlignment.center,
            children: <Widget>[
              new Text(
                title,
                style: new TextStyle(
                    fontSize: 16.0,
                    fontWeight: FontWeight.w600
                ),
              )
            ],
          ),
        ),
        new Expanded(
          flex: 1,
          child: new Text(
            '：',
            style: new TextStyle(
              fontSize: 16.0,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        new Expanded(
          flex: 8,
          child: new DropdownButton(
            value: currentItem,
            items: dropdownItems,
            onChanged: changeDropdown,
            isDense: true,
            isExpanded: true,
          ),
        )
      ],
    );
  }

  /// 提交用户信息
  Future<Null> submit() async {
    var _depart = departments.firstWhere((depart) => depart['Description']==currentDepart, orElse: () => null);
    print(_depart);
    var _data = {
      'info': {
        'ID': userInfo['ID'],
        'Name': _name.text,
        'Mobile': _mobile.text,
        'Email': _email.text,
        'Address': _addr.text,
      }
    };
    var prefs = await _prefs;
    userInfo['Name'] = _name.text;
    userInfo['Mobile'] = _mobile.text;
    userInfo['Email'] = _email.text;
    userInfo['Address'] = _addr.text;
    if (userInfo['Role']['ID'] == 4) {
      userInfo['Department'] = {
        'ID': _depart['ID'],
        'Name': _depart['Description']
      };
    }
    prefs.setString('userInfo', jsonEncode(userInfo));
    if (_email.text.isNotEmpty&&!emailValid.hasMatch(_email.text)) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('请输入正确的邮箱格式'),
          )
      );
      return;
    }
    if (_newPass.text.isNotEmpty) {
      _data['info']['LoginPwd'] = _newPass.text;
    }
    if (userInfo['Role']['ID'] == 4) {
      _data['info']['Department'] = {
        'ID': _depart['ID'],
        'Name': _depart['Description']
      };
    }
    var resp = await HttpRequest.request(
      '/User/UpdateUserInfo',
      method: HttpRequest.POST,
      data: _data
    );
    if (resp['ResultCode'] == '00') {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('更新信息成功'),
        )
      ).then((result) {
        Navigator.of(context, rootNavigator: true).pop();
      });
    }
  }

  List<Widget> buildInfo() {
    List<Widget> _list = [
      new SizedBox(height: 16.0,),
      BuildWidget.buildRow('用户名/手机号', userInfo['LoginID']),
      new Divider(),
      BuildWidget.buildInput('姓名', _name, lines: 1),
      BuildWidget.buildInput('电话', _mobile, lines: 1),
      BuildWidget.buildInput('邮箱', _email, lines: 1),
      BuildWidget.buildInput('地址', _addr, lines: 1),
      BuildWidget.buildInput('新密码', _newPass, lines: 1),
      new Divider(),
      userInfo['Role']['ID']==4&&currentDepart!=null?buildDropdown('科室', currentDepart, dropdownItems, changedDropDownMethod):new Container(),
      new SizedBox(height: 16.0,),
      new Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: <Widget>[
          new RaisedButton(
            onPressed: () {
              submit();
            },
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(6),
            ),
            padding: EdgeInsets.all(12.0),
            color: new Color(0xff2E94B9),
            child: Text(
                '提交信息',
                style: TextStyle(
                    color: Colors.white
                )
            ),
          )
        ],
      ),
      new SizedBox(height: 40,),
      new Column(
        children: <Widget>[
          new Row(
            children: <Widget>[
              new Text('版本号: v${HttpRequest.APP_VERSION}', style: TextStyle(fontSize: 14.0),),
            ],
          ),
          new Row(
            children: <Widget>[
              new Text('服务器：${serverUrl}', style: TextStyle(fontSize: 14.0),),
            ],
          ),
        ],
      ),
    ];
    return _list;
  }
  
  Widget build(BuildContext context) {
    return new Scaffold(
      appBar: new AppBar(
        title: new Text('个人信息'),
        elevation: 0.7,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.centerLeft,
              end: Alignment.centerRight,
              colors: [
                Theme.of(context).primaryColor,
                Theme.of(context).accentColor
              ],
            ),
          ),
        ),
      ),
      body: userInfo.isEmpty?new Center(child: new SpinKitThreeBounce(color: Colors.blue),):Center(
        child: ListView(
            shrinkWrap: false,
            padding: EdgeInsets.only(left: 24.0, right: 24.0),
            children: buildInfo()
        ),
      ),
    );
  }
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------engineer_home_page.dart----------------------------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:atoi/pages/engineer/engineer_menu.dart';
import 'package:atoi/pages/engineer/engineer_to_report.dart';
import 'package:badges/badges.dart';
import 'package:atoi/pages/engineer/engineer_to_start.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:atoi/models/models.dart';
import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/login_page.dart';
import 'dart:async';
import 'package:atoi/complete_info.dart';
import 'dart:convert';
import 'package:atoi/pages/equipments/equipments_list.dart';
import 'package:atoi/pages/reports/report_list.dart';
import 'package:atoi/pages/equipments/vendors_list.dart';
import 'package:atoi/pages/equipments/contract_list.dart';
import 'package:atoi/utils/event_bus.dart';

/// 管理员首页类
class EngineerHomePage extends StatefulWidget {
  static String tag = 'engineer-home-page';
  @override
  _EngineerHomePageState createState() => new _EngineerHomePageState();
}

class _EngineerHomePageState extends State<EngineerHomePage>
    with SingleTickerProviderStateMixin{
  TabController _tabController;

  Future<SharedPreferences> prefs = SharedPreferences.getInstance();
  String _userName = '';
  Timer _timer;
  int dispatchTypeId = 0;
  List dispatchTypeList = [];
  int dispatchStatusId = 0;
  List dispatchStatusList = [];
  List urgencyList = [];
  int urgencyId = 0;
  String field = 'd.ID';
  TextEditingController filterText = new TextEditingController();
  EngineerModel model;
  ConstantsModel cModel;
  int currentTabIndex = 0;
  EventBus bus = new EventBus();

  /// 获取用户信息
  Future<Null> getRole() async {
    var _prefs = await prefs;
    var userInfo = _prefs.getString('userInfo');
    var decoded = jsonDecode(userInfo);
    setState(() {
      _userName = decoded['Name'];
    });
  }

  void initFilter () {
    setState(() {
      model.urgencyId = 0;
      model.dispatchUrgencyId = 0;
      model.dispatchTypeId = 0;
      model.engineerDispatchStatusId = 0;
      model.engineerField = 'd.ID';
      model.filterText = '';
      dispatchTypeList = initList(cModel.RequestType);
      dispatchTypeId = 0;
      urgencyList = initList(cModel.UrgencyID);
      urgencyId = 0;
      dispatchStatusList = initList(cModel.DispatchStatus);
      dispatchStatusList.removeWhere((item) => item['value'] == -1 || item['value'] == 1 || item['value'] ==4);
      dispatchStatusId = 0;
      model.offset = 10;
      model.offsetReport = 10;
      filterText.clear();
    });
    switch (currentTabIndex) {
      case 0:
        model.getTasksToStart();
        break;
      case 1:
        model.getTasksToReport();
        break;
    }
  }

  List initList(Map _map) {
    List _list = [];
    _list.add({
      'value': 0,
      'text': '全部'
    });
    _map.forEach((key, val) {
      _list.add({
        'value': val,
        'text': key
      });
    });
    return _list;
  }

  void setFilter() {
    setState(() {
      model.engineerField = field;
      model.filterText = filterText.text;
      model.urgencyId = urgencyId;
      model.dispatchTypeId = dispatchTypeId;
      model.dispatchUrgencyId = urgencyId;
      model.engineerDispatchStatusId = dispatchStatusId;
    });
    currentTabIndex==0?model.getTasksToStart():model.getTasksToReport();
  }

  @override
  void initState() {
    getRole();
    super.initState();
    _tabController = new TabController(length: 3, vsync: this, initialIndex: 0);
    _tabController.addListener(_handleTabChange);
    model = MainModel.of(context);
    cModel = MainModel.of(context);
    cModel.getConstants();
    model.getTasksToStart();
    model.getTasksToReport();
    model.getCountEngineer();
    initFilter();
    _timer = new Timer.periodic(new Duration(seconds: 10), (timer) {
      model.getCountEngineer();
    });
    bus.on('timeout', (params) {
      print('catch timeout event');
      showDialog(context: context, builder: (_) => CupertinoAlertDialog(
        title: Text('网络超时'),
      ));
    });
  }

  _handleTabChange() {
    setState(() {
      currentTabIndex = _tabController.index;
    });
    initFilter();
  }

  void deactivate() {
    super.deactivate();
  }

  void dispose() {
    _timer.cancel();
    super.dispose();
  }

  void showSheet(BuildContext context) {
    showModalBottomSheet(context: context, builder: (context) {
      return StatefulBuilder(
        builder: (context, setState) {
          return ListView(
            children: <Widget>[
              SizedBox(height: 18.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Text('搜索', style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),)
                ],
              ),
              SizedBox(height: 6.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Container(
                      width: 230.0,
                      height: 40.0,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5.0),
                        color: Color(0xfff2f2f2),
                      ),
                      child: Row(
                        children: <Widget>[
                          SizedBox(width: 10.0,),
                          Icon(Icons.search, color: Color(0xffaaaaaa),),
                          SizedBox(width: 10.0,),
                          Container(
                              width: 150.0,
                              child: Align(
                                alignment: Alignment(0.0, -0.5),
                                child: TextField(
                                  decoration: InputDecoration.collapsed(hintText: ''),
                                  controller: filterText,
                                ),
                              )
                          ),
                        ],
                      )
                  ),
                  SizedBox(width: 16.0,),
                  Container(
                    width: 130.0,
                    height: 40.0,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(5.0),
                      color: Color(0xfff2f2f2),
                    ),
                    child: Row(
                      children: <Widget>[
                        SizedBox(width: 6.0,),
                        DropdownButton(
                          value: field,
                          underline: Container(),
                          items: <DropdownMenuItem>[
                            DropdownMenuItem(
                              value: 'd.RequestID',
                              child: Text('请求编号'),
                            ),
                            DropdownMenuItem(
                              value: 'd.ID',
                              child: Text('派工单编号'),
                            ),
                          ],
                          onChanged: (val) {
                            setState(() {
                              field = val;
                            });
                          },
                        ),
                      ],
                    ),
                  )
                ],
              ),
              SizedBox(height: 18.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Text('派工类型', style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),)
                ],
              ),
              SizedBox(height: 6.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Container(
                      width: 230.0,
                      height: 40.0,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5.0),
                        color: Color(0xfff2f2f2),
                      ),
                      child: Row(
                        children: <Widget>[
                          SizedBox(width: 6.0,),
                          DropdownButton(
                            value: dispatchTypeId,
                            underline: Container(),
                            items: dispatchTypeList.map<DropdownMenuItem>((item) {
                              return DropdownMenuItem(
                                value: item['value'],
                                child: Text(item['text']),
                              );
                            }).toList(),
                            onChanged: (val) {
                              print(val);
                              setState(() {
                                dispatchTypeId = val;
                              });
                            },
                          )
                        ],
                      )
                  ),
                ],
              ),
              currentTabIndex==1?SizedBox(height: 18.0,):Container(),
              currentTabIndex==1?Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Text('审批状态', style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),)
                ],
              ):Container(),
              currentTabIndex==1?SizedBox(height: 6.0,):Container(),
              currentTabIndex==1?Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Container(
                      width: 230.0,
                      height: 40.0,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5.0),
                        color: Color(0xfff2f2f2),
                      ),
                      child: Row(
                        children: <Widget>[
                          SizedBox(width: 6.0,),
                          DropdownButton(
                            value: dispatchStatusId,
                            underline: Container(),
                            items: dispatchStatusList.map<DropdownMenuItem>((item) {
                              return DropdownMenuItem(
                                value: item['value'],
                                child: Text(item['text']),
                              );
                            }).toList(),
                            onChanged: (val) {
                              print(val);
                              setState(() {
                                dispatchStatusId = val;
                              });
                            },
                          )
                        ],
                      )
                  ),
                ],
              ):Container(),
              SizedBox(height: 18.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Text('紧急程度', style: TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),)
                ],
              ),
              SizedBox(height: 6.0,),
              Row(
                children: <Widget>[
                  SizedBox(width: 16.0,),
                  Container(
                      width: 200.0,
                      height: 40.0,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5.0),
                        color: Color(0xfff2f2f2),
                      ),
                      child: Row(
                        children: <Widget>[
                          SizedBox(width: 6.0,),
                          DropdownButton(
                            value: urgencyId,
                            underline: Container(),
                            items: urgencyList.map<DropdownMenuItem>((item) {
                              return DropdownMenuItem(
                                value: item['value'],
                                child: Text(item['text']),
                              );
                            }).toList(),
                            onChanged: (val) {
                              print(val);
                              setState(() {
                                urgencyId = val;
                              });
                            },
                          )
                        ],
                      )
                  ),
                ],
              ),
              SizedBox(height: 30.0,),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: <Widget>[
                  Container(
                    width: 100.0,
                    height: 40.0,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(5.0),
                      border: Border.all(
                          color: Color(0xff3394B9),
                          width: 1.0
                      ),
                      color: Color(0xffEBF9FF),
                    ),
                    child: Center(
                      child: FlatButton(onPressed: () {
                        setState(() {
                          filterText.clear();
                          field = 'd.ID';
                          urgencyId = urgencyList[0]['value'];
                          dispatchTypeId = dispatchTypeList[0]['value'];
                          dispatchStatusId = dispatchStatusList[0]['value'];
                        });
                        initFilter();
                      }, child: Text('重置')),
                    ),
                  ),
                  Container(
                    width: 100.0,
                    height: 40.0,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(5.0),
                      color: Color(0xff3394B9),
                    ),
                    child: Center(
                      child: FlatButton(onPressed: () {
                        setFilter();
                        Navigator.of(context).pop();
                      }, child: Text('确认', style: TextStyle(color: Colors.white),)),
                    ),
                  ),
                ],
              )
            ],
          );
        },
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return ScopedModelDescendant<MainModel>(
      builder: (context, child, model) {
        return new WillPopScope(
            child: new Scaffold(
                appBar: new AppBar(
                  title: new Align(
                    alignment: Alignment(-1.0, 0),
                    child: new Text('ATOI医疗设备管理系统'),
                  ),
                  automaticallyImplyLeading: false,
                  elevation: 0.7,
                  flexibleSpace: Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        begin: Alignment.centerLeft,
                        end: Alignment.centerRight,
                        colors: [
                          Theme.of(context).primaryColor,
                          Theme.of(context).accentColor
                        ],
                      ),
                    ),
                  ),
                  bottom: new TabBar(
                    indicatorColor: Colors.white,
                    controller: _tabController,
                    onTap: (val) {
                      setState(() {
                        currentTabIndex = val;
                      });
                      initFilter();
                    },
                    tabs: <Widget>[
                      new Tab(
                          icon: new Badge(
                            badgeContent: Text(
                              model.badgeEA,
                              style: new TextStyle(
                                  color: Colors.white
                              ),
                            ),
                            child: new Icon(Icons.assignment_late),
                          ),
                          text: '待开始工单'
                      ),
                      new Tab(
                        icon: new Badge(
                          badgeContent: Text(
                            model.badgeEB,
                            style: new TextStyle(
                                color: Colors.white
                            ),
                          ),
                          child: new Icon(Icons.hourglass_full),
                        ),
                        text: '作业中工单',
                      ),
                      new Tab(
                          icon: new Icon(Icons.add_to_photos),
                          text: '新增服务'
                      ),
                    ],
                  ),
                  actions: <Widget>[
                    new Center(
                      child: new Text(
                        _userName,
                        style: new TextStyle(fontSize: 16.0),
                      ),
                    ),
                    new SizedBox(width: 10.0,)
                  ],
                ),
                body: new TabBarView(
                  controller: _tabController,
                  children: <Widget>[
                    new EngineerToStart(),
                    new EngineerToReport(),
                    new EngineerMenu(),
                  ],
                ),
              floatingActionButton: currentTabIndex==2?Container():FloatingActionButton(
                  onPressed: () {
                    showSheet(context);
                  },
                  child: Icon(Icons.search),
                  backgroundColor: Colors.blueAccent,
              ),
              endDrawer: Drawer(
                child: ListView(
                  // Important: Remove any padding from the ListView.
                  padding: EdgeInsets.zero,
                  children: <Widget>[
                    DrawerHeader(
                      child: CircleAvatar(
                        backgroundColor: Colors.transparent,
                        radius: 48.0,
                        child: new Container(),
                      ),
                      decoration: BoxDecoration(
                        color: Theme.of(context).accentColor,
                      ),
                    ),
                    ListTile(
                      leading: Icon(Icons.person),
                      title: Text('个人信息',
                        style: new TextStyle(
                            color: Colors.blue
                        ),
                      ),
                      onTap: () {
                        Navigator.of(context).push(new MaterialPageRoute(builder: (_) {
                          return new CompleteInfo();
                        })).then((result) => getRole());
                      },
                    ),
                    ListTile(
                      leading: Icon(Icons.list),
                      title: Text('设备列表',
                        style: new TextStyle(
                            color: Colors.blue
                        ),
                      ),
                      onTap: () {
                        Navigator.of(context).push(new MaterialPageRoute(builder: (_) {
                          return new EquipmentsList();
                        }));
                      },
                    ),
                    ListTile(
                      leading: Icon(Icons.event_note),
                      title: Text('合同列表',
                        style: new TextStyle(
                            color: Colors.blue
                        ),
                      ),
                      onTap: () {
                        Navigator.of(context).push(new MaterialPageRoute(builder: (_) {
                          return new ContractList();
                        }));
                      },
                    ),
                    ListTile(
                      leading: Icon(Icons.store),
                      title: Text('供应商列表',
                        style: new TextStyle(
                            color: Colors.blue
                        ),
                      ),
                      onTap: () {
                        Navigator.of(context).push(new MaterialPageRoute(builder: (_) {
                          return new VendorsList();
                        }));
                      },
                    ),
                    ListTile(
                      leading: Icon(Icons.insert_chart),
                      title: Text('报表',
                        style: new TextStyle(
                            color: Colors.blue
                        ),
                      ),
                      onTap: () {
                        Navigator.of(context).push(new MaterialPageRoute(builder: (_) {
                          return new ReportList();
                        }));
                      },
                    ),
                    ListTile(
                      leading: Icon(Icons.exit_to_app),
                      title: Text('登出'),
                      onTap: () async {
                        var _prefs = await prefs;
                        var _server = await _prefs.getString('serverUrl');
                        await _prefs.clear();
                        await _prefs.setString('serverUrl', _server);
                        Navigator.of(context).pushNamed(LoginPage.tag);
                      },
                    ),
                  ],
                ),
              ),
            ),
            onWillPop: () async {
              return false;
            }
        );
      },
    );
  }
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------



----------------------------------------------------------------------login_page.dart----------------------------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:atoi/home_page.dart';
import 'package:atoi/engineer_home_page.dart';
import 'package:atoi/user_home_page.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:atoi/utils/http_request.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/cupertino.dart';
import 'package:connectivity/connectivity.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter_jpush/flutter_jpush.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/services.dart';
import 'package:atoi/utils/event_bus.dart';
import 'package:dio/dio.dart';

/// 登录注册类
class LoginPage extends StatefulWidget {
  static String tag = 'login-page';
  @override
  _LoginPageState createState() => new _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {

  TextEditingController phoneController = new TextEditingController();
  TextEditingController regPhoneController = new TextEditingController();
  TextEditingController passwordController = new TextEditingController();
  TextEditingController verificationController = new TextEditingController();
  TextEditingController nameController = new TextEditingController();
  TextEditingController confirmPass = new TextEditingController();
  TextEditingController serverUrl = new TextEditingController();
  bool _loading = false;
  Future<SharedPreferences> prefs = SharedPreferences.getInstance();
  var _stage = 'login';
  Timer _timer;
  int _countdownTime = 0;
  bool _validPhone = false;
  String _regId = '';
  bool _editServer = false;
  EventBus bus = new EventBus();

  /// 判断是否已登录
  Future<Null> isLogin() async {
    await checkVersion();
    var _prefs = await prefs;
    var _isLogin = await _prefs.getBool('isLogin');
    if (_isLogin != null && _isLogin) {
      var _role = await _prefs.getInt('role');
      switch (_role) {
        case 1:
          Navigator.of(context).pushNamed(HomePage.tag);
          break;
        case 2:
          Navigator.of(context).pushNamed(EngineerHomePage.tag);
          break;
        case 4:
          Navigator.of(context).pushNamed(UserHomePage.tag);
          break;
        default:
          return;
      }
    }
  }

  Future<Null> getServer() async {
    var _prefs = await prefs;
    var _serverUrl = await _prefs.getString('serverUrl');
    setState(() {
      serverUrl.text = _serverUrl??HttpRequest.API_PREFIX;
    });
  }

  Future<Null> setServer() async {
    var _prefs = await prefs;
    try {
      var resp = await Dio().get(serverUrl.text+'/APP/User/GetConstants');
      if (resp.data['ResultCode'] == '00') {
        await _prefs.setString('serverUrl', serverUrl.text);
        showDialog(context: context, builder: (_) => CupertinoAlertDialog(
          title: Text('服务器地址修改成功，重启APP后生效'),
        )).then((result) => exit(0));
      }
    } catch (e) {
      showDialog(context: context, builder: (_) => CupertinoAlertDialog(
        title: Text('服务器地址无效'),
      ));
    }
  }

  Future<Null> checkVersion() async {
    var resp = await HttpRequest.request(
      '/User/GetSystemSetting',
      method: HttpRequest.GET,
    );
    if (resp['ResultCode'] == '00') {
      var _version = resp['Data']['AppValidVersion'].split('.');
      var _currentVersion = HttpRequest.APP_VERSION.split('.');
      if (_version.length>1&&(int.tryParse(_version[0]) >int.parse(_currentVersion[0]) || int.tryParse(_version[1])>int.parse(_currentVersion[1]))) {
        showDialog(context: context,
            barrierDismissible: false,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('版本号过低，请升级'),
            )
        );
        return;
      }
    }
  }

  /// 初始化JPUSH推送服务
  void _startupJpush() async {
    print("初始化jpush");
    await FlutterJPush.startup();
    print("初始化jpush成功");

    FlutterJPush.getRegistrationID().then((rid) {
      print("get regid： ${rid}");
      setState(() {
        _regId = rid;
      });
    });

    FlutterJPush.addnetworkDidLoginListener((String registrationId) {
      setState(() {
        /// 用于推送
        print("收到设备号:$registrationId");
        //this.registrationId = registrationId;
      });
    });

    FlutterJPush.addReceiveNotificationListener((JPushNotification notification) {
      print("收到推送提醒: $notification");
      setState(() {
        /// 收到推送
        //notificationList.add(notification);
      });
    });


    FlutterJPush.addReceiveCustomMsgListener((JPushMessage msg) {
      setState(() {
        print("收到推送消息提醒: $msg");
        /// 打开了推送提醒
        //notificationList.add(msg);
      });
    });
  }

  /// 权限检查
  Future<Null> permissionCheck() async {
    var permission = await PermissionHandler().checkPermissionStatus(PermissionGroup.camera);
    print('permission:$permission');
    if (permission == PermissionStatus.unknown) {
      var camera = await PermissionHandler().requestPermissions([PermissionGroup.camera]);
      print('camera:$camera');
    }
  }

  /// 判断是否已连接wifi
  Future<Null> isConnected() async {
    var connectivityResult = await (Connectivity().checkConnectivity());
    if (connectivityResult == ConnectivityResult.none) {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('请连接网络'),
        )
      );
    }
  }

  /// 开始验证码倒计时
  void startCountdownTimer() {
    const oneSec = const Duration(seconds: 1);
    var callback = (timer) =>
      setState(() {
        if (_countdownTime < 1) {
          _timer.cancel();
        } else {
          _countdownTime = _countdownTime - 1;
        }
      });
    _timer = Timer.periodic(oneSec, callback);
  }

  /// 执行登录
  Future _doLogin() async {
    setState(() {
      _loading = !_loading;
    });
    var _data = await HttpRequest.request(
      '/User/Login',
      method: HttpRequest.POST,
      data: {
        'LoginID': phoneController.text,
        'LoginPwd': passwordController.text,
        'RegistrationID': _regId,
        'OSName': 'iOS'
      }
    );
    setState(() {
      _loading = !_loading;
    });
    if (_data['ResultCode'] == '00') {
      print(_data);
      var _prefs = await prefs;
      await _prefs.setString('userInfo', jsonEncode(_data['Data']));
      await _prefs.setInt('userID', _data['Data']['ID']);
      await _prefs.setInt('role', _data['Data']['Role']['ID']);
      await _prefs.setBool('isLogin', true);
      await _prefs.setString('roleName', _data['Data']['Role']['Name']);
      await _prefs.setString('userName', _data['Data']['Name']);
      await _prefs.setString('mobile', _data['Data']['Mobile']);
      switch (_data['Data']['Role']['ID']) {
        case 1:
          Navigator.of(context).pushNamed(HomePage.tag);
          break;
        case 2:
          Navigator.of(context).pushNamed(EngineerHomePage.tag);
          break;
        case 4:
          Navigator.of(context).pushNamed(UserHomePage.tag);
          break;
      }
    } else {
      showDialog(context: context, builder: (context) => CupertinoAlertDialog(
        title: new Text(
            _data['ResultMessage'],
        ),
      ));
    }
  }

  List<FocusNode> _focusReg = new List(5).map((item) {
    return new FocusNode();
  }).toList();

  /// 用户注册
  Future<Null> _userReg() async {
    if (regPhoneController.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('手机号不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[0]));
      return;
    }
    if (passwordController.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('密码不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[1]));
      return;
    }
    if (passwordController.text != confirmPass.text) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('密码不一致'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[2]));
      return;
    }
    if (nameController.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('姓名不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[3]));
      return;
    }
    if (verificationController.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('验证码不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[4]));
      return;
    }
    var resp = await HttpRequest.request(
      '/User/Register',
      method: HttpRequest.POST,
      data: {
        'info': {
          'LoginID': regPhoneController.text,
          'Name': nameController.text,
          'LoginPwd': passwordController.text,
          'Department': {
            'ID': 1
          }
        },
        'VerificationCode': verificationController.text.toString()
      }
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('注册成功'),
          )
      );
      setState(() {
        _stage = 'login';
        phoneController.text = regPhoneController.text;
        passwordController.text = '';
        confirmPass.text = '';
        verificationController.text = '';
        _timer.cancel();
      });
    } else {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text(resp['ResultMessage'],
            ),
          )
      );
    }
  }

  Future<Null> exitApp() async {
    await SystemChannels.platform.invokeMethod('SystemNavigator.pop');
  }

  void initState() {
    isLogin();
    isConnected();
    _startupJpush();
    super.initState();
    permissionCheck();
    getServer();
  }

  @override
  void deactivate() {
    print('移除时：deactivate');
    super.deactivate();
  }

  @override
  void dispose() {
    print('移除时：dispose');
    super.dispose();
  }

  /// 获取验证码
  Future<Null> getVerificationCode() async {
    if (regPhoneController.text.isEmpty || regPhoneController.text.length!=11) {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('请输入正确的手机号'),
        )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReg[0]));
      return;
    }
    var resp = await HttpRequest.request(
      '/User/GetVerificationCode',
      method: HttpRequest.GET,
      params: {
        'mobilePhone': regPhoneController.text
      }
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
        title: new Text('验证码已发送',
        ),
      )
    );
      setState(() {
        _countdownTime = 60;
      });
      startCountdownTimer();
    } else {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text(resp['ResultMessage'],
            ),
          )
      );
    }
  }

  @override
  Widget build(BuildContext context) {

    final logo = Hero(
      tag: 'hero',
      child: CircleAvatar(
        backgroundColor: Colors.transparent,
        radius: 48.0,
        child: Image.asset('assets/atoi.png'),
      ),
    );

    var phone = TextFormField(
      keyboardType: TextInputType.text,
      controller: phoneController,
      autofocus: false,
      decoration: InputDecoration(
        hintText: _stage=='login'?'用户名/手机号':'手机号',
        contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
      ),
      validator: (value) {
        return value.length>20?'用户名过长':null;
      },
    );

    var name = TextFormField(
      keyboardType: TextInputType.text,
      controller: nameController,
      autofocus: false,
      focusNode: _focusReg[3],
      decoration: InputDecoration(
        hintText: '姓名',
        contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
      ),
    );

    var regPhone = TextFormField(
      keyboardType: TextInputType.number,
      controller: regPhoneController,
      autofocus: false,
      focusNode: _focusReg[0],
      decoration: InputDecoration(
        hintText: '手机号',
        contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
      ),
    );

    var verification = Row(
      children: <Widget>[
        new Container(
          width: 175.0,
          child: TextField(
            keyboardType: TextInputType.number,
            controller: verificationController,
            autofocus: false,
            focusNode: _focusReg[4],
            decoration: InputDecoration(
              hintText: '验证码',
              contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
              border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
            ),
            onChanged: (value) {
              if (value.length == 6) {
                setState(() {
                  _validPhone = true;
                });
              }
            },
          ),
        ),
        SizedBox(width: 8.0,),
        new Container(
          width: 125,
          child: RaisedButton(
            color: Colors.blue,
            child: Text(
              _countdownTime>0?'$_countdownTime后重新获取':'获取验证码',
              style: new TextStyle(
                  color: Colors.white
              ),
            ),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(24),
            ),
            disabledColor: Colors.blueAccent,
            onPressed: () {
              _countdownTime>0?null:getVerificationCode();
            },
          ),
        ),
      ],
    );

    var password = TextFormField(
      autofocus: false,
      controller: passwordController,
      obscureText: true,
      focusNode: _focusReg[1],
      enabled: _stage=='login'?true:_validPhone,
      decoration: InputDecoration(
        hintText: '密码',
        contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
      ),
    );

    var confirmPassword = TextFormField(
      autofocus: false,
      controller: confirmPass,
      focusNode: _focusReg[2],
      obscureText: true,
      enabled: _validPhone,
      decoration: InputDecoration(
        hintText: '确认密码',
        contentPadding: EdgeInsets.fromLTRB(16.0, 10.0, 16.0, 10.0),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(32.0)),
      ),
    );

    var loginButton = Padding(
      padding: EdgeInsets.symmetric(vertical: 16.0),
      child: RaisedButton(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
        onPressed: () {
          _stage=='login'?_doLogin():_userReg();
          setState(() {
            _countdownTime = 0;
          });
        },
        padding: EdgeInsets.all(12),
        color: new Color(0xff183dca),
        child: Text(
            _stage=='login'?'登录':'注册', style: TextStyle(color: Colors.white)),
      ),
    );

    var forgotLabel = FlatButton(
      child: Text(
        '忘记密码?',
        style: TextStyle(color: Colors.black54),
      ),
      onPressed: () {},
    );

    var userRegister = FlatButton(
      child: Text(
        _stage=='login'?'报修用户注册':'返回登录',
        style: TextStyle(color: Colors.blue),
      ),
      onPressed: () {
        setState(() {
          _stage=='login'?_stage='reg':_stage='login';
          phoneController.text = '';
          regPhoneController.text = '';
          passwordController.text = '';
          verificationController.text = '';
          nameController.text = '';
          _countdownTime = 0;
        });
      },
    );

    List<Widget> buildLogin() {
      List<Widget> _list = [];
      if (_stage == 'login') {
        _list.addAll(
            [
              logo,
              _loading?Center(child: SpinKitThreeBounce(color: Colors.lightBlue),):SizedBox(height: 50.0),
              phone,
              SizedBox(height: 8.0),
              password,
              SizedBox(height: 8.0),
              loginButton,
              userRegister,
              SizedBox(height: 100.0,),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: <Widget>[
                  IconButton(
                    icon: Icon(Icons.settings_ethernet, color: Colors.blueAccent,),
                    onPressed: () {
                      showDialog(context: context, builder: (context) => AlertDialog(
                        title: Text('修改服务器地址'),
                        content: Container(
                          child: TextField(
                            controller: serverUrl,
                          ),
                        ),
                        actions: <Widget>[
                          FlatButton(
                            child: Text('取消', style: TextStyle(color: Colors.redAccent),),
                            onPressed: () {
                              getServer();
                              Navigator.of(context).pop();
                            },
                          ),
                          FlatButton(
                            child: Text('确认'),
                            onPressed: () {
                              setState(() {
                                setServer();
                              });
                            },
                          ),
                        ],
                      ));
                    },
                  )
                ],
              )
            ]
        );
      } else {
        _list.addAll([
          logo,
          _loading?SpinKitThreeBounce(color: Colors.blue):SizedBox(height: 50.0),
          regPhone,
          SizedBox(height: 8.0,),
          verification,
          SizedBox(height: 8.0,),
          password,
          SizedBox(height: 8.0,),
          confirmPassword,
          SizedBox(height: 8.0,),
          name,
          SizedBox(height: 8.0,),
          loginButton,
          userRegister,
        ]);
      }
      return _list;
    }

    return new WillPopScope(
        child: Scaffold(
          backgroundColor: Colors.white,
          body: Center(
            child: ListView(
              shrinkWrap: true,
              padding: EdgeInsets.only(left: 24.0, right: 24.0),
              children: buildLogin()
            ),
          ),
        ),
        onWillPop: () async {
          return false;
        }
    );
  }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------main.dart----------------------------------------------------------------------------------------

import 'package:flutter/material.dart';
import 'package:atoi/home_page.dart';
import 'package:atoi/login_page.dart';
import 'package:atoi/pages/manager/manager_assign_page.dart';
import 'package:atoi/pages/manager/manager_audit_voucher_page.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:atoi/pages/manager/manager_audit_report_page.dart';
import 'package:atoi/engineer_home_page.dart';
import 'package:atoi/pages/engineer/engineer_start_page.dart';
import 'package:atoi/pages/engineer/engineer_voucher_page.dart';
import 'package:atoi/pages/engineer/engineer_report_page.dart';
import 'package:atoi/pages/manager/manager_complete_page.dart';
import 'package:atoi/user_home_page.dart';
import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/models/models.dart';
import 'package:atoi/pages/user/user_scan_page.dart';
import 'package:atoi/pages/user/user_repair_page.dart';
import 'package:atoi/pages/engineer/signature_page.dart';
import 'package:atoi/pages/request/repair_request.dart';
import 'package:atoi/pages/request/bad_request.dart';
import 'package:atoi/pages/request/correction_request.dart';
import 'package:atoi/pages/request/equipment_request.dart';
import 'package:atoi/pages/request/maintain_request.dart';
import 'package:atoi/pages/request/mandatory_request.dart';
import 'package:atoi/pages/request/other_request.dart';
import 'package:atoi/pages/request/patrol_request.dart';
import 'package:atoi/pages/lifecycle/equipment_check.dart';
import 'package:atoi/pages/lifecycle/equipment_archive.dart';
import 'package:atoi/pages/lifecycle/equipment_install.dart';
import 'package:atoi/pages/lifecycle/equipment_lending.dart';
import 'package:atoi/pages/lifecycle/equipment_scrap.dart';
import 'package:atoi/pages/lifecycle/equipment_transfer.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:atoi/utils/event_bus.dart';
import 'package:flutter/cupertino.dart';

class AtoiApp extends StatefulWidget{
  _AtoiAppState createState() => _AtoiAppState();
}

class _AtoiAppState extends State<AtoiApp> {
  /// 项目静态路由
  final routes = <String, WidgetBuilder>{
    LoginPage.tag: (context) => LoginPage(),
    HomePage.tag: (context) => HomePage(),
    EngineerHomePage.tag: (context) => EngineerHomePage(),
    ManagerAssignPage.tag: (context) => ManagerAssignPage(),
    ManagerAuditVoucherPage.tag: (context) => ManagerAuditVoucherPage(),
    ManagerAuditReportPage.tag: (context) => ManagerAuditReportPage(),
    EngineerStartPage.tag: (context) => EngineerStartPage(),
    EngineerVoucherPage.tag: (context) => EngineerVoucherPage(),
    EngineerReportPage.tag: (context) => EngineerReportPage(),
    ManagerCompletePage.tag: (context) => ManagerCompletePage(),
    UserHomePage.tag: (context) => UserHomePage(),
    UserScanPage.tag: (context) => UserScanPage(),
    UserRepairPage.tag: (context) => UserRepairPage(),
    SignaturePage.tag: (context) => SignaturePage(),
    RepairRequest.tag: (context) => RepairRequest(),
    BadRequest.tag: (context) => BadRequest(),
    CorrectionRequest.tag: (context) => CorrectionRequest(),
    EquipmentRequest.tag: (context) => EquipmentRequest(),
    MaintainRequest.tag: (context) => MaintainRequest(),
    MandatoryRequest.tag: (context) => MandatoryRequest(),
    OtherRequest.tag: (context) => OtherRequest(),
    PatrolRequest.tag: (context) => PatrolRequest(),
    EquipmentCheck.tag: (context) => EquipmentCheck(),
    EquipmentArchive.tag: (context) => EquipmentArchive(),
    EquipmentInstall.tag: (context) => EquipmentInstall(),
    EquipmentLending.tag: (context) => EquipmentLending(),
    EquipmentScrap.tag: (context) => EquipmentScrap(),
    EquipmentTransfer.tag: (context) => EquipmentTransfer(),
  };

  final MainModel mainModel = MainModel();

  Future<SharedPreferences> prefs = SharedPreferences.getInstance();

  /// 事件总线
  EventBus bus = new EventBus();

  @override
  void initState() {
    super.initState();
    // 全局事件监听
    bus.on('timeout', (params) {
      print('catch timeout event');
      showDialog(context: context, builder: (_) => CupertinoAlertDialog(
        title: Text('网络超时'),
      ));
    });
    //bus.on('unfocus', (pamras) {
    //  FocusScope.of(context).unfocus();
    //});
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown
    ]);
    return ScopedModel<MainModel>(
      model: mainModel,
      child: GestureDetector(
        onTap: () {
          //FocusScopeNode currentFocus = FocusScope.of(context);
          //if (!currentFocus.hasPrimaryFocus) {
          //  currentFocus.unfocus();
          //}
          //bus.emit('unfocus');
        },
        child: new MaterialApp(
          //builder: (context, child) => MediaQuery(data: MediaQuery.of(context).copyWith(alwaysUse24HourFormat: true), child: child),
            title: 'ATOI医疗设备管理系统',
            theme: new ThemeData(
                primaryColor: new Color(0xff3b4674),
                accentColor: new Color(0xff2c5c85),
                buttonColor: new Color(0xff2E94B9)
            ),
            home: new LoginPage(),
            routes: routes,
            localizationsDelegates: [
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              const CupertinoLocalizationDelegate(),
            ],
            supportedLocales: [
              const Locale('zh', 'CH'),
              const Locale('en', 'US'),
            ]
        ),
      )
    );
  }

}

void main() {
  runApp(new AtoiApp());
}

class CupertinoLocalizationDelegate
    extends LocalizationsDelegate<CupertinoLocalizations> {
  const CupertinoLocalizationDelegate();

  @override
  bool isSupported(Locale locale) => true;

  @override
  Future<CupertinoLocalizations> load(Locale locale) =>
      DefaultCupertinoLocalizations.load(locale);

  @override
  bool shouldReload(CupertinoLocalizationDelegate old) => false;
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------

----------------------------------------------------------------------manager_model.dart----------------------------------------------------------------------------------------

import 'package:shared_preferences/shared_preferences.dart';
import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/utils/http_request.dart';

/// 超管模型类
class ManagerModel extends Model {
  String _badgeA = '0';
  String _badgeB = '0';
  String _badgeC = '0';
  List<dynamic> _requests = [];
  List<dynamic> _dispatches = [];
  List<dynamic> _todos = [];
  int _offset = 10;
  int _offsetDispatch = 10;
  int _offsetTodo = 10;

  int get offset => _offset;

  set offset(int value) {
    _offset = value;
  } // filter
  String _text = '';
  String _field = 'r.ID';
  String _startDate = '';
  String _endDate = '';
  int _statusId = 98;
  int _typeId =0;
  bool _recall = false;
  int _departmentId = 0;
  int _urgencyId = 0;
  bool _overDue = false;
  int _dispatchStatusId = 3;

  int get dispatchStatusId => _dispatchStatusId;

  set dispatchStatusId(int value) {
    _dispatchStatusId = value;
  }

  get badgeA => _badgeA;
  get badgeB => _badgeB;
  get badgeC => _badgeC;
  get requests => _requests;
  get dispatches => _dispatches;
  get todos => _todos;

  int get urgencyId => _urgencyId;

  String get field => _field;

  String get startDate => _startDate;

  String get endDate => _endDate;

  int get statusId => _statusId;

  set statusId(int value) {
    _statusId = value;
  }

  bool get overDue => _overDue;

  String get text => _text;

  set text(String value) {
    _text = value;
  }

  int get departmentId => _departmentId;

  bool get recall => _recall;

  int get typeId => _typeId;

  set typeId(int value) {
    _typeId = value;
  }

  set recall(bool value) {
    _recall = value;
  }

  set departmentId(int value) {
    _departmentId = value;
  }

  set overDue(bool value) {
    _overDue = value;
  }

  set endDate(String value) {
    _endDate = value;
  }

  set startDate(String value) {
    _startDate = value;
  }

  set field(String value) {
    _field = value;
  }

  set urgencyId(int value) {
    _urgencyId = value;
  }

  int get offsetDispatch => _offsetDispatch;

  set offsetDispatch(int value) {
    _offsetDispatch = value;
  }
  /// 获取任务数量
  Future<Null> getCount() async {
    var resp = await HttpRequest.request(
      '/User/GetAdminCount',
      method: HttpRequest.GET,
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _badgeA = resp['Data']['newCount'].toString();
      _badgeB = resp['Data']['dispatchCount'].toString();
      _badgeC = resp['Data']['unfinishedCount'].toString();
    }
    notifyListeners();
  }

  /// 获取请求
  Future<Null> getRequests() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    var resp = await HttpRequest.request(
      '/Request/GetRequests?userID=${userID}&PageSize=10&CurRowNum=0&statusID=$_statusId&typeID=$_typeId&isRecall=$_recall&department=$_departmentId&urgency=$_urgencyId&overDue=$_overDue&startDate=$_startDate&endDate=$_endDate&filterField=$_field&filterText=$_text',
      method: HttpRequest.GET,
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _requests = resp['Data'];
      _offset = 10;
      //_badgeA = _requests.length.toString();
    }
    notifyListeners();
  }


  /// 获取更多请求
  Future<Null> getMoreRequests() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    var resp = await HttpRequest.request(
      '/Request/GetRequests?userID=${userID}&PageSize=10&CurRowNum=$_offset&statusID=$_statusId&typeID=$_typeId&isRecall=$_recall&department=$_departmentId&urgency=$_urgencyId&overDue=$_overDue&startDate=$_startDate&endDate=$_endDate&filterField=$_field&filterText=$_text',
      method: HttpRequest.GET,
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _requests.addAll(resp['Data']);
      _offset = _offset + 10;
      //_badgeA = _requests.length.toString();
    }
    notifyListeners();
  }

  /// 获取派工单
  Future<Null> getDispatches() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'userID': userID,
      'urgency': _urgencyId,
      'type': _typeId,
      'pageSize': 10,
      'curRowNum': 0,
    };
    if (_text != '') {
      _params['filterText'] = _text;
      _params['filterField'] = _field;
    }
    var resp = await HttpRequest.request(
      _dispatchStatusId==0?'/Dispatch/GetDispatchs?statusIDs=2&statusIDs=3':'/Dispatch/GetDispatchs?statusIDs=$_dispatchStatusId',
      method: HttpRequest.GET,
      params: _params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _dispatches = resp['Data'];
      _offsetDispatch = 10;
    }
    notifyListeners();
  }

  /// 获取更多派工单
  Future<Null> getMoreDispatches() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'userID': userID,
      'urgency': _urgencyId,
      'type': _typeId,
      'pageSize': 10,
      'curRowNum': _offsetDispatch,
    };
    if (_text != '') {
      _params['filterText'] = _text;
      _params['filterField'] = _field;
    }
    var resp = await HttpRequest.request(
        _dispatchStatusId==0?'/Dispatch/GetDispatchs?statusIDs=2&statusIDs=3':'/Dispatch/GetDispatchs?statusIDs=$_dispatchStatusId',
        method: HttpRequest.GET,
        params: _params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _dispatches.addAll(resp['Data']);
      _offsetDispatch = _offsetDispatch + 10;
    }
    notifyListeners();
  }

  /// 获取未完成请求
  Future<Null> getTodos() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> params = {
      'userID': userID,
      'statusID': _statusId,
      'typeID': 0,
      'pageSize': 10,
      'curRowNum': 0,
      'typeID': _typeId,
      'isRecall': _recall,
      'department': _departmentId,
      'urgency': _urgencyId,
      'overDue': _overDue,
      'startDate': _startDate,
      'endDate': _endDate,
      'filterField': _field,
      'filterText': _text
    };
    var resp = await HttpRequest.request(
        '/Request/GetRequests',
        method: HttpRequest.GET,
        params: params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _todos = resp['Data'];
      _offsetTodo = 10;
    }
    notifyListeners();
  }

  /// 获取更多未完成请求
  Future<Null> getMoreTodos() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> params = {
      'userID': userID,
      'statusID': _statusId,
      'typeID': 0,
      'pageSize': 10,
      'curRowNum': _offsetTodo,
      'typeID': _typeId,
      'isRecall': _recall,
      'department': _departmentId,
      'urgency': _urgencyId,
      'overDue': _overDue,
      'startDate': _startDate,
      'endDate': _endDate,
      'filterField': _field,
      'filterText': _text
    };
    var resp = await HttpRequest.request(
        '/Request/GetRequests',
        method: HttpRequest.GET,
        params: params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _todos.addAll(resp['Data']);
      _offsetTodo = _offsetTodo + 10;
    }
    notifyListeners();
  }
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------

----------------------------------------------------------------------engineer_model.dart----------------------------------------------------------------------------------------

import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/utils/http_request.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// 工程师模型类
class EngineerModel extends Model {

  List<dynamic> _tasksToStart = [];
  List<dynamic> _tasksToReport = [];
  String _badgeEA = '0';
  String _badgeEB = '0';
  int _offset = 10;
  int _offsetReport = 10;
  int _dispatchUrgencyId = 0;
  int _engineerDispatchStatusId = 0;

  int get engineerDispatchStatusId => _engineerDispatchStatusId;

  set engineerDispatchStatusId(int value) {
    _engineerDispatchStatusId = value;
  }

  int get dispatchUrgencyId => _dispatchUrgencyId;

  set dispatchUrgencyId(int value) {
    _dispatchUrgencyId = value;
  }

  int get offsetReport => _offsetReport;

  set offsetReport(int value) {
    _offsetReport = value;
  }

  int _dispatchTypeId = 0;

  set offset(int value) {
    _offset = value;
  }

  int _urgencyId = 0;
  String _engineerField = 'd.RequestID';
  String _filterText = '';

  int get dispatchTypeId => _dispatchTypeId;

  set dispatchTypeId(int value) {
    _dispatchTypeId = value;
  }

  int get urgencyId => _urgencyId;

  set urgencyId(int value) {
    _urgencyId = value;
  }

  String get filterText => _filterText;

  set filterText(String value) {
    _filterText = value;
  }

  String get engineerField => _engineerField;

  set engineerField(String value) {
    _engineerField = value;
  }

  get badgeEA => _badgeEA;
  get badgeEB => _badgeEB;
  get offset => _offset;

  get tasksToStart => _tasksToStart;
  get tasksToReport => _tasksToReport;

  /// 获取任务数量
  Future<Null> getCountEngineer() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    var resp = await HttpRequest.request(
      '/User/GetEngineerCount',
      method: HttpRequest.GET,
      params: {
        'userID': userID
      }
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _badgeEA = resp['Data']['newdispatchCount'].toString();
      _badgeEB = resp['Data']['pendingDispatchCount'].toString();
    }
    notifyListeners();
  }

  /// 获取待开始工单
  Future<Null> getTasksToStart() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'userID': userID,
      'statusIDs': 1,
      'PageSize': 10,
      'CurRowNum': 0,
      'urgency': _dispatchUrgencyId,
      'type': _dispatchTypeId
    };
    if (_filterText != '') {
      _params['filterText'] = _filterText;
      _params['filterField'] = _engineerField;
    }
    var resp = await HttpRequest.request(
      '/Dispatch/GetDispatchs',
      method: HttpRequest.GET,
      params: _params
    );
    print('model call');
    print(resp);
    if (resp['ResultCode'] == '00') {
      _tasksToStart = resp['Data'];
      _offset = 10;
    }
    notifyListeners();
  }

  /// 获取更多待开始工单
  Future<Null> getMoreTasksToStart() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'userID': userID,
      'statusIDs': 1,
      'PageSize': 10,
      'CurRowNum': _offset,
      'urgency': _dispatchUrgencyId,
      'type': _dispatchTypeId
    };
    if (_filterText != '') {
      _params['filterText'] = _filterText;
      _params['filterField'] = _engineerField;
    }
    var resp = await HttpRequest.request(
        '/Dispatch/GetDispatchs',
        method: HttpRequest.GET,
        params: _params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _tasksToStart.addAll(resp['Data']);
      _offset = _offset + 10;
    }
    notifyListeners();
  }

  /// 获取待上传报告工单
  Future<Null> getTasksToReport() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'urgency': _dispatchUrgencyId,
      'type': _dispatchTypeId,
    };
    if (_filterText != '') {
      _params['filterText'] = _filterText;
      _params['filterField'] = _engineerField;
    }
    var resp = await HttpRequest.request(
      _engineerDispatchStatusId==0?'/Dispatch/GetDispatchs?userID=${userID}&pageSize=10&curRowNum=0&statusIDs=2&statusIDs=3':'/Dispatch/GetDispatchs?userID=${userID}&pageSize=10&curRowNum=0&statusIDs=$_engineerDispatchStatusId',
      method: HttpRequest.GET,
      params: _params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _tasksToReport = resp['Data'];
      _offsetReport = 10;
    }
    notifyListeners();
  }

  /// 获取更多待上传报告工单
  Future<Null> getMoreTasksToReport() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    var prefs = await _prefs;
    var userID = await prefs.getInt('userID');
    Map<String, dynamic> _params = {
      'urgency': _dispatchUrgencyId,
      'type': _dispatchTypeId,
    };
    if (_filterText != '') {
      _params['filterText'] = _filterText;
      _params['filterField'] = _engineerField;
    }
    var resp = await HttpRequest.request(
        _engineerDispatchStatusId==0?'/Dispatch/GetDispatchs?userID=${userID}&pageSize=10&curRowNum=0&statusIDs=2&statusIDs=3':'/Dispatch/GetDispatchs?userID=${userID}&pageSize=10&curRowNum=0&statusIDs=$_engineerDispatchStatusId',
      method: HttpRequest.GET,
      params: _params
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      _tasksToReport.addAll(resp['Data']);
      _offsetReport = _offsetReport + 10;
    }
    notifyListeners();
  }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------engineer_report_page.dart----------------------------------------------------------------------------------------


import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:atoi/utils/http_request.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:atoi/utils/constants.dart';
import 'dart:convert';
import 'package:atoi/pages/engineer/engineer_report_accessory.dart';
import 'package:atoi/widgets/build_widget.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'dart:typed_data';
import 'package:atoi/models/models.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_cupertino_date_picker/flutter_cupertino_date_picker.dart';
import 'package:date_format/date_format.dart';
import 'package:photo_view/photo_view.dart';
import 'package:atoi/utils/event_bus.dart';
import 'package:multi_image_picker/multi_image_picker.dart';
import 'dart:typed_data';
import 'package:uuid/uuid.dart';

/// 工程师报告页面
class EngineerReportPage extends StatefulWidget {
  static String tag = 'engineer-report-page';
  EngineerReportPage({Key key, this.dispatchId, this.reportId, this.status})
      : super(key: key);
  final int dispatchId;
  final int reportId;
  final int status;

  @override
  _EngineerReportPageState createState() => new _EngineerReportPageState();
}

class _EngineerReportPageState extends State<EngineerReportPage> {
  var _isExpandedBasic = false;
  var _isExpandedDetail = false;
  var _isExpandedAssign = true;
  var _isExpandedComponent = false;
  List<bool> _expandList = [false, false, false, true, false];
  bool _isDelayed = false;
  var _accessory = [];
  ConstantsModel model;
  bool hold = false;
  int _reportId;
  var _report;
  bool _edit = true;
  String _acceptDate = 'YY-MM-DD';
  EventBus bus = new EventBus();

  List _serviceResults = [];
  List _sources = [];
  List _providers = [];

  List _reportType = [];
  List _reportList = [];

  List _serviceScope = [
    '是',
    '否'
  ];

  String _currentType;
  String _currentScope = '是';

  void changeType(value) {
    setState(() {
      _analysis.clear();
      _result.clear();
      _unsolved.clear();
      _comments.clear();
      _description.clear();
      _purchaseAmount.clear();
      _solution.clear();
      _code.clear();
      _currentPrivate = '否';
      _currentRecall = '否';
      _acceptDate = 'YY-MM-DD';
      _currentType = value;
    });
  }

  void changeScope(value) {
    setState(() {
      _currentScope = value;
    });
  }

  List<DropdownMenuItem<String>> _dropDownMenuItems;
  List<DropdownMenuItem<String>> _dropDownMenuSources;
  List<DropdownMenuItem<String>> _dropDownMenuProviders;
  List<DropdownMenuItem<String>> _dropDownMenuStatus;
  String _currentResult;
  String _currentSource;
  String _currentProvider;
  String _currentStatus;

  var _dispatch = {};
  Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
  var _frequency = new TextEditingController();
  var _code = new TextEditingController();
  var _status = new TextEditingController();
  var _description = new TextEditingController();
  var _analysis = new TextEditingController();
  var _solution = new TextEditingController();
  var _delay = new TextEditingController();
  var _unsolved = new TextEditingController();
  var _result = new TextEditingController();
  var _purchaseAmount = new TextEditingController();
  var _comments = new TextEditingController();
  //List<dynamic> _imageList = [];
  var _imageList;
  var _fujiComments = "";
  String _reportStatus = '新建';
  String _reportOID;

  String _userName = '';
  String _mobile = '';

  List _isPrivate = ['是', '否'];
  String _currentPrivate = '否';

  List _isRecall = ['是', '否'];
  String _currentRecall = '否';

  void changePrivate(value) {
    setState(() {
      _currentPrivate = value;
    });
  }

  void changeRecall(value) {
    setState(() {
      _currentRecall = value;
    });
  }
  Future<Null> getRole() async {
    var prefs = await _prefs;
    var userName = prefs.getString('userName');
    var mobile = prefs.getString('mobile');
    setState(() {
      _userName = userName;
      _mobile = mobile;
    });
  }

  Future getImage() async {
    List<Asset> image = await MultiImagePicker.pickImages(
        maxImages: 1,
        enableCamera: true
    );
    if (image != null) {
      image.forEach((_image) async {
        var _data = await _image.getByteData();
        var compressed = await FlutterImageCompress.compressWithList(
          _data.buffer.asUint8List(),
          minHeight: 800,
          minWidth: 600,
        );
        setState(() {
          _imageList = Uint8List.fromList(compressed);
        });
      });
    }
  }

  Future<Null> getImageFile(int fileId) async {
    var resp = await HttpRequest.request('/DispatchReport/DownloadUploadFile',
        method: HttpRequest.GET, params: {'ID': fileId});
    if (resp['ResultCode'] == '00') {
      setState(() {
        _imageList = base64Decode(resp['Data']);
      });
    }
  }

  Future<String> getAccessoryFile(int fileId) async {
    String _image = '';
    var resp = await HttpRequest.request(
        '/DispatchReport/DownloadAccessoryFile',
        method: HttpRequest.GET,
        params: {'ID': fileId});
    if (resp['ResultCode'] == '00') {
      _image = resp['Data'];
    }
    return _image;
  }

  Future<Null> getReport(int reportId) async {
    await getReportId(_dispatch['RequestType']['ID']);
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    if (reportId != 0) {
      var resp = await HttpRequest.request('/DispatchReport/GetDispatchReport',
          method: HttpRequest.GET,
          params: {'userID': userID, 'dispatchReportId': reportId});
      print(resp);
      if (resp['ResultCode'] == '00') {
        var data = resp['Data'];
        setState(() {
          _report = data;
          _currentType = data['Type']['Name'];
          _frequency.text = data['FaultFrequency'];
          _code.text = data['FaultCode'];
          _status.text = data['FaultSystemStatus'];
          _description.text = data['FaultDesc'];
          _analysis.text = data['SolutionCauseAnalysis'];
          _solution.text = data['SolutionWay'];
          _currentResult = data['SolutionResultStatus']['Name'] == ''
              ? _currentResult
              : data['SolutionResultStatus']['Name'];
          _delay.text = data['DelayReason'];
          _unsolved.text = data['SolutionUnsolvedComments'];
          _accessory = data['ReportAccessories'];
          _fujiComments = data['FujiComments'];
          _reportStatus = data['Status']['Name'];
          _reportOID = data['OID'];
          if (data['EquipmentStatus']['ID'] != 0) {
            _currentStatus = data['EquipmentStatus']['Name'];
          }
          _purchaseAmount.text = data['PurchaseAmount'].toString();
          _currentScope = data['ServiceScope']?'是':'否';
          _result.text = data['Result'];
          _currentRecall = data['IsRecall']?'是':'否';
          _currentPrivate = data['IsPrivate']?'是':'否';
          if (data['AcceptanceDate'] != null) {
            _acceptDate = data['AcceptanceDate'].toString().split('T')[0];
          }
          _currentType = data['Type']['Name'];
          _comments.text = data['Comments'];
          _currentProvider = data['ServiceProvider']['ID']==0?_currentProvider:data['ServiceProvider']['Name'];
        });
        await getImageFile(resp['Data']['FileInfo']['ID']);
        for (var _acc in _accessory) {
          var _imageNew = _acc['FileInfos']
              .firstWhere((info) => info['FileType'] == 1, orElse: () => null);
          var _imageOld = _acc['FileInfos']
              .firstWhere((info) => info['FileType'] == 2, orElse: () => null);
          if (_imageNew != null) {
            var _fileNew = await getAccessoryFile(_imageNew['ID']);
            _imageNew['FileContent'] = _fileNew;
            setState(() {
              _acc['ImageNew'] = _imageNew;
            });
          }
          if (_imageOld != null) {
            var _fileOld = await getAccessoryFile(_imageOld['ID']);
            _imageOld['FileContent'] = _fileOld;
            setState(() {
              _acc['ImageOld'] = _imageOld;
            });
          }
        }
        setState(() {
          _accessory = _accessory;
        });
      }
    }
  }

  Future<Null> getDispatch() async {
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    var dispatchId = widget.dispatchId;
    var resp = await HttpRequest.request('/Dispatch/GetDispatchByID',
        method: HttpRequest.GET,
        params: {'userID': userID, 'dispatchID': dispatchId});
    print(resp);
    if (resp['ResultCode'] == '00') {
      setState(() {
        _dispatch = resp['Data'];
        _isDelayed = resp['Data']['Request']['IsDelay'];
      });
    }
  }

  Future<Null> getReportId(int reportType) async {
    var resp = await HttpRequest.request(
      '/DispatchReport/GetDispatchReportType',
      params: {
        'id': reportType
      }
    );
    if (resp['ResultCode'] == '00') {
      setState(() {
        _reportList = resp['Data'];
        _reportType = resp['Data'].map((item) => item['Name']).toList();
        _currentType = _reportType[_reportType.length-1];
      });
    }
  }

  List<FocusNode> _focusReport = new List(20).map((item) {
    return new FocusNode();
  }).toList();

  Future<Null> uploadReport(int statusId) async {
    if (_dispatch['RequestType']['ID'] == 9 && _acceptDate == 'YY-MM-DD' && _currentType != '通用作业报告' && statusId == 2) {
      showDialog(
          context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('验收日期不可为空'),
          )).then((result) => FocusScope.of(context).requestFocus(_focusReport[9]));
      return;
    }
    if (statusId == 2 && _currentType != '通用作业报告') {
      if (_isDelayed && _delay.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('误工说明不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[0]));
        return;
      }
      if ((_dispatch['RequestType']['ID'] == 3 && _currentPrivate == '是' && _imageList == null) || (_dispatch['RequestType']['ID'] == 2 && _currentResult == '待第三方支持' && _currentProvider != '管理方' && _imageList == null)) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('附件不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[10]));
        return;
      }
      if (_dispatch['RequestType']['ID'] == 1 && _code.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('错误代码不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[1]));
        return;
      }
      if (_dispatch['RequestType']['ID'] == 1 && _currentStatus == null) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('设备状态（离场）不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[11]));
        return;
      }
      if (_dispatch['RequestType']['ID'] == 3 && _description.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('强检要求不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[2]));
        return;
      }
      if (_dispatch['RequestType']['ID'] == 6 && (_purchaseAmount.text.isEmpty || double.tryParse(_purchaseAmount.text) == 0.0 || double.tryParse(_purchaseAmount.text) >= 100000000.0)) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('资产金额需介于0到99999999.99之间'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[3]));
        return;
      }
      if (_dispatch['RequestType']['ID'] == 1 && _solution.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('详细处理方法不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[4]));
        return;
      }
      if (_analysis.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text(_dispatch['RequestType']['ID']==1?'分析原因不可为空':'报告明细不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[5]));
        return;
      }
      if (_result.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('结果不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[6]));
        return;
      }
      if (_currentResult == '问题升级' && _unsolved.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('问题升级不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[7]));
        return;
      }
    }
    if (statusId == 2 && _currentType == '通用作业报告') {
      if (_analysis.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('报告明细不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[5]));
        return;
      }
      if (_result.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('结果不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[6]));
        return;
      }
      if (_currentResult == '问题升级' && _unsolved.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('问题升级不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[7]));
        return;
      }
      if (_isDelayed && _delay.text.isEmpty) {
        showDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('误工说明不可为空'),
            )).then((result) => FocusScope.of(context).requestFocus(_focusReport[0]));
        return;
      }
    }
    Map _json;
    if (_imageList != null) {
      var content = base64Encode(_imageList);
      _json = {
        'FileContent': content,
        'FileName': 'dispatch_${widget.dispatchId}_report_attachment.jpg',
        'ID': 0,
        'FileType': 1
      };
    }
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    var _data = {
      'Dispatch': {'ID': widget.dispatchId},
      'FaultCode': _code.text,
      'FaultDesc': _description.text,
      'SolutionCauseAnalysis': _analysis.text,
      'SolutionWay': _solution.text,
      'SolutionResultStatus': {
        'ID': model.SolutionStatus[_currentResult],
        'Name': _currentResult
      },
      'EquipmentStatus': {
        'ID': model.MachineStatus[_currentStatus]
      },
      'PurchaseAmount': _purchaseAmount.text,
      //'ServiceScope': _currentScope=='是'?true:false,
      'Result': _result.text,
      'IsRecall': _currentRecall =='是'?true:false,
      'AcceptanceDate': _acceptDate,
      'IsPrivate': _currentPrivate == '是' ?true:false,
      'ServiceProvider': {
        'ID': model.ServiceProviders[_currentProvider]
      },
      'SolutionUnsolvedComments': _unsolved.text,
      'DelayReason': _delay.text,
      'Status': {
        'ID': statusId,
      },
      'Comments': _comments.text,
      'FileInfo': _json,
      'ReportAccessories': _accessory,
      'ID': _reportId
    };
    var _id = _reportList.firstWhere((item) => item['Name'] == _currentType, orElse: () => null);
    _data['Type'] = {
      'ID': _id['ID']??1
    };
    var _body = {
      'userID': userID,
      'DispatchReport': _data
    };
    setState(() {
      hold = true;
    });
    var resp = await HttpRequest.request('/DispatchReport/SaveDispatchReport',
        method: HttpRequest.POST, data: _body);
    setState(() {
      hold = false;
    });
    if (resp['ResultCode'] == '00') {
      setState(() {
        _reportId = resp['Data'];
      });
      showDialog(
          context: context,
          builder: (context) => CupertinoAlertDialog(
              title: statusId == 1
                  ? new Text('保存报告成功')
                  : new Text('上传报告成功'))).then((result) {
                    return statusId == 1?getReport(resp['Data']):Navigator.of(context, rootNavigator: true).pop(result);
      });
    } else {
      showDialog(
          context: context,
          builder: (context) => CupertinoAlertDialog(
                title: new Text(resp['ResultMessage']),
              ));
    }
  }

  List iterateMap(Map item) {
    var _list = [];
    item.forEach((key, val) {
      _list.add(key);
    });
    return _list;
  }

  void initDropdown() {
    model = MainModel.of(context);
    _serviceResults = iterateMap(model.SolutionStatus);
    _sources = iterateMap(model.AccessorySourceType);
    _providers = iterateMap(model.ServiceProviders);
    _dropDownMenuItems = getDropDownMenuItems(_serviceResults);
    _dropDownMenuSources = getDropDownMenuItems(_sources);
    _dropDownMenuProviders = getDropDownMenuItems(_providers);
    _dropDownMenuStatus = getDropDownMenuItems(iterateMap(model.MachineStatus));
    _currentStatus = _dropDownMenuStatus[0].value;
    _currentResult = _dropDownMenuItems[3].value;
    _currentSource = _dropDownMenuSources[0].value;
    _currentProvider = _dropDownMenuProviders[0].value;
  }

  void initState() {
    model = MainModel.of(context);
    initDropdown();
    getRole();
    getDispatch().then((result) {
      if (widget.reportId != null) {
        setState(() {
          _reportId = widget.reportId;
        });
        getReport(_reportId);
      }
    });
    if (widget.status != 0 && widget.status != 1) {
      setState(() {
        _edit = false;
      });
    } else {
      _edit = true;
    }
    super.initState();
  }

  List<DropdownMenuItem<String>> getDropDownMenuItems(List list) {
    List<DropdownMenuItem<String>> items = new List();
    for (String method in list) {
      items.add(new DropdownMenuItem(
          value: method,
          child: new Text(
            method,
            style: new TextStyle(fontSize: 16.0),
          )));
    }
    return items;
  }

  Column buildField(String label, TextEditingController controller,
      {String hintText, int maxLength, FocusNode focusNode}) {
    String hint = hintText ?? '';
    maxLength = maxLength??500;
    focusNode = focusNode??new FocusNode();
    return new Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        new Text(
          label,
          style: new TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),
        ),
        new TextField(
          controller: controller,
          decoration: InputDecoration(
            fillColor: AppConstants.AppColors['app_accent_m'],
            filled: true,
            hintText: hint,
          ),
          maxLines: 3,
          maxLength: maxLength,
          focusNode: focusNode,
        ),
        new SizedBox(
          height: 5.0,
        )
      ],
    );
  }

  void changedDropDownMethod(String selectedMethod) {
    setState(() {
      _currentResult = selectedMethod;
    });
  }

  void changedDropDownSource(String selectedMethod) {
    setState(() {
      _currentSource = selectedMethod;
    });
  }

  void changedDropDownProvider(String selectedMethod) {
    setState(() {
      _currentProvider = selectedMethod;
    });
  }

  void changedStatus(String selectedMethod) {
    setState(() {
      _currentStatus = selectedMethod;
    });
  }

  TextField buildTextField(
      String labelText, String defaultText, bool isEnabled) {
    return new TextField(
      decoration: InputDecoration(
          labelText: labelText,
          labelStyle: new TextStyle(fontSize: 16.0),
          fillColor: AppConstants.AppColors['app_accent_m'],
          filled: true,
          disabledBorder: UnderlineInputBorder(
              borderSide: BorderSide(color: Colors.grey, width: 1))),
      controller: new TextEditingController(text: defaultText),
      enabled: isEnabled,
      style: new TextStyle(fontSize: 16.0),
    );
  }

  Padding buildRow(String labelText, String defaultText) {
    return new Padding(
      padding: EdgeInsets.symmetric(vertical: 5.0),
      child: new Row(
        children: <Widget>[
          new Expanded(
            flex: 4,
            child: new Text(
              labelText,
              style: new TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),
            ),
          ),
          new Expanded(
            flex: 6,
            child: new Text(
              defaultText,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w400,
                  color: Colors.black54),
            ),
          )
        ],
      ),
    );
  }

  Row buildDropdown(String title, String currentItem, List dropdownItems,
      Function changeDropdown) {
    return new Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: <Widget>[
        new Expanded(
          flex: 4,
          child: new Padding(
            padding: EdgeInsets.symmetric(vertical: 5.0),
            child: new Text(
              title,
              style: new TextStyle(fontSize: 16.0, fontWeight: FontWeight.w600),
            ),
          ),
        ),
        new Expanded(
          flex: 6,
          child: new DropdownButton(
            value: currentItem,
            items: dropdownItems,
            onChanged: changeDropdown,
          ),
        )
      ],
    );
  }

  Row buildImageRow() {
    List<Widget> _list = [];
    if (_imageList != null) {
      _list.add(new Stack(
        alignment: FractionalOffset(1.0, 0),
        children: <Widget>[
          new Container(
            width: 200.0,
            child: BuildWidget.buildPhotoPageList(context, _imageList),
          ),
          widget.status == 0 || widget.status == 1
              ? new Padding(
                  padding: EdgeInsets.symmetric(horizontal: 0.0),
                  child: new IconButton(
                      icon: Icon(Icons.cancel),
                      color: Colors.blue,
                      onPressed: () {
                        setState(() {
                          _imageList = null;
                        });
                      }),
                )
              : new Container()
        ],
      ));
      _list.add(new Container(
        width: 10,
      ));
    } else {
      _list.add(new Container());
    }

    return new Row(
        mainAxisAlignment: MainAxisAlignment.center, children: _list);
  }

  List<Widget> buildReportList() {
    List<Widget> _list = [];
    _list.addAll([
      _reportOID != null
          ? BuildWidget.buildRow('作业报告编号', _reportOID)
          : new Container(),
      _edit?BuildWidget.buildRadioVert('作业报告类型', _reportType, _currentType, changeType):BuildWidget.buildRow('作业报告类型', _currentType),
      BuildWidget.buildRow('开始时间', AppConstants.TimeForm(_dispatch['StartDate'].toString(), 'hh:mm')),
      _fujiComments!=""||widget.status==3?BuildWidget.buildRow('审批备注', _fujiComments):new Container(),
      new Divider(),
    ]);

    if (_currentType == '通用作业报告') {
      _list.addAll(
        [
          _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
          _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
        ]
      );
      _list.addAll(
          [
            _edit?BuildWidget.buildDropdownLeft('作业报告结果:', _currentResult, _dropDownMenuItems, changedDropDownMethod, context: context):BuildWidget.buildRow('作业报告结果', _currentResult),
            !_edit&&_currentResult=='问题升级'?BuildWidget.buildRow('问题升级', _unsolved.text):new Container(),
            _edit&&_currentResult=='问题升级'?buildField('问题升级:', _unsolved, focusNode: _focusReport[7]):new Container(),
            _edit&&_currentResult=='待第三方支持'?BuildWidget.buildDropdownLeft('服务提供方:', _currentProvider, _dropDownMenuProviders, changedDropDownProvider, context: context):new Container(),
            !_edit&&_currentResult=='待第三方支持'?BuildWidget.buildRow('服务提供方', _currentProvider):new Container(),
            _edit?buildField('备注:', _comments):BuildWidget.buildRow('备注', _comments.text),

          ]
      );
    } else {
      switch (_dispatch['RequestType']['ID']) {
        case 1:
          _list.addAll(
            [
              _edit?buildField('错误代码:', _code, maxLength: 20, focusNode: _focusReport[1]):BuildWidget.buildRow('错误代码', _code.text),
              BuildWidget.buildRow('设备状态（报修）', _dispatch['MachineStatus']['Name']),
              _edit?BuildWidget.buildDropdownLeft('设备状态（离场）:', _currentStatus, _dropDownMenuStatus, changedStatus, focusNode: _focusReport[11], context: context):BuildWidget.buildRow('设备状态（离场）', _currentStatus??''),
              _edit?buildField('详细故障描述:', _description, focusNode: _focusReport[2]):BuildWidget.buildRow('详细故障描述', _description.text),
              _edit?buildField('分析原因:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('分析原因', _analysis.text),
              _edit?buildField('详细处理方法:', _solution, focusNode: _focusReport[4]):BuildWidget.buildRow('详细处理方法', _solution.text),
              _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
            ]
          );
          break;
        case 4:
          _list.addAll(
              [
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              ]
          );
          break;
        case 3:
          _list.addAll(
            [
              _edit?buildField('强检要求:', _description, hintText: 'FDA, Manufacture, Hospital, Etc...', focusNode: _focusReport[2]):BuildWidget.buildRow('强检要求', _description.text),
              _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
              _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              _edit?BuildWidget.buildRadioLeft('专用报告:', _isPrivate, _currentPrivate, changePrivate):BuildWidget.buildRow('专用报告', _currentPrivate),
              _edit?BuildWidget.buildRadioLeft('待召回:', _isRecall, _currentRecall, changeRecall):BuildWidget.buildRow('待召回', _currentRecall),
            ]
          );
          break;
        case 2:
          _list.addAll(
            [
              _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
              _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
            ]
          );
          break;
        case 5:
          _list.addAll(
              [
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              ]
          );
          break;
        case 7:
          _list.addAll(
              [
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              ]
          );
          break;
        case 9:
          _list.addAll(
              [
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
                _edit?
                new Padding(
                  padding: EdgeInsets.symmetric(vertical: 5.0),
                  child: new Row(
                    children: <Widget>[
                      new Expanded(
                        flex: 4,
                        child: new Wrap(
                          alignment: WrapAlignment.start,
                          crossAxisAlignment: WrapCrossAlignment.center,
                          children: <Widget>[
                            new Text(
                              '验收日期:',
                              style: new TextStyle(
                                  fontSize: 16.0, fontWeight: FontWeight.w600),
                            )
                          ],
                        ),
                      ),
                      new Expanded(
                        flex: 5,
                        child: new Text(
                          _acceptDate,
                          style: new TextStyle(
                              fontSize: 16.0,
                              fontWeight: FontWeight.w400,
                              color: Colors.black54
                          ),
                        ),
                      ),
                      new Expanded(
                        flex: 2,
                        child: new IconButton(
                            icon: Icon(Icons.calendar_today, color: AppConstants.AppColors['btn_main'],),
                            focusNode: _focusReport[9],
                            onPressed: () async {
                              DatePicker.showDatePicker(
                                context,
                                pickerTheme: DateTimePickerTheme(
                                  showTitle: true,
                                  confirm: Text('确认', style: TextStyle(color: Colors.blueAccent)),
                                  cancel: Text('取消', style: TextStyle(color: Colors.redAccent)),
                                ),
                                minDateTime: DateTime.parse('2000-01-01'),
                                maxDateTime: DateTime.parse('2030-01-01'),
                                initialDateTime: DateTime.tryParse(_acceptDate)??DateTime.now(),
                                dateFormat: 'yyyy-MM-dd',
                                locale: DateTimePickerLocale.en_us,
                                onClose: () => print(""),
                                onCancel: () => print('onCancel'),
                                onChange: (dateTime, List<int> index) {
                                },
                                onConfirm: (dateTime, List<int> index) {
                                  setState(() {
                                    _acceptDate = formatDate(dateTime, [yyyy,'-', mm, '-', dd]);
                                  });
                                },
                              );
                            }),
                      ),
                    ],
                  ),
                ):BuildWidget.buildRow('验收日期', _acceptDate)
              ]
          );
          break;
        case 6:
          _list.addAll(
              [
                _edit?BuildWidget.buildInputLeft('资产金额:', _purchaseAmount, inputType: TextInputType.numberWithOptions(decimal: true), maxLength: 11, lines: 1, focusNode: _focusReport[3]):BuildWidget.buildRow('资产金额', _purchaseAmount.text),
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              ]
          );
          break;
        default:
          _list.addAll(
              [
                _edit?buildField('报告明细:', _analysis, focusNode: _focusReport[5]):BuildWidget.buildRow('报告明细', _analysis.text),
                _edit?buildField('结果:', _result, focusNode: _focusReport[6]):BuildWidget.buildRow('结果', _result.text),
              ]
          );
          break;
      }

      _list.addAll(
        [
          _edit?BuildWidget.buildDropdownLeft('作业报告结果:', _currentResult, _dropDownMenuItems, changedDropDownMethod, context: context):BuildWidget.buildRow('作业报告结果', _currentResult),
          _edit&&_currentResult=='问题升级'?buildField('问题升级:', _unsolved, focusNode: _focusReport[7]):new Container(),
          !_edit&&_currentResult=='问题升级'?BuildWidget.buildRow('问题升级', _unsolved.text):new Container(),
          _edit&&_currentResult=='待第三方支持'?BuildWidget.buildDropdownLeft('服务提供方:', _currentProvider, _dropDownMenuProviders, changedDropDownProvider, context: context):new Container(),
          !_edit&&_currentResult=='待第三方支持'?BuildWidget.buildRow('服务提供方', _currentProvider):new Container(),
          _edit?buildField('备注:', _comments):BuildWidget.buildRow('备注', _comments.text),

        ]
      );
    }

    if (_edit && _isDelayed && _dispatch['RequestType']['ID'] == 1 && _dispatch['Request']['LastStatus']['ID'] == 1) {
      _list.add(
          buildField('误工说明:', _delay, focusNode: _focusReport[0])
      );
    }
    if (!_edit && _isDelayed && _dispatch['RequestType']['ID'] == 1 && _delay.text.isNotEmpty) {
      _list.add(
          BuildWidget.buildRow('误工说明', _delay.text)
      );
    }
    _list.addAll([
          _edit?new Padding(
              padding: EdgeInsets.symmetric(vertical: 5.0),
              child: new Row(
                children: <Widget>[
                  new Text(
                    '添加附件：',
                    style: new TextStyle(
                        fontSize: 16.0, fontWeight: FontWeight.w600),
                  ),
                  new IconButton(
                      focusNode: _focusReport[10],
                      icon: Icon(Icons.add_a_photo),
                      onPressed: () {
                        getImage();
                      })
                ],
              ),
            )
          : BuildWidget.buildRow('附件', ''),
      buildImageRow()
    ]);



    return _list;
  }

  List<Widget> buildAccessory() {
    List<Widget> _list = [];

    void saveAccessory(Map accessory) async {
      setState(() {
        _accessory.add(accessory);
      });
    }

    _list.add(new Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: <Widget>[
        widget.status == 0 || widget.status == 1
            ? new Text('新增零件')
            : new Container(),
        widget.status == 0 || widget.status == 1
            ? new IconButton(
                icon: Icon(Icons.add),
                onPressed: () async {
                  //_addAccessory();
                  final _acc = await Navigator.of(context)
                      .push(new MaterialPageRoute(builder: (_) {
                    return new EngineerReportAccessory();
                  }));
                  print(_acc);
                  if (_acc != null) {
                    saveAccessory(_acc);
                  }
                })
            : new Container()
      ],
    ));
    if (_accessory != null) {
      for (var _acc in _accessory) {
        var _imageNew = _acc['FileInfos']
            .firstWhere((info) => info['FileType'] == 1, orElse: () => null);
        var _imageOld = _acc['FileInfos']
            .firstWhere((info) => info['FileType'] == 2, orElse: () => null);
        if (_imageNew != null) {
          _acc['ImageNew'] = _imageNew;
        }
        if (_imageOld != null) {
          _acc['ImageOld'] = _imageOld;
        }
        var _accList = [
          BuildWidget.buildRow('名称', _acc['Name']),
          BuildWidget.buildRow('来源', _acc['Source']['Name']),
          _acc['Source']['Name'] == '外部供应商'
              ? BuildWidget.buildRow('外部供应商', _acc['Supplier']['Name'])
              : new Container(),
          BuildWidget.buildRow('新装零件编号', _acc['NewSerialCode']),
          BuildWidget.buildRow('附件', ''),
          new Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              _acc['ImageNew'] != null &&
                      _acc['ImageNew']['FileContent'] != null
                  ? new Container(
                      width: 100.0,
                      child: BuildWidget.buildPhotoPageList(context, base64Decode(_acc['ImageNew']['FileContent'])),
                    )
                  : new Container()
            ],
          ),
          BuildWidget.buildRow('金额（元/件）', _acc['Amount'].toString()),
          BuildWidget.buildRow('数量', _acc['Qty'].toString()),
          BuildWidget.buildRow('拆下零件编号', _acc['OldSerialCode']),
          BuildWidget.buildRow('附件', ''),
          new Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              _acc['ImageOld'] != null &&
                      _acc['ImageOld']['FileContent'] != null
                  ? new Container(
                      width: 100.0,
                      child: BuildWidget.buildPhotoPageList(context, base64Decode(_acc['ImageOld']['FileContent'])),
                    )
                  : new Container()
            ],
          ),
          widget.status == 3 || widget.status == 2
              ? new Container()
              : new Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: <Widget>[
                    new Text(
                      '删除零件',
                    ),
                    new IconButton(
                        icon: Icon(Icons.delete_forever),
                        onPressed: () {
                          setState(() {
                            _accessory.remove(_acc);
                          });
                        })
                  ],
                ),
          new Divider()
        ];
        _list.addAll(_accList);
      }
    }
    return _list;
  }

  List<ExpansionPanel> buildExpansion() {
    List<ExpansionPanel> _list = [];
    if (_dispatch['Request']['RequestType']['ID'] != 14) {
      _list.add(
        new ExpansionPanel(
          headerBuilder: (context, isExpanded) {
            return ListTile(
              leading: new Icon(
                Icons.info,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text(
                '设备基本信息',
                style:
                    new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
              ),
            );
          },
          body: new Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: new Column(
              children: buildEquipments(),
            ),
          ),
          isExpanded: _expandList[0],
        ),
      );
    }
    _list.add(
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(
              Icons.description,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text(
              '请求详细信息',
              style: new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            mainAxisAlignment: MainAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              BuildWidget.buildRow('服务申请编号', _dispatch['Request']['OID']),
              BuildWidget.buildRow('类型', _dispatch['Request']['SourceType']),
              BuildWidget.buildRow('主题', _dispatch['Request']['SubjectName']),
              BuildWidget.buildRow('请求人', _dispatch['Request']['RequestUser']['Name']),
              BuildWidget.buildRow('请求状态', _dispatch['Request']['Status']['Name']),
              _dispatch['Request']['RequestType']['ID'] == 1?BuildWidget.buildRow('机器状态', _dispatch['Request']['MachineStatus']['Name']):new Container(),
              BuildWidget.buildRow(model.Remark[_dispatch['Request']['RequestType']['ID']], _dispatch['Request']['FaultDesc']),
              _dispatch['Request']['RequestType']['ID'] == 2 ||
                  _dispatch['Request']['RequestType']['ID'] == 3 ||
                  _dispatch['Request']['RequestType']['ID'] == 7
                  ? BuildWidget.buildRow(
                  model.RemarkType[_dispatch['Request']['RequestType']['ID']],
                  _dispatch['Request']['FaultType']['Name'])
                  : new Container(),
              _dispatch['Request']['Status']['ID'] == 1
                  ? new Container()
                  : BuildWidget.buildRow('处理方式', _dispatch['Request']['DealType']['Name']),
            ],
          ),
        ),
        isExpanded: _expandList[1],
      ),
    );
    _list.addAll([
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(
              Icons.description,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text(
              '派工内容',
              style: new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            children: <Widget>[
              BuildWidget.buildRow('派工单编号', _dispatch['OID']),
              BuildWidget.buildRow('派工单状态', _dispatch['Status']['Name']),
              BuildWidget.buildRow('派工类型', _dispatch['RequestType']['Name']),
              _dispatch['RequestType']['ID'] == 14 ? new Container() : BuildWidget.buildRow('机器状态', _dispatch['MachineStatus']['Name']),
              BuildWidget.buildRow('紧急程度', _dispatch['Request']==null?'':_dispatch['Request']['Priority']['Name']??''),
              BuildWidget.buildRow('出发时间', AppConstants.TimeForm(_dispatch['ScheduleDate'], 'hh:mm')),
              BuildWidget.buildRow('工程师姓名', _dispatch['Engineer']['Name']),
              //widget.status==3||widget.status==2?new Container():BuildWidget.buildRow('处理方式', _dispatch['Request']['DealType']['Name']),
              BuildWidget.buildRow('备注', _dispatch['LeaderComments']),
            ],
          ),
        ),
        isExpanded: _expandList[2],
      ),
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(
              Icons.perm_contact_calendar,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text(
              '作业报告信息',
              style: new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: buildReportList(),
          ),
        ),
        isExpanded: _expandList[3],
      ),
    ]);
    if (_dispatch['RequestType']['ID'] != 4 && _dispatch['RequestType']['ID'] != 12 && _dispatch['RequestType']['ID'] != 14) {
      _list.add(
        new ExpansionPanel(
          headerBuilder: (context, isExpanded) {
            return ListTile(
              leading: new Icon(
                Icons.settings,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text(
                '零配件信息',
                style:
                    new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
              ),
            );
          },
          body: new Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: new Column(
              children: buildAccessory(),
            ),
          ),
          isExpanded: _expandList[4],
        ),
      );
    }
    return _list;
  }

  List<Widget> buildEquipments() {
    var _equipments;
    _dispatch['Request'] == null
        ? _equipments = []
        : _equipments = _dispatch['Request']['Equipments'];
    List<Widget> _list = [];
    for (var _equipment in _equipments) {
      var equipList = [
        BuildWidget.buildRow('系统编号', _equipment['OID'] ?? ''),
        BuildWidget.buildRow('名称', _equipment['Name'] ?? ''),
        BuildWidget.buildRow('型号', _equipment['EquipmentCode'] ?? ''),
        BuildWidget.buildRow('序列号', _equipment['SerialCode'] ?? ''),
        BuildWidget.buildRow('设备厂商', _equipment['Manufacturer']['Name'] ?? ''),
        BuildWidget.buildRow('资产等级', _equipment['AssetLevel']['Name'] ?? ''),
        BuildWidget.buildRow('使用科室', _equipment['Department']['Name'] ?? ''),
        BuildWidget.buildRow('安装地点', _equipment['InstalSite'] ?? ''),
        BuildWidget.buildRow('维保状态', _equipment['WarrantyStatus'] ?? ''),
        BuildWidget.buildRow('服务范围', _equipment['ContractScope']['Name'] ?? ''),
        new Divider()
      ];
      _list.addAll(equipList);
    }
    return _list;
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    return new Scaffold(
      appBar: new AppBar(
        title: new Text(
            widget.status == 2 || widget.status == 3 ? '查看作业报告' : '提交作业报告'),
        elevation: 0.7,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.centerLeft,
              end: Alignment.centerRight,
              colors: [
                Theme.of(context).primaryColor,
                Theme.of(context).accentColor
              ],
            ),
          ),
        ),
        actions: <Widget>[
        ],
      ),
      body: _dispatch.isEmpty||_reportType.isEmpty
          ? new Center(
              child: new SpinKitThreeBounce(color: Colors.blue),
            )
          : new Padding(
              padding: EdgeInsets.symmetric(vertical: 5.0),
              child: new Card(
                child: new ListView(
                  children: <Widget>[
                    new ExpansionPanelList(
                      animationDuration: Duration(milliseconds: 200),
                      expansionCallback: (index, isExpanded) {
                        setState(() {
                          _dispatch['Request']['RequestType']['ID'] !=14?
                          _expandList[index] = !isExpanded:
                          _expandList[index+1] = !isExpanded;
                        });
                      },
                      children: buildExpansion(),
                    ),
                    SizedBox(height: 20.0),
                    widget.status == 0 || widget.status == 1
                        ? new Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            mainAxisSize: MainAxisSize.max,
                            crossAxisAlignment: CrossAxisAlignment.end,
                            children: <Widget>[
                              new RaisedButton(
                                onPressed: () {
                                  return hold?null:uploadReport(2);
                                },
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(6),
                                ),
                                padding: EdgeInsets.all(12.0),
                                color: new Color(0xff2E94B9),
                                child: Text('上传报告',
                                    style: TextStyle(color: Colors.white)),
                              ),
                              new RaisedButton(
                                onPressed: () {
                                  return hold?null:uploadReport(1);
                                },
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(6),
                                ),
                                padding: EdgeInsets.all(12.0),
                                color: new Color(0xff2E94B9),
                                child: Text('保存报告',
                                    style: TextStyle(color: Colors.white)),
                              ),
                            ],
                          )
                        : new Container()
                  ],
                ),
              ),
            ),
    );
  }
}




--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------manager_assign_page.dart----------------------------------------------------------------------------------------

import 'dart:core';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:atoi/utils/http_request.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:atoi/utils/constants.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'dart:convert';
import 'package:photo_view/photo_view.dart';
import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/models/models.dart';
import 'package:atoi/models/main_model.dart';
import 'package:atoi/widgets/build_widget.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_cupertino_date_picker/flutter_cupertino_date_picker.dart';
import 'package:date_format/date_format.dart';
import 'package:should_rebuild/should_rebuild.dart';

/// 超管派工页面类
class ManagerAssignPage extends StatefulWidget {
  static String tag = 'mananger-assign-page';

  ManagerAssignPage({Key key, this.request}) : super(key: key);
  final Map request;
  @override
  _ManagerAssignPageState createState() => new _ManagerAssignPageState();

}

class _ManagerAssignPageState extends State<ManagerAssignPage> {

  var _isExpandedBasic = true;
  var _isExpandedDetail = false;
  var _isExpandedAssign = false;
  String departureDate = 'YY-MM-DD';
  String dispatchDate = 'YY-MM-DD';
  var _desc = new TextEditingController();

  Map<String, dynamic> _request = {};
  ConstantsModel model;
  List dispatches = [];

  String _userName = '';
  String _mobile = '';

  Future<Null> getRole() async {
    var prefs = await _prefs;
    var userName = prefs.getString('userName');
    var mobile = prefs.getString('mobile');
    setState(() {
      _userName = userName;
      _mobile = mobile;
    });
  }

  Future<SharedPreferences> _prefs = SharedPreferences.getInstance();

  final List<dynamic> imageBytes = [];

  List _handleMethods = [
    '现场服务',
    '电话解决',
    '远程解决',
    '待第三方支持'
  ];

  List _priorities = [
    '普通',
    '紧急'
  ];

  List _assignTypes = [
    '维修',
    '保养',
    '强检',
    '巡检',
    '校准',
    '设备新增',
    '不良事件',
    '合同档案',
    '验收安装',
    '调拨',
    '借用',
    '盘点',
    '报废',
    '其他服务'
  ];

  List _levels = [
    '普通',
    '紧急'
  ];

  List _isRecall = [
    '是',
    '否'
  ];

  List _deviceStatuses = [
    '正常',
    '勉强使用',
    '停机'
  ];

  List _maintainType = [
    '原厂保养',
    '第三方保养',
    'FMTS保养'
  ];
  List _faultType = [
    '未知'
  ];
  List _mandatory = [
    '政府要求',
    '医院要求',
    '自主强检'
  ];
  List _badSource = [
    '政府通报',
    '医院自检',
    '召回事件'
  ];

  List _engineerNames = [];

  Map<String, int> _engineers = {};
  List<String> _fileNames = [];
  //final String roleName = await LocalStorage().getStorage('roleName', String);

  List<DropdownMenuItem<String>> _dropDownMenuItems;
  List<DropdownMenuItem<String>> _dropDownMenuPris;
  List<DropdownMenuItem<String>> _dropDownMenuTypes;
  List<DropdownMenuItem<String>> _dropDownMenuLevels;
  List<DropdownMenuItem<String>> _dropDownMenuStatuses;
  List<DropdownMenuItem<String>> _dropDownMenuStatusesReq;
  List<DropdownMenuItem<String>> _dropDownMenuNames;
  List<DropdownMenuItem<String>> _dropDownMenuMaintain;
  List<DropdownMenuItem<String>> _dropDownMenuFault;
  List<DropdownMenuItem<String>> _dropDownMenuSource;
  List<DropdownMenuItem<String>> _dropDownMenuMandatory;
  List<DropdownMenuItem<String>> _dropDownMenuRecall;


  var _leaderComment = new TextEditingController();

  String _currentMethod;
  String _currentPriority;
  String _currentType;
  String _currentLevel;
  String _currentStatus;
  String _currentStatusReq;
  String _currentName;
  String _currentMaintain;
  String _currentFault;
  String _currentSource;
  String _currentMandatory;
  String _currentRecall;


  Future<Null> getRequest() async {
    int requestId = widget.request['ID'];
    var prefs = await _prefs;
    var userId = prefs.getInt('userID');
    var params = {
      'userId': userId,
      'requestId': requestId
    };
    var resp = await HttpRequest.request(
      '/Request/GetRequestByID',
      method: HttpRequest.GET,
      params: params,
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      var files = resp['Data']['Files'];
      for (var file in files) {
        var _list = file['FileName'].split('.');
        _list = _list.reversed.toList();
        if (_list[0].toLowerCase() == 'jpg' || _list[0].toLowerCase() == 'png' || _list[0].toLowerCase() == 'jpeg' || _list[0].toLowerCase() == 'bmp') {
          getImage(file['ID']);
        } else {
          _fileNames.add(file['FileName']);
        }
      }
      setState(() {
        _request = resp['Data'];
        _currentType = _request['RequestType']['Name'];
        _desc.text = resp['Data']['FaultDesc'];
        if (resp['Data']['MachineStatus']['ID'] != 0) {
          _currentStatusReq = _request['MachineStatus']['Name'];
          _currentStatus = _request['MachineStatus']['Name'];
        }
      });
      if (resp['Data']['RequestType']['ID'] == 2) {
        setState(() {
          _currentMaintain = resp['Data']['FaultType']['Name'];
        });
      }
      if (resp['Data']['RequestType']['ID'] == 3) {
        setState(() {
          _currentMandatory = resp['Data']['FaultType']['Name'];
        });
      }
      if (resp['Data']['RequestType']['ID'] == 7) {
        setState(() {
          _currentSource = resp['Data']['FaultType']['Name'];
        });
      }
    }
  }

  Future<Null> getRequestDispatches() async {
    var resp = await HttpRequest.request(
      '/Dispatch/GetDispatchesByRequestID',
      method: HttpRequest.GET,
      params: {
        'id': widget.request['ID']
      }
    );
    if (resp['ResultCode'] == '00') {
      List _list = resp['Data'];
      _list.removeWhere((item) => (item['Status']['ID'] == -1 || item['Status']['ID'] == 4));
      setState(() {
        dispatches = _list;
      });
    }
  }

  Future<Null> getImage(int fileId) async {
    var resp = await HttpRequest.request(
      '/Request/DownloadUploadFile',
      params: {
        'ID': fileId
      },
      method: HttpRequest.GET
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      setState(() {
        var decoded = base64Decode(resp['Data']);
        imageBytes.add(decoded);
      });
    }
  }

  Future<Null> getEngineers() async {
    List<String> _listName = [
      '--请选择--'
    ];
    Map<String, int> _listID = {};
    var resp = await HttpRequest.request(
      '/User/GetUsers4Dispatch',
      method: HttpRequest.GET
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      for (var item in resp['Data']) {
        _listName.add(item['Name']);
        _listID[item['Name']] = item['ID'];
      }
      List<dynamic> _list = [{
        'Name': '--请选择--',
        'HasOpenDispatch': false
      }];
      _list.addAll(resp['Data']);
      setState(() {
        _engineerNames = _listName;
        _engineers = _listID;
        _dropDownMenuNames = getDropDownMenuEngineer(_list);
        _currentName = _dropDownMenuNames[0].value;
      });
    }
  }

  List iterateMap(Map item) {
    var _list = [];
    item.forEach((key, val) {
      _list.add(key);
    });
    return _list;
  }

  void initDropdown() {
    //get key
    _handleMethods = iterateMap(model.DealType);
    _priorities = iterateMap(model.PriorityID);
    _assignTypes = iterateMap(model.RequestType);
    _levels = iterateMap(model.UrgencyID);
    _deviceStatuses = iterateMap(model.MachineStatus);
    _maintainType = iterateMap(model.FaultMaintain);
    _mandatory = iterateMap(model.FaultCheck);
    _badSource = iterateMap(model.FaultBad);

    //init dropdown menu
    _dropDownMenuItems = getDropDownMenuItems(_handleMethods);
    _currentMethod = _dropDownMenuItems[0].value;
    _dropDownMenuPris = getDropDownMenuItems(_priorities);
    _currentPriority = _dropDownMenuPris[0].value;
    _dropDownMenuTypes = getDropDownMenuItems(_assignTypes);
    _dropDownMenuLevels = getDropDownMenuItems(_levels);
    _dropDownMenuStatuses = getDropDownMenuItems(_deviceStatuses);
    _dropDownMenuStatusesReq = getDropDownMenuItems(_deviceStatuses);
    _currentLevel = _dropDownMenuLevels[0].value;
    _currentStatus = _dropDownMenuStatuses[0].value;
    _currentStatusReq = _dropDownMenuStatuses[0].value;
    _dropDownMenuFault = getDropDownMenuItems(_faultType);
    _currentFault = _dropDownMenuFault[0].value;
    _dropDownMenuMaintain = getDropDownMenuItems(_maintainType);
    _dropDownMenuSource = getDropDownMenuItems(_badSource);
    _dropDownMenuMandatory = getDropDownMenuItems(_mandatory);
    _dropDownMenuRecall = getDropDownMenuItems(_isRecall);
    _currentRecall = _dropDownMenuRecall[0].value;
  }

  void initState() {
    model = MainModel.of(context);
    initDropdown();
    getRole();
    List time = new DateTime.now().toString().split('.')[0].split(':');
    time.removeLast();
    dispatchDate = time.join(':');
    getRequest();
    getEngineers();
    getRequestDispatches();
    super.initState();
  }

  List<DropdownMenuItem<String>> getDropDownMenuEngineer(List list) {
    List<DropdownMenuItem<String>> items = new List();
    for (var method in list) {
      items.add(new DropdownMenuItem(
          value: method['Name'],
          child: new Text(method['Name'],
            style: new TextStyle(
                fontSize: 16.0,
                color: method['HasOpenDispatch']?Colors.redAccent:Colors.grey
            ),
          )
      ));
    }
    return items;
  }
  List<DropdownMenuItem<String>> getDropDownMenuItems(List list) {
    List<DropdownMenuItem<String>> items = new List();
    for (String method in list) {
      items.add(new DropdownMenuItem(
          value: method,
          child: new Text(method,
            style: new TextStyle(
              fontSize: 16.0
            ),
          )
      ));
    }
    return items;
  }

  void changedDropDownMethod(String selectedMethod) {
    setState(() {
      _currentMethod = selectedMethod;
    });
  }

  void changedDropDownPri(String selectedMethod) {
    setState(() {
      _currentPriority = selectedMethod;
    });
  }

  void changedDropDownType(String selectedMethod) {
    setState(() {
      _currentType = selectedMethod;
    });
  }

  void changedDropDownLevel(String selectedMethod) {
    setState(() {
      _currentLevel = selectedMethod;
    });
  }

  void changedDropDownStatus(String selectedMethod) {
    setState(() {
      _currentStatus = selectedMethod;
    });
  }

  void changedDropDownStatusReq(String selectedMethod) {
    setState(() {
      _currentStatusReq = selectedMethod;
    });
  }

  void changedDropDownName(String selectedMethod) {
    setState(() {
      _currentName = selectedMethod;
    });
  }

  void changedDropDownFault(String selectedMethod) {
    setState(() {
      _currentFault = selectedMethod;
    });
  }
  void changedDropDownMaintain(String selectedMethod) {
    setState(() {
      _currentMaintain = selectedMethod;
    });
  }
  void changedDropDownSource(String selectedMethod) {
    setState(() {
      _currentSource = selectedMethod;
    });
  }
  void changedDropDownMandatory(String selectedMethod) {
    setState(() {
      _currentMandatory= selectedMethod;
    });
  }
  void changedDropDownRecall(String selectedMethod) {
    setState(() {
      _currentRecall= selectedMethod;
    });
  }

  Column buildImageColumn() {
    if (imageBytes == null) {
      return Column();
    } else {
      List<Widget> _list = [];
      for(var file in imageBytes) {
        _list.add(Container(
          child: GestureDetector(
            onTap: () {
              Navigator.of(context).push(new MaterialPageRoute(builder: (_) =>
                  FullScreenWrapper(
                    imageProvider: MemoryImage(file),
                    backgroundDecoration: BoxDecoration(
                        color: Colors.white
                    ),
                  )
              ));
            },
            child: Image.memory(file),
          ),
          width: 400.0,
          height: 400.0,
        ));
        _list.add(SizedBox(height: 8.0,));
      }
      return Column(children: _list);
    }
  }

  Column buildFileName() {
    if (_fileNames.length == 0) {
      return new Column();
    } else {
      List<Widget> _list = [];
      for(var _name in _fileNames) {
        _list.add(new ListTile(
          title: new Row(
            children: <Widget>[
              new Expanded(
                  flex: 4,
                  child: new Container()
              ),
              new Expanded(
                  flex: 6,
                  child: new Text(
                    _name,
                    style: new TextStyle(
                        color: Colors.blue
                    ),
                  ),
              ),
            ],
          )
        ));
      }
      return new Column(children: _list,);
    }
  }

  TextField buildTextField(String labelText, String defaultText, bool isEnabled) {
    return new TextField(
      decoration: InputDecoration(
          labelText: labelText,
          labelStyle: new TextStyle(
              fontSize: 16.0
          ),
          disabledBorder: UnderlineInputBorder(
            borderSide: BorderSide(
              color: Colors.grey,
              width: 1
            )
          )
      ),
      controller: new TextEditingController(text: defaultText),
      enabled: isEnabled,
      style: new TextStyle(
          fontSize: 16.0
      ),
    );
  }

  Padding buildRow(String labelText, String defaultText) {
    return new Padding(
      padding: EdgeInsets.symmetric(vertical: 5.0),
      child: new Row(
        children: <Widget>[
          new Expanded(
            flex: 4,
            child: new Wrap(
              //mainAxisAlignment: MainAxisAlignment.end,
              alignment: WrapAlignment.end,
              crossAxisAlignment: WrapCrossAlignment.center,
              children: <Widget>[
                new Text(
                  labelText,
                  style: new TextStyle(
                      fontSize: 16.0,
                      fontWeight: FontWeight.w600
                  ),
                )
              ],
            ),
          ),
          new Expanded(
            flex: 1,
            child: new Text(
              '',
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w600,
              ),
            ),
          ),
          new Expanded(
            flex: 6,
            child: new Text(
              defaultText,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w400,
                  color: Colors.black54
              ),
            ),
          )
        ],
      ),
    );
  }

  Row buildDropdown(String title, String currentItem, List dropdownItems, Function changeDropdown) {
    return new Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: <Widget>[
        new Expanded(
          flex: 4,
          child: new Padding(
            padding: EdgeInsets.symmetric(vertical: 5.0),
            child: new Text(
              title,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w600
              ),
            ),
          ),
        ),
        new Expanded(
          flex: 5,
          child: new DropdownButton(
            value: currentItem,
            items: dropdownItems,
            onChanged: changeDropdown,
          ),
        )
      ],
    );
  }

  Future<Null> terminate() async {
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    Map<String, dynamic> _data = {
      'userID': userID,
      'requestID': _request['ID']
    };
    var resp = await HttpRequest.request(
      '/Request/EndRequest',
      method: HttpRequest.POST,
      data: _data
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('终止请求成功'),
        )
      ).then((result) =>
        Navigator.of(context, rootNavigator: true).pop()
      );
    } else {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text(resp['ResultMessage']),
        )
      );
    }
  }

  Future assignRequest() async {
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    Map<String, dynamic> _data = {
      'userID': userID,
      'dispatchInfo': {
        'Request': {
          'ID': _request['ID'],
          'Priority': {
            'ID': model.PriorityID[_currentPriority],
          },
          'DealType': {
            'ID': model.DealType[_currentMethod]
          },
          'MachineStatus': {
            'ID': model.MachineStatus[_currentStatusReq]
          },
          'FaultDesc': _desc.text,
          'IsRecall': _request['IsRecall']
        },
        'Urgency': {
          'ID': model.UrgencyID[_currentLevel]
        },
        'Engineer': {
          'ID': _engineers[_currentName]
        },
        'MachineStatus': {
          'ID': model.MachineStatus[_currentStatus]
        },
        'ScheduleDate': dispatchDate,
        'LeaderComments': _leaderComment.text,
        'RequestType': {
          'ID': model.RequestType[_currentType]
        }
      }
    };
    switch (_request['RequestType']['ID']) {
      case 1:
        _data['dispatchInfo']['Request']['FaultType'] = {
          //'ID': model.FaultRepair[_currentFault]
          'ID': 1
        };
        break;
      case 2:
        _data['dispatchInfo']['Request']['FaultType'] = {
          'ID': model.FaultMaintain[_currentMaintain]
        };
        break;
      case 3:
        _data['dispatchInfo']['Request']['FaultType'] = {
          'ID': model.FaultCheck[_currentMandatory]
        };
        break;
      case 7:
        _data['dispatchInfo']['Request']['FaultType'] = {
          'ID': model.FaultBad[_currentSource]
        };
        break;
      default:
        _data['dispatchInfo']['Request']['FaultType'] = {
          'ID': _request['FaultType']['ID']
        };
    }
    var resp = await HttpRequest.request(
      '/Request/CreateDispatch',
      method: HttpRequest.POST,
      data: _data
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('安排派工成功'),
        )
      ).then((result) =>
        Navigator.of(context, rootNavigator: true).pop(result)
      );
    } else {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text(resp['ResultMessage']),
        )
      );
    }
  }

  List<Widget> buildEquipment() {
    if (_request.isNotEmpty) {
      var _equipments = _request['Equipments'];
      List<Widget> _equipList = [];
      for (var _equipment in _equipments) {
        var _list = [
          BuildWidget.buildRow('系统编号', _equipment['OID']??''),
          BuildWidget.buildRow('名称', _equipment['Name']??''),
          BuildWidget.buildRow('型号', _equipment['EquipmentCode']??''),
          BuildWidget.buildRow('序列号', _equipment['SerialCode']??''),
          BuildWidget.buildRow('设备厂商', _equipment['Manufacturer']['Name']??''),
          BuildWidget.buildRow('资产等级', _equipment['AssetLevel']['Name']??''),
          BuildWidget.buildRow('使用科室', _equipment['Department']['Name']??''),
          BuildWidget.buildRow('安装地点', _equipment['InstalSite']??''),
          BuildWidget.buildRow('维保状态', _equipment['WarrantyStatus']??''),
          BuildWidget.buildRow('服务范围', _equipment['ContractScope']['Name']??''),
          new Divider(),
        ];
        _equipList.addAll(_list);
      }
      return _equipList;
    } else {
      return [];
    }
  }

  List<dynamic> _buildExpansion(BuildContext context) {
    List<ExpansionPanel> _list = [];
    if (_request['RequestType']['ID'] != 14) {
      _list.add(new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
              leading: new Icon(Icons.info,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text('设备基本信息',
                style: new TextStyle(
                    fontSize: 20.0,
                    fontWeight: FontWeight.w400
                ),
              ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 12.0),
          child: new Column(
            children: buildEquipment(),
          ),
        ),
        isExpanded: _isExpandedBasic,
      ));
    }
    _list.add(new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
              leading: new Icon(Icons.description,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text('请求内容',
                style: new TextStyle(
                    fontSize: 20.0,
                    fontWeight: FontWeight.w400
                ),
              ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            mainAxisAlignment: MainAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              BuildWidget.buildRow('类型', _request['SourceType']),
              BuildWidget.buildRow('主题', _request['SubjectName']),
              BuildWidget.buildRow('请求人', _request['RequestUser']['Name']),
              BuildWidget.buildRow('请求状态', _request['Status']['Name']),
              _request['RequestType']['ID']==1?BuildWidget.buildDropdown('机器状态', _currentStatusReq, _dropDownMenuStatusesReq, changedDropDownStatusReq, context: context):new Container(),
              BuildWidget.buildInput(model.Remark[_request['RequestType']['ID']], _desc, maxLength: 200),
              _request['RequestType']['ID']==2?BuildWidget.buildDropdown('保养类型', _currentMaintain, _dropDownMenuMaintain, changedDropDownMaintain, context: context):new Container(),
              _request['RequestType']['ID']==3?BuildWidget.buildDropdown('强检原因', _currentMandatory, _dropDownMenuMandatory, changedDropDownMandatory, context: context):new Container(),
              _request['RequestType']['ID']==7?BuildWidget.buildDropdown('来源', _currentSource, _dropDownMenuSource, changedDropDownSource, context: context):new Container(),
              _request['RequestType']['ID']==3?BuildWidget.buildRow('是否召回', _request['IsRecall']?'是':'否'):new Container(),
              BuildWidget.buildRow('请求附件', ''),
              buildImageColumn(),
              //imageBytes.isNotEmpty?ShouldRebuild<BuildImageColumn>(shouldRebuild: (_old, _new) => _old.imageList!=_new.imageList, child: BuildImageColumn(imageList: imageBytes,),):Container(),
              buildFileName(),
              new Divider(),
              BuildWidget.buildDropdown('处理方式', _currentMethod, _dropDownMenuItems, changedDropDownMethod, context: context),
              //BuildWidget.buildDropdown('紧急程度', _currentPriority, _dropDownMenuPris, changedDropDownPri),
            ],
          ),
        ),
        isExpanded: _isExpandedDetail,
      ),
    );
    _list.add(new ExpansionPanel(
      headerBuilder: (context, isExpanded) {
        return ListTile(
            leading: new Icon(Icons.perm_contact_calendar,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text('派工内容',
              style: new TextStyle(
                  fontSize: 20.0,
                  fontWeight: FontWeight.w400
              ),
            ),
        );
      },
      body: new Padding(
        padding: EdgeInsets.symmetric(horizontal: 8.0),
        child: new Column(
          mainAxisAlignment: MainAxisAlignment.start,
          mainAxisSize: MainAxisSize.max,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            BuildWidget.buildDropdown('派工类型', _currentType, _dropDownMenuTypes, changedDropDownType, context: context),
            _currentType!='其他服务'?BuildWidget.buildDropdown('机器状态', _currentStatus, _dropDownMenuStatuses, changedDropDownStatus, context: context):new Container(),
            BuildWidget.buildDropdown('紧急程度', _currentLevel, _dropDownMenuLevels, changedDropDownLevel, context: context),
            new Padding(
              padding: EdgeInsets.symmetric(vertical: 5.0),
              child: new Row(
                children: <Widget>[
                  new Expanded(
                    flex: 4,
                    child: new Wrap(
                      alignment: WrapAlignment.end,
                      crossAxisAlignment: WrapCrossAlignment.center,
                      children: <Widget>[
                        new Text(
                          '出发时间',
                          style: new TextStyle(
                              fontSize: 16.0,
                              fontWeight: FontWeight.w600
                          ),
                        )
                      ],
                    ),
                  ),
                  new Expanded(
                    flex: 1,
                    child: new Text(
                      '：',
                      style: new TextStyle(
                        fontSize: 16.0,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                  new Expanded(
                    flex: 4,
                    child: new Text(
                      dispatchDate,
                      style: new TextStyle(
                          fontSize: 14.0,
                          fontWeight: FontWeight.w400,
                          color: Colors.black54
                      ),
                    ),
                  ),
                  new Expanded(
                    flex: 2,
                    child: new IconButton(
                      color: AppConstants.AppColors['btn_main'],
                      icon: Icon(Icons.calendar_today),
                      onPressed: () {
                        var _initTime = DateTime.tryParse(dispatchDate)??DateTime.now();
                        DatePicker.showDatePicker(
                          context,
                          pickerTheme: DateTimePickerTheme(
                            showTitle: true,
                            confirm: Text('确认', style: TextStyle(color: Colors.blueAccent)),
                            cancel: Text('取消', style: TextStyle(color: Colors.redAccent)),
                          ),
                          minDateTime: DateTime.now().add(Duration(days: -1)),
                          maxDateTime: DateTime.now().add(Duration(days: 30)),
                          initialDateTime: _initTime,
                          dateFormat: 'yyyy-MM-dd,H时:m分',
                          pickerMode: DateTimePickerMode.datetime,
                          locale: DateTimePickerLocale.en_us,
                          onClose: () => print(""),
                          onCancel: () => print('onCancel'),
                          onChange: (dateTime, List<int> index) {
                          },
                          onConfirm: (dateTime, List<int> index) {
                            setState(() {
                              dispatchDate = formatDate(dateTime, [yyyy, '-', mm, '-', dd, ' ', HH, ':', nn]);
                            });
                          },
                        );
                        //showDatePicker(
                        //    context: context,
                        //    initialDate: _initTime.isBefore(DateTime.now())?DateTime.now():_initTime,
                        //    firstDate: DateTime.now().add(new Duration(days: -1)),
                        //    lastDate: new DateTime.now().add(new Duration(days: 30)),
                        //    locale: Locale('zh')
                        //).then((DateTime val) {
                        //  if (val != null) {
                        //    showTimePicker(context: (context), initialTime: TimeOfDay.fromDateTime(_initTime)??TimeOfDay.now()).then((TimeOfDay selectTime) {
                        //      var _time = selectTime.format(context);
                        //      setState(() {
                        //        dispatchDate = '${val.toString().split(' ')[0]} ${_time}';
                        //      });
                        //    });
                        //  }
                        //}).catchError((err) {
                        //  print(err);
                        //});
                      },
                    ),
                  )
                ],
              ),
            ),
            _engineerNames.isEmpty?new Container():BuildWidget.buildDropdown('工程师姓名', _currentName, _dropDownMenuNames, changedDropDownName, context: context),
            new Padding(
              padding: EdgeInsets.symmetric(vertical: 5.0),
              child: new Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  new Align(
                    alignment: Alignment(-0.62, 0),
                    child: new Text(
                      '主管备注：',
                      style: new TextStyle(
                          fontSize: 16.0,
                          fontWeight: FontWeight.w600
                      ),
                    ),
                  ),
                  new TextField(
                    controller: _leaderComment,
                    maxLength: 200,
                  )
                ],
              ),
            ),
          ],
        ),
      ),
      isExpanded: _isExpandedAssign,
    ));
    return _list;
  }

  @override
  Widget build(BuildContext context){
    return ScopedModelDescendant<MainModel>(
      builder: (context, child, model) {
        return new Scaffold(
          appBar: new AppBar(
            title: new Text('分配请求'),
            elevation: 0.7,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.centerLeft,
                  end: Alignment.centerRight,
                  colors: [
                    Theme.of(context).primaryColor,
                    Theme.of(context).accentColor
                  ],
                ),
              ),
            ),
            actions: <Widget>[
            ],
          ),
          body: _request.isEmpty?new Center(child: SpinKitThreeBounce(color: Colors.lightBlue,)):new Padding(
            padding: EdgeInsets.symmetric(vertical: 5.0),
            child: new Card(
              child: new ListView(
                children: <Widget>[
                  new ExpansionPanelList(
                    animationDuration: Duration(milliseconds: 200),
                    expansionCallback: (index, isExpanded) {
                      setState(() {
                        if (index == 0) {
                          if (_request['RequestType']['ID'] == 14) {
                            _isExpandedDetail = !isExpanded;
                          } else {
                            _isExpandedBasic = !isExpanded;
                          }
                        } else {
                          if (index == 1) {
                            if (_request['RequestType']['ID'] == 14) {
                              _isExpandedAssign = !isExpanded;
                            } else {
                              _isExpandedDetail = !isExpanded;
                            }
                          } else {
                            _isExpandedAssign =!isExpanded;
                          }
                        }
                      });
                    },
                    children: _buildExpansion(context),
                  ),
                  SizedBox(height: 20.0),
                  new Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    mainAxisSize: MainAxisSize.max,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: <Widget>[
                      new Padding(
                        padding: EdgeInsets.symmetric(horizontal: 5.0),
                        child: new RaisedButton(
                          onPressed: () {
                            if (_currentName == '--请选择--') {
                              showDialog(context: context,
                                  builder: (context) => CupertinoAlertDialog(
                                    title: new Text('请选择工程师'),
                                  )
                              );
                              return;
                            }
                            if (_desc.text.isEmpty) {
                              showDialog(context: context,
                                  builder: (context) => CupertinoAlertDialog(
                                    title: new Text(
                                        '${model.Remark[_request['RequestType']['ID']]}不可为空'
                                    ),
                                  )
                              );
                              return;
                            }
                            if (dispatches.length > 0) {
                              showDialog(context: context,
                                  builder: (context) => CupertinoAlertDialog(
                                    title: new Text('已有派工,是否继续派工?'),
                                    actions: <Widget>[
                                      new Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: <Widget>[
                                          new Container(
                                            width: 100.0,
                                            child: RaisedButton(
                                              //padding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 16.0),
                                              child: Text('确认', style: TextStyle(color: Colors.white),),
                                              shape: RoundedRectangleBorder(
                                                borderRadius: BorderRadius.circular(6),
                                              ),
                                              color: AppConstants.AppColors['btn_cancel'],
                                              onPressed: () {
                                                Navigator.of(context).pop();
                                                assignRequest();
                                                model.getRequests();
                                              },
                                            ),
                                          ),
                                          new SizedBox(
                                            width: 10.0,
                                          ),
                                          new Container(
                                            width: 100.0,
                                            child: RaisedButton(
                                              child: Text('取消', style: TextStyle(color: Colors.white),),
                                              shape: RoundedRectangleBorder(
                                                borderRadius: BorderRadius.circular(6),
                                              ),
                                              color: AppConstants.AppColors['btn_main'],
                                              onPressed: () {
                                                Navigator.of(context).pop();
                                              },
                                            ),
                                          )
                                        ],
                                      ),
                                    ],
                                  )
                              );
                            } else {
                              assignRequest();
                              model.getRequests();
                            }
                          },
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(6),
                          ),
                          padding: EdgeInsets.all(12.0),
                          color: new Color(0xff2E94B9),
                          child: Text('安排派工', style: TextStyle(color: Colors.white)),
                        ),
                      ),
                      new Padding(
                        padding: EdgeInsets.symmetric(horizontal: 5.0),
                        child: new RaisedButton(
                          onPressed: () {
                            //terminate();
                            //model.getRequests();
                            showDialog(context: context,
                              builder: (context) => CupertinoAlertDialog(
                                title: new Text(_request['HasOpenDispatch']?'有未完成的派工单,无法终止':'是否终止请求？'),
                                actions: _request['HasOpenDispatch']?[]:[
                                  new Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: <Widget>[
                                      new Container(
                                        width: 100.0,
                                        child: RaisedButton(
                                          //padding: EdgeInsets.symmetric(vertical: 10.0, horizontal: 16.0),
                                          child: Text('确认', style: TextStyle(color: Colors.white),),
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(6),
                                          ),
                                          color: AppConstants.AppColors['btn_cancel'],
                                          onPressed: () {
                                            terminate();
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                      ),
                                      new SizedBox(
                                        width: 10.0,
                                      ),
                                      new Container(
                                        width: 100.0,
                                        child: RaisedButton(
                                          child: Text('取消', style: TextStyle(color: Colors.white),),
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(6),
                                          ),
                                          color: AppConstants.AppColors['btn_main'],
                                          onPressed: () {
                                            Navigator.of(context).pop();
                                          },
                                        ),
                                      )
                                    ],
                                  ),
                                ],
                              )
                            );
                          },
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(6),
                          ),
                          padding: EdgeInsets.all(12.0),
                          color: new Color(0xffD25565),
                          child: Text('终止请求', style: TextStyle(color: Colors.white)),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 20.0),
                ],
              ),
            ),
          ),
        );
      },
    );
  }
}

class BuildImageColumn extends StatelessWidget {
  final List imageList;
  BuildImageColumn({this.imageList});

  Widget build(BuildContext context) {
    List<Widget> _list = [];
    for(var file in imageList) {
      _list.add(Container(
        child: BuildWidget.buildPhotoPageList(context, file),
        width: 400.0,
        height: 400.0,
      ));
      _list.add(SizedBox(height: 8.0,));
    }
    return Column(children: _list);
  }

}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------manager_audit_report_page.dart----------------------------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:atoi/utils/http_request.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:atoi/utils/constants.dart';
import 'package:atoi/widgets/build_widget.dart';
import 'dart:convert';
import 'dart:typed_data';
import 'package:photo_view/photo_view.dart';
import 'package:scoped_model/scoped_model.dart';
import 'package:atoi/models/models.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:multi_image_picker/multi_image_picker.dart';
import 'package:uuid/uuid.dart';

/// 超管审核报告页面类
class ManagerAuditReportPage extends StatefulWidget {
  static String tag = 'manager-audit-report-page';
  ManagerAuditReportPage({Key key, this.reportId, this.request, this.status}): super(key: key);
  final int reportId;
  final Map request;
  final int status;

  @override
  _ManagerAuditReportPageState createState() => new _ManagerAuditReportPageState();
}

class _ManagerAuditReportPageState extends State<ManagerAuditReportPage> {

  List<bool> _expandList =  [false, false, false, true, false, false];
  List _equipments = [];
  var _comment = new TextEditingController();
  ConstantsModel model;
  var _unsolved = new TextEditingController();
  int _attachId;

  List _serviceResults = [
    '待分配',
    '问题升级',
    '待第三方支持',
    '已解决'
  ];

  List _provider = [];

  List<DropdownMenuItem<String>> _dropDownMenuItems;
  List<DropdownMenuItem<String>> _dropDownMenuProviders;
  String _currentResult;
  String _currentProvider;
  String _currentScope;
  Map<String, dynamic> _report = {};
  Map<String, dynamic> _dispatch = {};

  String _userName = '';
  String _mobile = '';
  var _accessory;
  List reportAccess = [];
  List<dynamic> imageAttach = [];

  List _serviceScope = ['是', '否'];

  void changeScope(value) {
    setState(() {
      _currentScope = value;
    });
  }

  Future<Null> getRole() async {
    var prefs = await _prefs;
    var userName = prefs.getString('userName');
    var mobile = prefs.getString('mobile');
    setState(() {
      _userName = userName;
      _mobile = mobile;
    });
  }

  List iterateMap(Map item) {
    var _list = [];
    item.forEach((key, val) {
      _list.add(key);
    });
    return _list;
  }

  void initDropdown() {
    _serviceResults = iterateMap(model.SolutionStatus);
    _provider = iterateMap(model.ServiceProviders);
    _dropDownMenuItems = getDropDownMenuItems(_serviceResults);
    _dropDownMenuProviders = getDropDownMenuItems(_provider);
    _currentResult = _dropDownMenuItems[0].value;
    _currentProvider = _dropDownMenuProviders[0].value;
  }

  void initState(){
    getRole();
    model = MainModel.of(context);
    initDropdown();
    getDispatch();
    getReport();
    super.initState();
  }

  List<DropdownMenuItem<String>> getDropDownMenuItems(List list) {
    List<DropdownMenuItem<String>> items = new List();
    for (String method in list) {
      items.add(new DropdownMenuItem(
          value: method,
          child: new Text(method,
            style: new TextStyle(
                fontSize: 16.0
            ),
          )
      ));
    }
    return items;
  }

  void changedDropDownMethod(String selectedMethod) {
    setState(() {
      _currentResult = selectedMethod;
    });
  }

  void changeProvider(String selectedMethod) {
    setState(() {
      _currentProvider = selectedMethod;
    });
  }

  String formatTime(String time) {
    var _time = DateTime.tryParse(time);
    if (_time != null) {
      return '${_time.year}-${_time.month}-${_time.day} ${_time.hour}:${_time.minute}';
    } else {
      return 'YY-MM-DD';
    }
  }

  TextField buildTextField(String labelText, TextEditingController controller, bool isEnabled) {
    return new TextField(
      decoration: InputDecoration(
          labelText: labelText,
          labelStyle: new TextStyle(
              fontSize: 16.0
          ),
          disabledBorder: UnderlineInputBorder(
              borderSide: BorderSide(
                  color: Colors.grey,
                  width: 1
              )
          )
      ),
      maxLines: 3,
      maxLength: 200,
      controller: controller,
      focusNode: _focusReport[3],
      enabled: isEnabled,
      style: new TextStyle(
          fontSize: 16.0
      ),
    );
  }

  Padding buildRow(String labelText, String defaultText) {
    return new Padding(
      padding: EdgeInsets.symmetric(vertical: 5.0),
      child: new Row(
        children: <Widget>[
          new Expanded(
            flex: 4,
            child: new Text(
              labelText,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w600
              ),
            ),
          ),
          new Expanded(
            flex: 6,
            child: new Text(
              defaultText,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w400,
                  color: Colors.black54
              ),
            ),
          )
        ],
      ),
    );
  }

  Row buildDropdown(String title, String currentItem, List dropdownItems, Function changeDropdown) {
    return new Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: <Widget>[
        new Expanded(
          flex: 4,
          child: new Padding(
            padding: EdgeInsets.symmetric(vertical: 5.0),
            child: new Text(
              title,
              style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w600
              ),
            ),
          ),
        ),
        new Expanded(
          flex: 6,
          child: new DropdownButton(
            value: currentItem,
            items: dropdownItems,
            onChanged: changeDropdown,
          ),
        )
      ],
    );
  }

  Future<SharedPreferences> _prefs = SharedPreferences.getInstance();

  Future<Null> getReport() async {
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    var reportId = widget.reportId;
    var resp = await HttpRequest.request(
      '/DispatchReport/GetDispatchReport',
      method: HttpRequest.GET,
      params: {
        'userID': userID,
        'DispatchReportId': reportId
      }
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      setState(() {
        _currentResult = resp['Data']['SolutionResultStatus']['Name'];
        _report = resp['Data'];
        _unsolved.text = resp['Data']['SolutionUnsolvedComments'];
        _currentProvider = resp['Data']['ServiceProvider']['Name'];

      });
      for(var item in resp['Data']['ReportAccessories']) {
        reportAccess.add(jsonEncode(item));
      }
      _accessory = resp['Data']['ReportAccessories'];
      for(var _acc in _accessory) {
        var _imageNew = _acc['FileInfos'].firstWhere((info) => info['FileType']==1, orElse: () => null);
        var _imageOld = _acc['FileInfos'].firstWhere((info) => info['FileType']==2, orElse: () => null);
        if (_imageNew != null) {
          var _fileNew = await getAccessoryFile(_imageNew['ID']);
          _imageNew['FileContent'] = base64Decode(_fileNew);
          setState(() {
            _acc['ImageNew'] = _imageNew;
          });
        }
        if (_imageOld != null) {
          var _fileOld = await getAccessoryFile(_imageOld['ID']);
          _imageOld['FileContent'] = base64Decode(_fileOld);
          setState(() {
            _acc['ImageOld'] = _imageOld;
          });
        }
      }
      setState(() {
        _accessory = _accessory;
      });
      var attachImage = await getAttachFile(resp['Data']['FileInfo']['ID']);
      if (attachImage.isNotEmpty) {
        setState(() {
          var decoded = base64Decode(attachImage);
          imageAttach.add(decoded);
        });
      }
    }
  }

  Future<Null> getDispatch() async {
    var prefs = await _prefs;
    var userID = prefs.getInt('userID');
    var dispatchId = widget.request['ID'];
    var resp = await HttpRequest.request(
      '/Dispatch/GetDispatchByID',
      method: HttpRequest.GET,
      params: {
        'userID': userID,
        'dispatchId': dispatchId
      }
    );
    print(resp);
    if (resp['ResultCode'] == '00') {
      print(widget.request);
      setState(() {
        if (resp['Data']['Request']['Equipments'] != null) {
          setState(() {
            _equipments = resp['Data']['Request']['Equipments'];
          });
        }
        _dispatch = resp['Data'];
      });
    }
  }

  Future<String> getAccessoryFile(int fileId) async {
    String _image = '';
    var resp = await HttpRequest.request(
        '/DispatchReport/DownloadAccessoryFile',
        method: HttpRequest.GET,
        params: {
          'ID': fileId
        }
    );
    if (resp['ResultCode'] == '00') {
      _image = resp['Data'];
    }
    return _image;
  }

  Future<String> getAttachFile(int fileId) async {
    setState(() {
      _attachId = fileId;
    });
    String _image = '';
    var resp = await HttpRequest.request(
      '/DispatchReport/DownloadUploadfile',
      method: HttpRequest.GET,
      params: {
        'ID': fileId
      }
    );
    if (resp['ResultCode'] == '00') {
      _image = resp['Data'];
    }
    return _image;
  }

  List<FocusNode> _focusReport = new List(4).map((item) {
    return new FocusNode();
  }).toList();

  Future<Null> approveReport() async {
    if (_currentResult == '问题升级' && _unsolved.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('问题升级不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReport[0]));
      return;
    }
    if ((_dispatch['RequestType']['ID'] == 2 && _currentProvider != '管理方' && _currentResult == '待第三方支持' && _report['Type']['ID'] == 201) || (_dispatch['RequestType']['ID'] == 3 && _report['Type']['ID'] != 1 && _report['IsPrivate'])) {
      if (imageAttach.isEmpty) {
        showDialog(context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('附件不可为空'),
            )
        ).then((result) => FocusScope.of(context).requestFocus(_focusReport[1]));
        return;
      }
    }
    if (_dispatch['RequestType']['ID'] == 6 && _currentScope == null) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('整包范围不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReport[2]));
      return;
    }
    final SharedPreferences prefs = await _prefs;
    var UserId = await prefs.getInt('userID');
    var _body = _report;
    if (imageAttach.isNotEmpty) {
      var content = base64Encode(imageAttach[0]);
      var _json = {
        'FileContent': content,
        'FileName': 'report_${_report['ID']}_report_attachment.jpg',
        'ID': 0,
        'FileType': 1
      };
      _body['FileInfo'] = _json;
    } else {
      _body['FileInfo'] = null;
    }
    _body['Dispatch'] = {
      'ID': _dispatch['ID']
    };
    _body['SolutionUnsolvedComments'] = _unsolved.text;
    _body['SolutionResultStatus'] = {
      'ID': model.SolutionStatus[_currentResult]
    };
    _body['ServiceProvider'] = {
      'ID': model.ServiceProviders[_currentProvider]
    };
    _body['FujiComments'] = _comment.text;
    _body['ServiceScope'] = _currentScope=='是'?true:false;
    _body['ReportAccessories'] = reportAccess.map((item) {
      return jsonDecode(item);
    }).toList();
    Map<String, dynamic> _data = {
      'userID': UserId,
      'info': _body
    };
    Fluttertoast.showToast(
        msg: "正在提交...",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        backgroundColor: Colors.black54,
        textColor: Colors.white,
        fontSize: 16.0
    );
    var _response = await HttpRequest.request(
        '/DispatchReport/ApproveDispatchReport',
        method: HttpRequest.POST,
        data: _data
    );
    Fluttertoast.cancel();
    print(_response);
    if (_response['ResultCode'] == '00') {
      showDialog(
          context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('通过报告'),
          )
      ).then((result) {
        Navigator.of(context).pop(result);
      });
    } else {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text(_response['ResultMessage']),
        )
      );
    }
  }

  Future<Null> rejectReport() async {
    if (_currentResult == '问题升级' && _unsolved.text.isEmpty) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('问题升级不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReport[0]));
      return;
    }
    if (_comment.text.isEmpty) {
      showDialog(context: context,
        builder: (context) => CupertinoAlertDialog(
          title: new Text('审批备注不可为空'),
        )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReport[3]));
      return;
    }
    if ((_dispatch['RequestType']['ID'] == 2 && _currentProvider != '管理方' && _report['Type']['ID'] == 201 && _currentResult == '待第三方支持') || (_dispatch['RequestType']['ID'] == 3 && _report['Type']['ID'] != 1 && _report['IsPrivate'])) {
      if (imageAttach.isEmpty) {
        showDialog(context: context,
            builder: (context) => CupertinoAlertDialog(
              title: new Text('附件不可为空'),
            )
        ).then((result) => FocusScope.of(context).requestFocus(_focusReport[1]));
        return;
      }
    }
    if (_dispatch['RequestType']['ID'] == 6 && _currentScope == null) {
      showDialog(context: context,
          builder: (context) => CupertinoAlertDialog(
            title: new Text('整包范围不可为空'),
          )
      ).then((result) => FocusScope.of(context).requestFocus(_focusReport[2]));
      return;
    }
    final SharedPreferences prefs = await _prefs;
    var UserId = await prefs.getInt('userID');
    var _body = _report;
    if (imageAttach.isNotEmpty) {
      var content = base64Encode(imageAttach[0]);
      var _json = {
        'FileContent': content,
        'FileName': 'report_${_report['ID']}_report_attachment.jpg',
        'ID': 0,
        'FileType': 1
      };
      _body['FileInfo'] = _json;
    } else {
      _body['FileInfo'] = null;
    }
    _body['Dispatch'] = {
      'ID': _dispatch['ID']
    };
    _body['SolutionUnsolvedComments'] = _unsolved.text;
    _body['SolutionResultStatus'] = {
      'ID': model.SolutionStatus[_currentResult]
    };
    _body['ServiceProvider'] = {
      'ID': _currentResult!='待第三方支持'?0:model.ServiceProviders[_currentProvider]
    };
    _body['FujiComments'] = _comment.text;
    _body['ReportAccessories'] = reportAccess.map((item) {
      return jsonDecode(item);
    }).toList();
    Map<String, dynamic> _data = {
      'userID': UserId,
      'info': _body
    };
    Fluttertoast.showToast(
        msg: "正在提交...",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.CENTER,
        backgroundColor: Colors.black54,
        textColor: Colors.white,
        fontSize: 16.0
    );
    var _response = await HttpRequest.request(
        '/DispatchReport/RejectDispatchReport',
        method: HttpRequest.POST,
        data: _data
    );
    Fluttertoast.cancel();
    print(_response);
    if (_response['ResultCode'] == '00') {
      showDialog(
          context: context,
          builder: (context) =>
              CupertinoAlertDialog(
                title: new Text('已退回'),
              )
      ).then((result) =>
          Navigator.of(context, rootNavigator: true).pop(result)
      );
    } else {
      showDialog(context: context, builder: (context) => CupertinoAlertDialog(
        title: new Text(_response['ResultMessage']),
      ));
    }
  }

  Future getImage() async {
    List<Asset> image = await MultiImagePicker.pickImages(
        maxImages: 1,
        enableCamera: true
    );
    if (image != null) {
      image.forEach((_image) async {
        var _data = await _image.getByteData();
        var compressed = await FlutterImageCompress.compressWithList(
          _data.buffer.asUint8List(),
          minHeight: 800,
          minWidth: 600,
        );
        setState(() {
          imageAttach.clear();
          imageAttach.add(Uint8List.fromList(compressed));
        });
      });
    }
  }

  Column buildImageColumn() {
    if (imageAttach == null) {
      return new Column();
    } else {
      List<Widget> _list = [];
      for(var file in imageAttach) {
        _list.add(new Stack(
          alignment: FractionalOffset(1.0, 0.0),
          children: <Widget>[
            new Container(
              child: BuildWidget.buildPhotoPageList(context, file),
              width: 400.0,
              height: 400.0,
            ),
            widget.status!=3?new IconButton(icon: Icon(Icons.cancel, color: Colors.blue,), onPressed: () {
              setState(() {
                imageAttach.clear();
              });
            }):new Container(),
          ],
        ));
      }
      return new Column(children: _list);
    }
  }

  List<Widget> buildAccessory() {
    List<Widget> _list = [];
    if (_accessory != null) {
      for (var _acc in _accessory) {
        var _accList = [
          BuildWidget.buildRow('名称', _acc['Name']),
          BuildWidget.buildRow('来源', _acc['Source']['Name']),
          _acc['Source']['Name'] == '外部供应商' ? BuildWidget.buildRow(
              '外部供应商', _acc['Supplier']['Name']) : new Container(),
          BuildWidget.buildRow('新装零件编号', _acc['NewSerialCode']),
          BuildWidget.buildRow('附件', ''),
          new Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              _acc['ImageNew']!=null&&_acc['ImageNew']['FileContent']!=null?new Container(width: 100.0,
                child: BuildWidget.buildPhotoPageList(context, _acc['ImageNew']['FileContent'])):new Container()
            ],
          ),
          BuildWidget.buildRow('金额（元/件）', _acc['Amount'].toString()),
          BuildWidget.buildRow('数量', _acc['Qty'].toString()),
          BuildWidget.buildRow('拆下零件编号', _acc['OldSerialCode']),
          BuildWidget.buildRow('附件', ''),
          new Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              _acc['ImageOld']!=null&&_acc['ImageOld']['FileContent']!=null?new Container(width: 100.0,
                child: BuildWidget.buildPhotoPageList(context, _acc['ImageOld']['FileContent'])):new Container()
            ],
          ),
          new Divider()
        ];
        _list.addAll(_accList);
      }
    }
    return _list;
  }

  List<Widget> buildReportContent() {
    List<Widget> _list = [];
    _list.addAll([
      BuildWidget.buildRow('作业报告编号', _report['OID']),
      BuildWidget.buildRow('作业报告类型', _report['Type']['Name']),
      BuildWidget.buildRow('开始时间', AppConstants.TimeForm(_report['Dispatch']['StartDate'].toString(), 'hh:mm')),
      widget.status==3?BuildWidget.buildRow('审批备注', _report['FujiComments']):new Container(),
      new Divider(),
    ]);
    switch (_report['Type']['ID']) {
      case 1:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 101:
        _list.addAll([
          BuildWidget.buildRow('错误代码', _report['FaultCode']),
          BuildWidget.buildRow('设备状态(报修)', _report['Dispatch']['MachineStatus']['Name']),
          BuildWidget.buildRow('设备状态(离场)', _report['EquipmentStatus']['Name']),
          BuildWidget.buildRow('详细故障描述', _report['FaultDesc']),
          BuildWidget.buildRow('分析原因', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('详细处理方法', _report['SolutionWay']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 201:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 301:
        _list.addAll([
          BuildWidget.buildRow('强检要求', _report['FaultDesc']),
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
          BuildWidget.buildRow('专用报告', _report['IsPrivate']?'是':'否'),
          BuildWidget.buildRow('待召回', _report['IsRecall']?'是':'否'),
        ]);
        break;
      case 401:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 501:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 601:
        _list.addAll([
          BuildWidget.buildRow('资产金额', _report['PurchaseAmount'].toString()),
          //BuildWidget.buildRow('整包范围', _report['ServiceScope']?'是':'否'),
          widget.status!=3?BuildWidget.buildRadio('整包范围', _serviceScope, _currentScope, changeScope):BuildWidget.buildRow('整包范围', _report['ServiceScope']?'是':'否'),
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 701:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
      case 901:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
          BuildWidget.buildRow('验收日期', _report['AcceptanceDate'].toString().split('T')[0]),
        ]);
        break;
      default:
        _list.addAll([
          BuildWidget.buildRow('报告明细', _report['SolutionCauseAnalysis']),
          BuildWidget.buildRow('结果', _report['Result']),
        ]);
        break;
    }
    _list.addAll([
      widget.status==3?BuildWidget.buildRow('作业报告结果', _currentResult):BuildWidget.buildDropdown('作业报告结果', _currentResult, _dropDownMenuItems, changedDropDownMethod),
      widget.status!=3&&_currentResult=='问题升级'?BuildWidget.buildInput('问题升级', _unsolved, maxLength: 500, focusNode: _focusReport[0]):new Container(),
      widget.status==3&&_currentResult=='问题升级'?BuildWidget.buildRow('问题升级', _unsolved.text):new Container(),
      widget.status!=3&&_currentResult=='待第三方支持'?BuildWidget.buildDropdown('服务提供方', _currentProvider, _dropDownMenuProviders, changeProvider):new Container(),
      widget.status==3&&_currentResult=='待第三方支持'?BuildWidget.buildRow('服务提供方', _currentProvider):new Container(),
      BuildWidget.buildRow('备注', _report['Comments']),
      _report['DelayReason']!=''?BuildWidget.buildRow('误工说明', _report['DelayReason']):new Container(),
      new Padding(
        padding: EdgeInsets.symmetric(vertical: 5.0),
        child: new Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: <Widget>[
            new Expanded(
              flex: 4,
              child: new Wrap(
                alignment: WrapAlignment.end,
                crossAxisAlignment: WrapCrossAlignment.center,
                children: <Widget>[
                  new Text(
                    '附件',
                    style: new TextStyle(
                        fontSize: 16.0,
                        fontWeight: FontWeight.w600
                    ),
                  )
                ],
              ),
            ),
            new Expanded(
              flex: 1,
              child: new Text(
                '：',
                style: new TextStyle(
                  fontSize: 16.0,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
            new Expanded(
              flex: 6,
              child: new Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: <Widget>[
                  widget.status!=3?IconButton(icon: Icon(Icons.add_a_photo), onPressed: () {
                    getImage();
                  }):new Container()
                ],
              )
            )
          ],
        ),
      ),
      buildImageColumn(),
    ]);
    return _list;
  }

  List<ExpansionPanel> buildExpansion() {
    List<ExpansionPanel> _list = [];
    if (_dispatch['Request']['RequestType']['ID'] != 14) {
      _list.add(
        new ExpansionPanel(
          headerBuilder: (context, isExpanded) {
            return ListTile(
              leading: new Icon(Icons.info,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text('设备基本信息',
                style: new TextStyle(
                    fontSize: 20.0,
                    fontWeight: FontWeight.w400
                ),
              ),
            );
          },
          body: new Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: new Column(
              children: _equipments.map((_equipment) => [
                BuildWidget.buildRow('系统编号', _equipment['OID']??''),
                BuildWidget.buildRow('名称', _equipment['Name']??''),
                BuildWidget.buildRow('型号', _equipment['EquipmentCode']??''),
                BuildWidget.buildRow('序列号', _equipment['SerialCode']??''),
                BuildWidget.buildRow('设备厂商', _equipment['Manufacturer']['Name']??''),
                BuildWidget.buildRow('资产等级', _equipment['AssetLevel']['Name']??''),
                BuildWidget.buildRow('使用科室', _equipment['Department']['Name']??''),
                BuildWidget.buildRow('安装地点', _equipment['InstalSite']??''),
                BuildWidget.buildRow('维保状态', _equipment['WarrantyStatus']??''),
                BuildWidget.buildRow('服务范围', _equipment['ContractScope']['Name']??''),
                new Divider(),
              ]).toList().reduce((_listA, _listB) {
                _listA.addAll(_listB);
                return _listA;
              }),
            ),
          ),
          isExpanded: _expandList[0],
        ),
      );
    }

    _list.add(
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(
              Icons.description,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text(
              '请求详细信息',
              style: new TextStyle(fontSize: 20.0, fontWeight: FontWeight.w400),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            mainAxisAlignment: MainAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              BuildWidget.buildRow('服务申请编号', _dispatch['Request']['OID']),
              BuildWidget.buildRow('类型', _dispatch['Request']['SourceType']),
              BuildWidget.buildRow('主题', _dispatch['Request']['SubjectName']),
              BuildWidget.buildRow('请求人', _dispatch['Request']['RequestUser']['Name']),
              BuildWidget.buildRow('请求状态', _dispatch['Request']['Status']['Name']),
              _dispatch['Request']['RequestType']['ID'] == 1?BuildWidget.buildRow('机器状态', _dispatch['Request']['MachineStatus']['Name']):new Container(),
              BuildWidget.buildRow(model.Remark[_dispatch['Request']['RequestType']['ID']], _dispatch['Request']['FaultDesc']),
              _dispatch['Request']['RequestType']['ID'] == 2 ||
                  _dispatch['Request']['RequestType']['ID'] == 3 ||
                  _dispatch['Request']['RequestType']['ID'] == 7
                  ? BuildWidget.buildRow(
                  model.RemarkType[_dispatch['Request']['RequestType']['ID']],
                  _dispatch['Request']['FaultType']['Name'])
                  : new Container(),
              _dispatch['Request']['Status']['ID'] == 1
                  ? new Container()
                  : BuildWidget.buildRow('处理方式', _dispatch['Request']['DealType']['Name']),
            ],
          ),
        ),
        isExpanded: _expandList[1],
      ),
    );

    _list.addAll([
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(Icons.description,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text('派工内容',
              style: new TextStyle(
                  fontSize: 20.0,
                  fontWeight: FontWeight.w400
              ),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            children: <Widget>[
              BuildWidget.buildRow('派工单编号', widget.request['OID']),
              BuildWidget.buildRow('派工单状态', widget.request['Status']['Name']),
              BuildWidget.buildRow('派工类型', widget.request['RequestType']['Name']),
              _dispatch['RequestType']['ID'] != 14?BuildWidget.buildRow('机器状态', widget.request['MachineStatus']['Name']):new Container(),
              BuildWidget.buildRow('紧急程度', widget.request['Urgency']['Name']),
              BuildWidget.buildRow('出发时间', AppConstants.TimeForm(_dispatch['ScheduleDate'].toString(), 'hh:mm')),
              BuildWidget.buildRow('工程师姓名', _dispatch['Engineer']['Name']),
              BuildWidget.buildRow('备注', _dispatch['LeaderComments']),
            ],
          ),
        ),
        isExpanded: _expandList[2],
      ),
      new ExpansionPanel(
        headerBuilder: (context, isExpanded) {
          return ListTile(
            leading: new Icon(Icons.perm_contact_calendar,
              size: 20.0,
              color: Colors.blue,
            ),
            title: Text('作业报告信息',
              style: new TextStyle(
                  fontSize: 20.0,
                  fontWeight: FontWeight.w400
              ),
            ),
          );
        },
        body: new Padding(
          padding: EdgeInsets.symmetric(horizontal: 8.0),
          child: new Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: buildReportContent()
          ),
        ),
        isExpanded: _expandList[3],
      ),
    ]);

    if (_dispatch['Request']['RequestType']['ID'] != 14 && _dispatch['Request']['RequestType']['ID'] != 12 && _dispatch['Request']['RequestType']['ID'] != 4) {
      _list.add(
        new ExpansionPanel(
          headerBuilder: (context, isExpanded) {
            return ListTile(
              leading: new Icon(Icons.settings,
                size: 20.0,
                color: Colors.blue,
              ),
              title: Text('零配件信息',
                style: new TextStyle(
                    fontSize: 20.0,
                    fontWeight: FontWeight.w400
                ),
              ),
            );
          },
          body: _accessory!=null?new Padding(
            padding: EdgeInsets.symmetric(horizontal: 8.0),
            child: new Column(
              children: buildAccessory(),
            ),
          ):new Container(),
          isExpanded: _expandList[4],
        ),
      );
    }
    return _list;
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    return new Scaffold(
      appBar: new AppBar(
        title: new Text(
            widget.status==3?'查看作业报告':'审核作业报告'
        ),
        elevation: 0.7,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.centerLeft,
              end: Alignment.centerRight,
              colors: [
                Theme.of(context).primaryColor,
                Theme.of(context).accentColor
              ],
            ),
          ),
        ),
        actions: <Widget>[
        ],
      ),
      body: _report.isEmpty||_dispatch.isEmpty?new Center(child: SpinKitThreeBounce(color: Colors.blue,),):new Padding(
        padding: EdgeInsets.symmetric(vertical: 5.0),
        child: new Card(
          child: new ListView(
            children: <Widget>[
              new ExpansionPanelList(
                animationDuration: Duration(milliseconds: 200),
                expansionCallback: (index, isExpanded) {
                  setState(() {
                    _dispatch['Request']['RequestType']['ID'] != 14?
                    _expandList[index] = !isExpanded:
                        _expandList[index+1] = !isExpanded;
                  });
                },
                children: buildExpansion(),
              ),
              SizedBox(height: 20.0),
              widget.status==3?new Container():buildTextField('审批备注', _comment, true),
              SizedBox(height: 20.0),
              widget.status==3?new Container():new Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                mainAxisSize: MainAxisSize.max,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: <Widget>[
                  new RaisedButton(
                    onPressed: () {
                      approveReport();
                    },
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(6),
                    ),
                    padding: EdgeInsets.all(12.0),
                    color: new Color(0xff2E94B9),
                    child: Text('通过报告', style: TextStyle(color: Colors.white)),
                  ),
                  new RaisedButton(
                    onPressed: () {
                      rejectReport();
                    },
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(6),
                    ),
                    padding: EdgeInsets.all(12.0),
                    color: new Color(0xffD25565),
                    child: Text('退回报告', style: TextStyle(color: Colors.white)),
                  ),
                ],
              ),
              SizedBox(height: 20.0),
            ],
          ),
        ),
      ),
    );
  }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


