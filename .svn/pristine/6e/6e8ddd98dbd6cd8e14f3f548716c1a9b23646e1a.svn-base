@{
    ViewBag.Title = "EquipmentList";
    Layout = "~/Views/Shared/_SubMain.cshtml";
}
<div id="equipmentTimeLineVue" v-cloak class="container-timeline" >
    <div class="container-title">
        <div style="">
            <a class="linkFile backPage" href="#" onclick="BackToList()">&lt;&lt;@BusinessObjects.Domain.Constants.BACKLIST</a>
        </div>
        <div style="" >
            <p style="font-size:28px;margin: 0;">{{'生命周期 : '+(detail.Name || '')+' -'+(detail.model || '')}}</p>
        </div>
        <div style="" >
            <pre>              </pre>
        </div>
    </div>
    <div class="container-body row">
        <div class="body-left col-6">
            <div class="body-left-top card bg-light">
                <div v-show="false" class="justify-body-start ">
                    <div class="form-row justify-content-start">
                        <label>维度 </label>
                        <div style="width:140px;padding:0 5px;">
                            <select id="type" @@change="renderAll" v-model="type">
                                <option value="@BusinessObjects.Domain.ReportDimension.AcceptanceYear">时间类型-年</option>
                                <option value="@BusinessObjects.Domain.ReportDimension.AcceptanceMonth">时间类型-月</option>
                            </select>
                        </div>
                        <div v-show="type == @BusinessObjects.Domain.ReportDimension.AcceptanceMonth" id="year" class="form-row justify-content-start" style="display:none;">
                            <label>年 </label>
                            <div style="padding:0 5px;">
                                <select id="myYear" @@change="renderAll" v-model="year" style="width:90px" ></select>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="chartDiv" ></div>
                <div id="sliderDiv" ></div>
            </div>
            <div class="body-left-bottom">
                <div class="name" style="width: 90%;z-index: 10;" :title="detail.name + ' - ' + detail.seriesNumber">
                    {{(detail.name || '') + ' - ' + (detail.seriesNumber || '')}}
                </div>
                <div class="name-lower-box flex-column column-end">
                    <div class="name-lower">
                        <span >当前位置：</span>
                        <span style="margin-top:5px;color: rgb(55, 65, 74);" :title="detail.department">{{detail.department}}</span>
                    </div>
                    <div class="name-lower">
                        <span >当前状态：</span>
                        <span style="margin-top:5px;color: rgb(55, 65, 74);" :title="detail.status">{{detail.status}}</span>
                    </div>
                    <div class="name-lower detail-data">
                        <img class="detail-img" v-bind:src="getRootPath()+(detail.url ?('/Documents/Equipment/'+detail.url): '/Content/img/imageNoFound.png')" alt="无图片">
                    </div>
                </div>
                <div class="name-lower-box flex-column column-end">
                    <div class="name-lower">
                        <span >安装日期：</span>
                        <span style="margin-top:5px;color: rgb(55, 65, 74);" :title="detail.start_time">{{detail.start_time}}</span>
                    </div>
                    <div class="name-lower">
                        <span >维保状态：</span>
                        <span style="margin-top:5px;color: rgb(55, 65, 74);" :title="detail.warrantyStatus">{{detail.warrantyStatus}}</span>
                    </div>
                    <div class="name-lower detail-data">
                        <div class="name-lower" v-for="(type,key) of radar" :key="key">
                            <span>{{type.item}}</span>
                            <span>：</span>
                            <span style="margin-top:5px;color: rgb(55, 65, 74);" :title="type.value" @@click="goToRequest(type.typeId)" class="link">{{type.value}}</span>
                        </div>
                    </div>
                </div>
                <div id="radar"></div>
            </div>
        </div>
        <div class="body-right col-6">
            <div class="body-right-content">
                <div class="body-timeline">
                    <div id="timeline" class="row " >
                        <div class="timelineCont  active" v-for="info in detail.dispatches">
                            <div class="row " :title="parseAndFormatJsonDate(info.EndDate) +' '+  info.TimelineDesc" >
                                <div v-if="info.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.Repair || info.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.Inspection" class="redC date col-2">
                                    <p>{{parseAndFormatJsonDate(info.EndDate)}}</p>
                                </div>
                                <div v-else-if="info.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.Maintain || info.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.OnSiteInspection || info.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.Correcting" class="greenC date col-2">
                                    <p>{{parseAndFormatJsonDate(info.EndDate)}}</p>
                                </div>
                                <div v-else class="grayC date col-2">
                                    <p>{{parseAndFormatJsonDate(info.EndDate)}}</p>
                                </div>
                                <div class="text col-9 cursor" @@click="goToRequestDetail(info.RequestID,info.RequestType.ID,0)">
                                    <p>{{info.TimelineDesc}}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<link rel="stylesheet" type="text/css" href="~/Content/css/timelinev.css"/>
<script src="~/Content/Scripts/jquery.timelinev.js"></script>
<script>
    function BackToList() {
        window.location = '@Url.Action(ViewBag.ActionName, "Equipment")';
    }
</script>
<script>
    let now = new Date();
    var equipmentTimeLineVue = new Vue({
        el: "#equipmentTimeLineVue",
        data: {
            id: '@ViewBag.ID',
            detail:{},
            radar: [],
            overView:[],
            maxCount: 0,
            type:'@BusinessObjects.Domain.ReportDimension.AcceptanceYear',
            year: now.getFullYear(),
        },
        created:function() {
            let _this = this
            this.initTimeLine();
            this.showFilter()
            this.$nextTick(function(){
                _this.renderAll()
            })
        },
        methods: {
          initTimeLine:function(){
              $('#timeline').timelinev({
                  containerDivs: '.timelineCont',
                  dateDiv: '.date',
                  textDiv: '.text',
                  dateHtml: 'h2',
                  textHtml: 'p',
                  dateActiveClass: '.active',
                  issuesDiv: '.timelineCont'
              });
          },  
          //收入支出信息
          getEquipmentOverView:function(){
              let _this = this
              // 获取设备信息中的所有收入支出
              return $.get('@Url.Action("SingleEquipmentAuditing", "Report")',
              {
                  id:_this.id,
                  type:_this.type,
                  date: new Date().format("yyyy-MM-dd"),
              },
              function (response) {
                  if (response.ResultCode != "00") {
                      processResponseError(response.ResultCode, response.ResultMessage);
                  } else {
                      _this.overView = response.Data.map(function(item) {
                          return {
                               key: item.Item1,
                               '收入': Number(item.Item2.toFixed(2)),
                               '支出': Number(item.Item3.toFixed(2)),
                          }
                      })
                  }
              })
              
              // let datas = [
              //     {Item1:"1",Item2:100050,Item3:90015},
              //     {Item1:"2",Item2:200050,Item3:13875},
              //     {Item1:"3",Item2:207550,Item3:90015},
              //     {Item1:"4",Item2:120050,Item3:53815},
              //     {Item1:"5",Item2:200050,Item3:1853588},
              //     {Item1:"6",Item2:153268,Item3:90015},
              //     {Item1:"7",Item2:208050,Item3:90015},
              //     {Item1:"8",Item2:1530500,Item3:18387},
              //     {Item1:"9",Item2:200050,Item3:4831853},
              //     {Item1:"10",Item2:150050,Item3:48384},
              //     {Item1:"11",Item2:200050,Item3:48328},
              //     {Item1:"12",Item2:200050,Item3:163884},
              // ]
              // this.overView = datas.map(function(item) {
              //                                  return {
              //                                       key: item.Item1,
              //                                       '收入': Number(item.Item2.toFixed(2)),
              //                                       '支出': Number(item.Item3.toFixed(2)),
              //                                   }
              //                                })
              // return $.Deferred().resolve(true)
          },
          //雷达数据
          getEquipmentRadar:function() {
            let _this = this
            return $.get("@Url.Action("GetRequestCountByID","Equipment")",{id: this.id,date:new Date().format("yyyy-MM-dd")}
            ,function(res) {
                let radar_data = [{
                                     item: "维修",
                                     typeId:1,
                                 }, {
                                     item: "保养",
                                     typeId:2,
                                 }, {
                                     item: "强检",
                                     typeId:3,
                                 }, {
                                     item: "巡检",
                                     typeId:4,
                                 }, {
                                     item: "校准",
                                     typeId:5,
                                 }];
                radar_data[0].value = res.Data.Repair || 0;
                radar_data[1].value = res.Data.Maintain || 0;
                radar_data[2].value = res.Data.Inspection || 0;
                radar_data[3].value = res.Data.OnSiteInspection || 0;
                radar_data[4].value = res.Data.Correcting || 0;
                let max = 0;
                for(let i=0; i<radar_data.length; i++){
                  if (max<radar_data[i].value) {
                    max = radar_data[i].value
                  }
                }
                _this.maxCount = max;
                _this.maxTickCount = ((max > 5) ? 5 : ((max < 2) ? 2 : max));
                _this.radar = radar_data;
            })
          },
          //携带有 派工单用于展示时间线、设备信息、在雷达区辅助信息(设备信息)
          getEquipmentDetail:function() {
              let _this = this
              return $.get('@Url.Action("GetTimeLine", "Equipment")', { equipmentID: '@ViewBag.ID' }, function (response) {
                  if (response.ResultCode != "00") {
                      _this.detail ={
                          id:0,
                          name: "",
                          brand: "",
                          model: "",
                          value: "",
                          seriesNumber: "",
                          department: "",
                          start_time: "",
                          status: "",
                          warrantyStatus: "",
                          dispatches:[]
                      }
                      processResponseError(response.ResultCode, response.ResultMessage);
                  } else {
                      let info = response.Data
                      _this.detail = Object.assign(info, {
                        name: info.Name + ' - ' + info.Manufacturer.Name + ' - ' + info.EquipmentCode,
                        brand: info.Manufacturer.Name,
                        model: info.EquipmentCode,
                        value: Number(info.PurchaseAmount/10000),
                        seriesNumber: info.AssetCode,
                        department: info.Department.Name,
                        start_time: parseAndFormatJsonDate(info.InstalDate),
                        status: info.EquipmentStatus.Name,
                        warrantyStatus: info.WarrantyStatus,
                        dispatches:info.Dispatches,
                      })
                }
              })
          },
 
          renderOverView:function() {
              console.log(document.querySelector('#chartDiv').clientWidth+'--'+document.querySelector('#chartDiv').clientHeight)
            let _this = this;
            let maxItems = 15;
            let datas = _this.overView
            let chart =  new G2.Chart({
                container: 'chartDiv',
                forceFit: true,
                height: document.querySelector('#chartDiv').clientHeight,
                width: document.querySelector('#chartDiv').clientWidth,
                padding: [10, 50, 20, 0],
                //padding: [_this.getRem(1.6), 0, 0, 0],
                background: {
                    fill: "#F8F9FA"
                }
            });
            
            let dv = new DataSet.DataView();
            if(datas.length > maxItems ){
                let ds = new DataSet({
                    state: {
                        from: datas[0].key,
                        to: datas[maxItems- 1].key
                    }
                })
                dv = ds.createView()
                dv.source(datas)
                .transform({
                      type: 'map',
                      callback: function callback(row) {
                        row['支出'] *= -1;
                        return row;
                      }
                }).transform({
                      type: 'fold',
                      fields: ['收入', '支出'],
                      key: 'opinion',
                      value: 'value',
                      retains: ['key']
                }).transform({
                    type: 'filter',
                    callback: function (obj) {
                        for (var i = 0; i < datas.length; i++) {
                            if (datas[i].key == ds.state.from)
                                var startIndex = i;
                            if (datas[i].key == ds.state.to)
                                var endIndex = i;
                            if (datas[i].key == obj.key)
                                var index = i;
                        }
             
                        return index >= startIndex && index <= endIndex;
                     }
                })
                
                chart.interact('slider', {
                    container: 'sliderDiv',
                    width: document.querySelector('#chartDiv').clientWidth,
                    height: 15,
                    padding: [2, 4, 4, 4],
                    startRadio: 0,
                    endRadio: (maxItems - 1) / datas.length,
                    data: datas,
                    xAxis: 'key',
                    yAxis: '收入支出',
                    fillerStyle: {
                        fill: '#BDCCED',
                        fillOpacity: 0.7,//透明度
                    }, // 滑块选中区域的样式
          
                    backgroundStyle: {
                        stroke: '#CCD6EC',
                        fill: '#CCD6EC',
                        fillOpacity: 0.2,
                        lineWidth: 2,//边框宽度
                    }, // 滑块背景样式
                    layout: 'horizontal', // 滑块的布局，'horizontal' 或者 'vertical'
                    onChange: function (text) {
                        ds.setState('from', text.startText);
                        ds.setState('to', text.endText);                        
                        setTimeout(function(){chart.render();})
                    }
                })
            }else{ 
                dv.source(datas).transform({
                    type: 'map',
                    callback: function callback(row) {
                      row['支出'] *= -1;
                      return row;
                    }
                })
                .transform({
                    type: 'fold',
                    fields: ['收入', '支出'],
                    key: 'opinion',
                    value: 'value',
                    retains: ['key']
                })
            }
            
            
            chart.source(dv);
            //chart.axis(false);
            
            chart.axis('key', {
                label: {
                    offset: 5,
                    offsetY: 10,
                    formatter:function(text, item, index) {
                        return text+(_this.type == "@BusinessObjects.Domain.ReportDimension.AcceptanceMonth"?"月":"年")
                    }
                },
            });
            
            let colorMap = {
              '收入': '#86C7E6',
              '支出': '#1B85E7',
            };
            chart.guide().line({
                top: true,
                start: ['start', 0],
                end: ['end', 0],
                lineStyle: {
                    stroke: '#3aa0ff',
                    lineWidth: 1,
                    lineDash: [2, 2]
                },
                text: {
                    position: 'start',
                    style: {
                        fill: '#3aa0ff',
                        fontSize: 12,
                        fontWeight: 300
                    },
                    content: '',
                    offsetY: -5
                }
            });
            
            datas.forEach(function (data, dataIndex) { 
              if (data['支出'] && data['收入'] && data['支出'] > data['收入']) {
                // 辅助框
                chart.guide().regionFilter({
                  top: true, // 指定 giude 是否绘制在 canvas 最上层，默认为 false, 即绘制在最下层
                  start: ["start", -data['收入']], // 辅助框起始位置，值为原始数据值，支持 callback
                  end: ["end", -data['支出']],// 辅助框结束位置，值为原始数据值，支持 callback
                  color: '#E2340D',
                });
              }
            });
            
            chart.tooltip({
              inPlot: true,
              useHtml: true,
              htmlContent: function (title, items) {
                let data = {};
                _this.overView.forEach(info => {
                  if (info.key == title) {
                    data = info
                  }
                })
                return `<div class="g2-tooltip">
                        <div class="g2-tooltip-title">${title+(_this.type == "@BusinessObjects.Domain.ReportDimension.AcceptanceMonth" ? "月":"年")}</div>
                        <ul class="g2-tooltip-list">
                          <li class="g2-tooltip-li">收入：${_this.numberComma(Math.floor(Number(data.收入)))}</li>
                          <li class="g2-tooltip-li">支出：${_this.numberComma(Math.floor(Number(data.支出)))}</li>
                        </ul>
                      </div>` 
              }
            });
            chart.coord();
            chart.intervalStack().position('key*value').color('opinion', function (opinion) {
              return colorMap[opinion];
            }).opacity(1); 
            chart.render();
          },
        
          renderRadar:function() {
            let _this = this
            $("#radar").empty()

            let chart = new G2.Chart({
              container: 'radar',
              forceFit: true,
              height: document.querySelector('#radar').clientHeight,
              padding: [_this.getRem(.5), _this.getRem(.2), 0, _this.getRem(.1)]
            });
            
            let dv = new DataSet.View().source(_this.radar);
            dv.transform({
                             type: 'fold',
                             fields: ['value'], // 展开字段集
                             key: 'user', // key字段
                             value: 'score' // value字段
                           });
            chart.source(dv, {
              score: {
                min: 0,
                max: _this.maxCount,
                tickCount: _this.maxTickCount  //radar 
              }
            });
            chart.coord('polar', {
              radius: 0.6
            });
            chart.axis('item', {
              line: null,
              label: {
                textStyle: {
                  fontSize: _this.getRem(1), // 文本大小
                  fontWeight: 'bold', // 文本粗细
                },
              },
              tickLine: null,
              grid: {
                lineStyle: {
                  lineDash: null
                },
                hideFirstLine: false
              }
            });
            chart.axis('score', {
              label: null,
              line: null,
              tickLine: null,
              grid: {
                type: 'polygon',
                lineStyle: {
                  lineWidth: _this.getRem(.02),
                  lineDash: null
                }
              }
            });
            chart.legend(false)
            chart.tooltip({
              'g2-tooltip': {
                'background-color': 'rgba(0, 0, 0, 0.7)',
                color: '#ddd',
              },
              itemTpl: '<li >次数：{value}</li>'
            });
            chart.line().position('item*score').color('user').size(_this.getRem(.01));
            chart.area().position('item*score').color('user');
            
            chart.on('click', function(ev) {
                // 获取逼近的点 point 的原始数据集合
                let records = chart.getSnapRecords({
                    x: ev.x,
                    y: ev.y
                });
                const typeId = records[0]._origin.typeId
                let item = _this.radar.find(function(val) {
                    return val.typeId == typeId
                })
                if(!item || item.id == -1)
                    return
                _this.goToRequest(item.typeId)
            });
            chart.render();
          }, 
          
          renderAll:function(){
            let _this = this;
            _this.getEquipmentOverView().then(function(){ 
                _this.renderOverView() 
                _this.getEquipmentRadar().then(function(){ 
                    _this.renderRadar() 
                    _this.getEquipmentDetail()
                })
            })
            
          },
          showFilter:function() {
             SelectYears();
             this.type = '@BusinessObjects.Domain.ReportDimension.AcceptanceMonth'
             this.year = now.getFullYear();
          },
          goToRequest:function(typeId){
              window.open("/Request/RequestList?equipmentId="+this.id+"&requestType="+typeId);
          },
          goToRequestDetail:function(id, requestType, requestStatus) {
                (id > 0)&& window.open('@Url.Action("RequestDetail","Request")' + '?' + $.param({ id: id, actionName: 'EquipmentList', requestType: requestType, requestStatus: requestStatus }));
          },
          random:function(lower, upper) {
            return Math.floor(Math.random() * (upper - lower)) + lower;
          },
          itemColor:function(type) {
            switch (type) {
              case 1:
              case 3:
                return '#E64340';
                break;
              case 4:
              case 2:
              case 5:
                return '#3eaf7c'
                break;
              default:
                return '#f0f0f0'
                break;
            }
          }, 
          numberComma:function(source, length = 3) {
            source = String(source).split(".");
            source[0] = source[0].replace(new RegExp('(\\d)(?=(\\d{' + length + '})+$)', 'ig'), "$1,");
            return source.join(".");
          },
          getRem:function(n = 1) {
              if (isNaN(n)) return
              n = Number(n);
              let html = document.querySelector('html');
              let fontSize = window.getComputedStyle(html).getPropertyValue('font-size');
              return n * parseFloat(fontSize);
          }
        },
        
    })
</script>
<style>
    /* Main content Style */      
    .container-timeline { min-width: 1200px; width: 100%; height: 100%; overflow: hidden; font-size:.4rem; padding: .3rem; display: flex;flex-flow: column; }
    .container-title{display: flex;margin-bottom:20px;justify-content: space-between;height:5%;}
    .container-body{display: flex;height:100%;}
    .body-left { height: 100%; display: flex; flex-direction: column; }
    .body-left-top { border-radius: .16rem; height: 50%; margin: .15rem; background: #fff; display: flex; position: relative;}
    .overview{width:100%}
    .justify-body-start{height:10%;}
    #chartDiv {width: 100%; height: 85%;  }
    .body-left-bottom { border-radius: .16rem; height: 50%; margin:.15rem; background: #fff; display: flex; position: relative; }
    .body-left-bottom .name { position: absolute; left: .5rem; top:.5rem; font-weight: bold; white-space:nowrap;overflow:hidden; text-overflow: ellipsis; padding: 3px 0; }
    .flex-column { display: flex; flex-direction:column; }
    .column-end {justify-content: flex-end;}
    .column-center {justify-content: center;}
    .column-end {justify-content:flex-start;}
    .name-lower-box { width: 25%; display: flex; justify-content: flex-end; flex-direction: column; font-size: 0.36rem;padding-left: .5rem; }
    .name-lower { white-space:nowrap; overflow:hidden; text-overflow:ellipsis; padding: 8px 0; }
    .name-lower .link:hover{cursor: pointer;}
    .detail-data{height:65%;}
    .detail-data .detail-img{max-height: 10rem;} 
    #radar { width: 50%; height: 100%; }
    .body-right { height: 100%; padding: .15rem; }
    .body-right-content { width: 100%;height: 100%; border-radius: .16rem; background: #fff; padding: .8rem; }
    .body-timeline { width: 100%;height:100%;}
    #timeline{align-content: baseline;max-height: 50rem;overflow-x: hidden;width: 100%;}
        
/* Other Style */
    .g2-tooltip {
      z-index: 99;
      position: absolute;
      background-color: rgba(256, 256, 256, 0.7);
      border-radius: .16rem;
      color:  rgba(0, 0, 0, 0.7);
      white-space: nowrap;
      font-size: .36rem;
      line-height: 1.2;
      padding: .24rem .24rem .1rem .24rem;
      box-shadow: 0 0 .1rem #aeaeae;
    }


    .g2-tooltip-list {
      padding: 0;
      list-style-type: none;
      margin-top: .2rem; 
    }
    .g2-tooltip-li {
        margin: .2rem 0;
    }

    canvas {
      background: #fff;
      width: 100%;
      height: 100%;
    }
</style>