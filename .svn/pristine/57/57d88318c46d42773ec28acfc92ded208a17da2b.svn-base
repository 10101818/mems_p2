<!--零件入库-->
<div class="ui-dialog-content ui-widget-content" id="StockComponent" tabindex="-1" style="display:none;">
    <table class="table table-sm" cellspacing="0" cellpadding="0">
        <thead class="thead-light">
            <tr>
                <th style="min-width:100px;">序列号<img src="~/Content/img/add.png" class="icon-sm cursor" onclick="AddComponetDetail()" /></th>
                <th style="min-width:100px;">规格</th>
                <th style="min-width:100px;">型号</th>
                <th style="min-width:100px;">删除</th>
               
            </tr>
        </thead>
        <tbody>
            <tr v-for="(component,index) in StockComponent.Components">
                <td>
                    <input type="text" maxlength="30" id="ComponentSerialCode" v-model.trim="component.SerialCode">
                    <label class="required" id="reqComponentSerialCode"></label>
                </td>
                <td>
                    <input type="text" maxlength="50" id="ComponentSpecification" v-model.trim="component.Specification">
                    <label class="required" id="reqComponentSpecification"></label>
                </td>

                <td>
                    <input type="text" maxlength="50" id="ComponentModel" v-model.trim="component.Model">
                    <label class="required" id="reqComponentModel"></label>
                </td>
                <td style="text-align: center;border-right: none;"><img class="cursor" src="~/Content/img/delete.png"  v-on:click="DeleteComponentBtn(index)" /></td>
            </tr>
        </tbody>
</table>
</div>

<!--耗材入库-->
<div class="ui-dialog-content ui-widget-content" id="StockConsumable" tabindex="-1" style="display:none;">
    <table class="table table-sm" cellspacing="0" cellpadding="0">
        <thead class="thead-light">
            <tr>
                <th style="min-width:100px;">批次号<img src="~/Content/img/add.png" class="icon-sm cursor" onclick=" AddConsumableDetail()" /></th>
                <th style="min-width:100px;">规格</th>
                <th style="min-width:100px;">型号</th>
                <th style="min-width:100px;">数量</th>
                <th style="min-width:100px;">删除</th>
                
            </tr>
        </thead>
        <tbody>
            <tr v-for="(consumable,index) in StockConsumable.Consumables">
                <td>
                    <input type="text" maxlength="30" v-model.trim="consumable.LotNum">
                   
                </td>
                <td>
                    <input type="text" maxlength="50" v-model.trim="consumable.Specification">
                </td>
                <td>
                    <input type="text" maxlength="50" v-model.trim="consumable.Model">
                </td>
                <td>
                    <input type="text" maxlength="50" v-model.trim="consumable.Qty">
                </td>
                <td style="text-align: center;border-right: none;"><img class="cursor" src="~/Content/img/delete.png" v-on:click="DeleteConsumableBtn(index)" /></td>
            </tr>
        </tbody>
    </table>
</div>


<script>
    var StockComponentVue = new Vue({
        el: "#StockComponent",
        data: {
            StockComponent: {
                ID: 0,
                Components:[],
                Component: {},
                Supplier: {},
                Purchase: { ID: 0 },

            },
        }
    })

    var StockConsumableVue = new Vue({
        el: "#StockConsumable",
        data: {
            StockConsumable: {
                ID: 0,
                Consumable: {},
                Consumables:[],
            },
        }
    })
    //格式化
    function InitStockComponentForm() {
        $("label.required").html("");
        StockComponentVue.StockComponent = {
            ID: 0,
            Components: [],
            Component: {},
            Supplier: {},
            Purchase: { ID: 0 },
        }
    }
    function InitStockConsumableForm() {
        $("label.required").html("");
        StockConsumableVue.StockConsumable = {
            ID: 0,
            Consumable: {},
            Consumables: [],
        }
    }
    
    //规定弹窗的格式
    function InitDialog() {
        $("#StockComponent").dialog({
            autoOpen: false,
            height: 300,
            width: 700,
            modal: true,
            resizable: false,
            buttons: {
                "入库": function () { InboundComponentBtn(); },
                "关闭": function () { $("#StockComponent").dialog("close"); }
            }
        });

        $("#StockConsumable").dialog({
            autoOpen: false,
            height: 300,
            width: 700,
            modal: true,
            resizable: false,
            buttons: {
                "入库": function () { InboundConsumableBtn(); },
                "关闭": function () { $("#StockConsumable").dialog("close"); }
            }
        });
    }

    function OpenStockComponent(component, index) {
        InitStockComponentForm();
        StockComponentVue.StockComponent.Component = cloneObj(component);
        StockComponentVue.StockComponent.Component.index = index;
        AddComponetDetail();
        $("#StockComponent").dialog({ title: StockComponentVue.StockComponent.Component.Component.Name + '-' + StockComponentVue.StockComponent.Component.Component.Description });
        $("#StockComponent").dialog("open");
    }

    function OpenStockConsumable(consumable, index) {
        InitStockConsumableForm();
        StockConsumableVue.StockConsumable.Consumable = cloneObj(consumable);
        StockConsumableVue.StockConsumable.Consumable.index = index;
        var ConsumableMaxQty = StockConsumableVue.StockConsumable.Consumable.Qty - StockConsumableVue.StockConsumable.Consumable.InboundQty;
        AddConsumableDetail();
        $("#StockConsumable").dialog({ title: StockConsumableVue.StockConsumable.Consumable.Consumable.Name + '-' + StockConsumableVue.StockConsumable.Consumable.Consumable.Description });
        $("#StockConsumable").dialog("open");
    }

</script>

<!--添加行-->
<script>
    function AddComponetDetail() {
        if (StockComponentVue.StockComponent.Components.length >= (StockComponentVue.StockComponent.Component.Qty - StockComponentVue.StockComponent.Component.InboundQty))
            jAlert("入库数量不能超过采购数量", "提示", function () { })
        else {
            StockComponentVue.StockComponent.Components.push(cloneObj(StockComponentVue.StockComponent.Component));
        }
    }
    function AddConsumableDetail() {
        if (StockConsumableVue.StockConsumable.Consumables.length >= StockConsumableVue.StockConsumable.Consumable.Qty)
            jAlert("入库数量不能超过采购数量", "提示", function () { })
        else {
            StockConsumableVue.StockConsumable.Consumables.push(cloneObj(StockConsumableVue.StockConsumable.Consumable));
        }
    }

</script>
<!--删除-->
<script>
    function DeleteComponentBtn(index) {
        jConfirm("请确认是否删除?", "删除", function (result) {
            if (result) {
                DeleteComponent(index)
            }
        });
    }

    function DeleteComponent(index) {

        StockComponentVue.StockComponent.Components.splice(index, 1);
    }
    function DeleteConsumableBtn(index) {
        jConfirm("请确认是否删除?", "删除", function (result) {
            if (result) {
                DeleteConsumable(index);
            }
        });
    }

    function DeleteConsumable(index) {
        StockConsumableVue.StockConsumable.Consumables.splice(index, 1);
    }
</script>
<!--入库-->
<script>
    //零件
    function InboundComponentBtn() {
        jConfirm("请确认是否入库?", "入库", function (result) {
            if (result) {
                InboundComponent()
            }
        });
    }
    function InboundComponent() {
        if (CheckInboundComponent()) return;
        var inboundPurchaseOrder = cloneObj(PurchaseOrderDetailVue.PurchaseOrder);
        inboundPurchaseOrder.Components = StockComponentVue.StockComponent.Components
        inboundPurchaseOrder.Consumables = new Array();
        inboundPurchaseOrder.Services = new Array();
        SetPageWaiting(true)
        $.post(
                '@Url.Action("InboundPurchaseOrder", "PurchaseOrder")',
                inboundPurchaseOrder,
                function (response) {
                    SetPageWaiting(false)
                    if (response.ResultCode != "00") {
                        jAlert(response.ResultMessage, "入库结果");
                    }
                    else {
                        PurchaseOrderDetailVue.PurchaseOrder.ID = response.Data;
                        jAlert("入库成功", "入库结果", function () {
                            $("#StockComponent").dialog("close");
                            $.each(PurchaseOrderDetailVue.PurchaseOrder.Components, function (index, component) {
                                if (index == StockComponentVue.StockComponent.Component.index) {
                                    component.InboundQty = component.InboundQty + StockComponentVue.StockComponent.Components.length
                                }
                            })
                            PurchaseOrderDetailVue.$forceUpdate();
                        });
                    }
                    return;
                }
            );
    }
    

    //耗材
    function InboundConsumableBtn() {
        jConfirm("请确认是否入库?", "入库", function (result) {
            if (result) {
                InboundConsumable()
            }
        });
    }
    function InboundConsumable() {
        if (CheckInboundConsumable()) return;
        $.each(PurchaseOrderDetailVue.PurchaseOrder.Consumables, function (index, consumable) {
            if (index == StockConsumableVue.StockConsumable.Consumable.index) {
                for (var i = 0 ; i < StockConsumableVue.StockConsumable.Consumables.length; i++) {
                    consumable.InboundQty = consumable.InboundQty + Number(StockConsumableVue.StockConsumable.Consumables[i].Qty)
                    consumable.AvaibleQty = consumable.InboundQty
                    consumable.ReceiveQty = consumable.InboundQty
                    }
                
            }
        })
        var inboundPurchaseOrder = cloneObj(PurchaseOrderDetailVue.PurchaseOrder);
        inboundPurchaseOrder.Consumables = StockConsumableVue.StockConsumable.Consumables
        inboundPurchaseOrder.Components = new Array();
        inboundPurchaseOrder.Services = new Array();
        SetPageWaiting(true)
        $.post(
                '@Url.Action("InboundPurchaseOrder", "PurchaseOrder")',
                inboundPurchaseOrder,
                function (response) {
                    SetPageWaiting(false)
                    if (response.ResultCode != "00") {
                        jAlert(response.ResultMessage, "入库结果");
                    }
                    else {
                        PurchaseOrderDetailVue.PurchaseOrder.ID = response.Data;
                        jAlert("入库成功", "入库结果", function () {
                            $("#StockConsumable").dialog("close");
                            PurchaseOrderDetailVue.$forceUpdate();
                            
                        });
                    }
                    return;
                }
            );
    }

</script>
<!--检查信息-->
<script>
    //零件
    function CheckInboundComponent() {
        var IsValid = false;

        for (var i = 0 ; i < StockComponentVue.StockComponent.Components.length; i++) {

            for (var j = i + 1; j < StockComponentVue.StockComponent.Components.length; j++) {
                if (StockComponentVue.StockComponent.Components[i].SerialCode == StockComponentVue.StockComponent.Components[j].SerialCode) {
                    jAlert("序列号重复", "提示", function () { });
                    IsValid = true;
                   
                }
            }
        }
        $.each(StockComponentVue.StockComponent.Components, function (index, component) {
            if (!component.SerialCode) {
                jAlert("序列号不能为空", "提示", function () { });
                IsValid = true;
                return;
            }   
            if (!component.Specification) {
                jAlert("规格不能为空", "提示", function () { });
                IsValid = true;
                return;
            }
            if (!component.Model) {
                jAlert("型号不能为空", "提示", function () { });
                IsValid = true;
                return;
            }
        })
        return IsValid;
    }

    //耗材
    function CheckInboundConsumable() {
        var IsValid = false;
        var ConsumableMaxQty = StockConsumableVue.StockConsumable.Consumable.Qty - StockConsumableVue.StockConsumable.Consumable.InboundQty;
        for (var i = 0 ; i < StockConsumableVue.StockConsumable.Consumables.length; i++) {

            if (StockConsumableVue.StockConsumable.Consumables[i].Qty > ConsumableMaxQty) {
                jAlert("入库数量不能超过采购数量", "提示", function () { });
                IsValid = true;
            }

            for (var j = i + 1; j < StockConsumableVue.StockConsumable.Consumables.length; j++) {
                if (StockConsumableVue.StockConsumable.Consumables[i].LotNum == StockConsumableVue.StockConsumable.Consumables[j].LotNum) {
                    jAlert("批次号重复", "提示", function () { });
                    IsValid = true;
                }
              
                if (Number(StockConsumableVue.StockConsumable.Consumables[i].Qty) + Number(StockConsumableVue.StockConsumable.Consumables[j].Qty) > Number(ConsumableMaxQty)) {
                    jAlert("入库数量不能超过采购数量", "提示", function () { });
                    IsValid = true;
                }
            }
        }

        $.each(StockConsumableVue.StockConsumable.Consumables, function (index, consumable) {
            if (!consumable.LotNum) {
                jAlert("批次号不能为空", "提示", function () { });
                IsValid = true;
                return;
            }
            if (!consumable.Specification) {
                jAlert("规格不能为空", "提示", function () { });
                IsValid = true;
                return;
            }
            if (!consumable.Model) {
                jAlert("型号不能为空", "提示", function () { });
                IsValid = true;
                return;
            }

        })
        return IsValid;
    }
</script>