using BusinessObjects.Manager;
using BusinessObjects.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks; 

namespace BusinessObjects.Domain
{
    public class ComponentInfo : EntityInfo, IComparable<ComponentInfo>
    { 
        public KeyValueInfo FujiClass2 { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public KeyValueInfo Type { get; set; }
        public double StdPrice { get; set; }
        public int Usage { get; set; }
        public int TotalSeconds { get; set; }
        public double SecondsPer { get; set; }
        public bool IsIncluded { get; set; }
        public bool IncludeContract { get; set; }
        public FujiClass2Info.Method Method { get; set; }
        public int LifeTime { get; set; }
        public bool IsActive { get; set; }
        public DateTime AddDate { get; set; }
        public DateTime UpdateDate { get; set; }
        public List<FaultRateInfo> FaultRates { get; set; }

        public string OID { get { return LookupManager.GetObjectOID(ObjectTypes.Component, this.ID); } }

        public ComponentInfo() 
        {
            this.Type = new KeyValueInfo();
            this.FujiClass2 = new KeyValueInfo(); 
            this.FaultRates = new List<FaultRateInfo>();
        }

        public ComponentInfo(DataRow dr)
            : this()
        {
            this.ID = SQLUtil.ConvertInt(dr["ID"]);
            this.FujiClass2.ID = SQLUtil.ConvertInt(dr["FujiClass2ID"]);
            this.FujiClass2.Name = SQLUtil.TrimNull(dr["FujiClass2Name"]);
            this.Name = SQLUtil.TrimNull(dr["Name"]);
            this.Description = SQLUtil.TrimNull(dr["Description"]);
            this.Type.ID = SQLUtil.ConvertInt(dr["TypeID"]);
            this.Type.Name = LookupManager.GetComponentTypeDesc(this.Type.ID);
            this.StdPrice = SQLUtil.ConvertDouble(dr["StdPrice"]);
            this.Usage = SQLUtil.ConvertInt(dr["Usage"]);
            this.TotalSeconds = SQLUtil.ConvertInt(dr["TotalSeconds"]);
            this.SecondsPer = SQLUtil.ConvertDouble(dr["SecondsPer"]);
            this.IsIncluded = SQLUtil.ConvertBoolean(dr["IsIncluded"]);
            this.IncludeContract = SQLUtil.ConvertBoolean(dr["IncludeContract"]);
            this.Method = SQLUtil.ConvertEnum<FujiClass2Info.Method>(dr["MethodID"]); 
            this.LifeTime = SQLUtil.ConvertInt(dr["LifeTime"]);
            this.IsActive = SQLUtil.ConvertBoolean(dr["IsActive"]);
            this.AddDate = SQLUtil.ConvertDateTime(dr["AddDate"]);
            this.UpdateDate = SQLUtil.ConvertDateTime(dr["UpdateDate"]);
        }

        public static class ComponentTypes
        {
            public const int ImportantComponent = 1;
            public const int GeneralComponent = 2;
            public const int CT = 3;

            public static string GetTypeDesc(int id)
            {
                switch(id)
                {
                    case ImportantComponent:
                        return "重要零件";
                    case GeneralComponent:
                        return "一般零件";
                    case CT:
                        return "CT球管";
                    default:
                        return "";
                }
            }
        }


        public DataTable GetChangedFields(ComponentInfo newInfo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("FieldName");
            dt.Columns.Add("OldValue");
            dt.Columns.Add("NewValue");

            if(this.FujiClass2.ID != newInfo.FujiClass2.ID)
                dt.Rows.Add("ComponentFujiClass2", SQLUtil.TrimNull(this.FujiClass2.Name), SQLUtil.TrimNull(newInfo.FujiClass2.Name));

            if (this.Name != SQLUtil.TrimNull(newInfo.Name))
                dt.Rows.Add("ComponentName", this.Name, newInfo.Name);

            if (this.Description != SQLUtil.TrimNull(newInfo.Description))
                dt.Rows.Add("ComponentDescription", this.Description, SQLUtil.TrimNull(newInfo.Description));

            if (this.Type.ID != newInfo.Type.ID)
                dt.Rows.Add("ComponentType", this.Type.Name, LookupManager.GetComponentTypeDesc(newInfo.Type.ID));

            if (this.StdPrice != SQLUtil.ConvertDouble(newInfo.StdPrice))
                dt.Rows.Add("CompomemtStdPrice", SQLUtil.ConvertDouble(this.StdPrice), SQLUtil.ConvertDouble(newInfo.StdPrice));

            if (this.Usage != newInfo.Usage)
                dt.Rows.Add("ComponentUsage", SQLUtil.ConvertInt(this.Usage), SQLUtil.ConvertInt(newInfo.Usage));

            if (this.TotalSeconds != newInfo.TotalSeconds)
                dt.Rows.Add("ComponentTotalSeconds", SQLUtil.ConvertDouble(this.TotalSeconds), SQLUtil.ConvertDouble(newInfo.TotalSeconds));

            if (this.SecondsPer != newInfo.SecondsPer)
                dt.Rows.Add("ComponentSecondsPer", SQLUtil.ConvertDouble(this.SecondsPer), SQLUtil.ConvertDouble(newInfo.SecondsPer));

            if (this.IsIncluded != newInfo.IsIncluded)
                dt.Rows.Add("ComponentIsIncluded", SQLUtil.ConvertBoolean(this.IsIncluded) ? "是" : "否", SQLUtil.ConvertBoolean(newInfo.IsIncluded) ? "是" : "否");

            if (this.IncludeContract != newInfo.IncludeContract)
                dt.Rows.Add("ComponentIncludeContract", SQLUtil.ConvertBoolean(this.IncludeContract) ? "是" : "否", SQLUtil.ConvertBoolean(newInfo.IncludeContract) ? "是" : "否");

            if (this.Method != newInfo.Method) 
                dt.Rows.Add("ComponentMethodID", this.Method.GetDescription(),  newInfo.Method.GetDescription());

            if (this.IsActive != newInfo.IsActive)
                dt.Rows.Add("ComponentIsActive", SQLUtil.ConvertBoolean(this.IsActive) ? "启用" : "停用", SQLUtil.ConvertBoolean(newInfo.IsActive) ? "启用" : "停用");

            return dt;
        }
         
        public AuditHdrInfo ConvertAudit(ComponentInfo newInfo, UserInfo user)
        {
            AuditHdrInfo audit = new AuditHdrInfo();
            audit.ObjectType.ID = ObjectTypes.Component;
            audit.ObjectID = this.ID;
            audit.Operation.ID = AuditHdrInfo.AuditOperations.Update;
            audit.TransUser = user;
            List<AuditDetailInfo> infos = audit.DetailInfo;

            if (this.FujiClass2.ID != newInfo.FujiClass2.ID)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentFujiClass2", OldValue = this.FujiClass2.Name, NewValue = newInfo.FujiClass2.Name });

            if (this.Name != SQLUtil.TrimNull(newInfo.Name))
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentName", OldValue = this.Name, NewValue = newInfo.Name });

            if (this.Description != SQLUtil.TrimNull(newInfo.Description))
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentDescription", OldValue = this.Description, NewValue = newInfo.Description });

            if (this.Type.ID != newInfo.Type.ID)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentType", OldValue = this.Type.Name, NewValue = LookupManager.GetComponentTypeDesc(newInfo.Type.ID) });

            if (this.StdPrice != SQLUtil.ConvertDouble(newInfo.StdPrice))
                infos.Add(new AuditDetailInfo() { FieldName = "CompomemtStdPrice", OldValue = this.StdPrice.ToString(), NewValue = newInfo.StdPrice.ToString() });

            if (this.Usage != newInfo.Usage)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentUsage", OldValue = this.Usage.ToString(), NewValue = newInfo.Usage.ToString() });

            if (this.Method != newInfo.Method)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentMethodID", OldValue = this.Method.GetDescription(), NewValue = newInfo.Method.GetDescription() });

            if (this.TotalSeconds != newInfo.TotalSeconds)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentTotalSeconds", OldValue = this.TotalSeconds.ToString(), NewValue = newInfo.TotalSeconds.ToString() });

            if (this.SecondsPer != newInfo.SecondsPer)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentSecondsPer", OldValue = this.SecondsPer.ToString(), NewValue = newInfo.SecondsPer.ToString() });

            if (this.IsIncluded != newInfo.IsIncluded)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentIsIncluded", OldValue = this.IsIncluded ? "是" : "否", NewValue = newInfo.IsIncluded ? "是" : "否" });

            if (this.IncludeContract != newInfo.IncludeContract)
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentIncludeContract", OldValue = this.IncludeContract ? "是" : "否", NewValue = newInfo.IncludeContract ? "是" : "否", });

            if (this.IsActive != newInfo.IsActive) 
                infos.Add(new AuditDetailInfo() { FieldName = "ComponentIsActive", OldValue = this.IsActive ? "是" : "否", NewValue = newInfo.IsActive ? "是" : "否" });

            return audit;
        }

        public int CompareTo(ComponentInfo other)
        {
            return this.ID.CompareTo(other.ID);
        }
    }
}
