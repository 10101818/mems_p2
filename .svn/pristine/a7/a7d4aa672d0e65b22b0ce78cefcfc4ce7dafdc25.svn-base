using BusinessObjects.Aspect;
using BusinessObjects.DataAccess;
using BusinessObjects.Domain;
using BusinessObjects.Util;
using DocumentFormat.OpenXml.EMMA;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Manager
{
    /// <summary>
    /// 富士二类事务处理
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    public class FujiClassManager
    {
        private FaultRateDao faultRateDao = new FaultRateDao();
        private LookupDao lookupDao = new LookupDao();
        private AuditDao auditDao = new AuditDao();
        private FujiClassDao fujiClassDao = new FujiClassDao();
        private ComponentDao componentDao = new ComponentDao();
        private ConsumableDao consumableDao = new ConsumableDao();

        private ComponentManager componentManager = new ComponentManager();
        #region"FujiClass2"
        /// <summary>
        /// 获取富士2类信息包含故障率信息
        /// </summary>
        /// <param name="class1"></param>
        /// <param name="class2"></param>
        /// <param name="filterField"></param>
        /// <param name="filterText"></param>
        /// <param name="sortField"></param>
        /// <param name="sortDirection"></param> 
        /// <returns></returns>
        public List<FujiClass2Info> QueryFujiClass2s(int class1, int class2, string filterField, string filterText, string sortField, bool sortDirection)
        {
            List < FujiClass2Info > infos = this.fujiClassDao.QueryFujiClass2s(class1, class2, filterField, filterText, sortField, sortDirection, 0, 0);
            Dictionary<int, List<FaultRateInfo>> faultRates = this.faultRateDao.GetFaultRateByObject(infos.Select(info => info.ID).ToList(), FaultRateInfo.ObjectType.Repair);
            infos.ForEach(info => {
                if (faultRates.ContainsKey(info.ID))
                    info.Repairs = faultRates[info.ID]; 

                SetFujiClass2Rate(info);
                
            });
            return infos;
        }

        private List<FujiClass2Info> QueryFujiClass2sByIDs(List<int> ids)
        {
            List<FujiClass2Info> infos = this.fujiClassDao.QueryFujiClass2sByIDs(ids);
            Dictionary<int, List<FaultRateInfo>> faultRates = this.faultRateDao.GetFaultRateByObject(ids, FaultRateInfo.ObjectType.Repair);
            infos.ForEach(info => {
                if (faultRates.ContainsKey(info.ID))
                    info.Repairs = faultRates[info.ID];

                // SetFujiClass2Rate(info);

            });
            return infos;
        }

        public FujiClass2Info GetFujiClass2ByID(int id)
        {
            FujiClass2Info info = this.fujiClassDao.GetFujiClass2ByID(id); 
            info.Repairs = this.faultRateDao.GetFaultRateByObject(id, FaultRateInfo.ObjectType.Repair);

            SetFujiClass2Rate(info);
            return info;
        }
         
        public FujiClassLink GetFujiLinkByClass2ID(int id)
        {
            FujiClassLink info = this.fujiClassDao.GetFujiLinkByClass2ID(id);
            info.FujiClass2.Repairs = this.faultRateDao.GetFaultRateByObject(id, FaultRateInfo.ObjectType.Repair);

            SetFujiClass2Rate(info.FujiClass2);
            return info;
        }

        [TransactionAspect]
        public int SaveFujiClass2(FujiClassLink info, UserInfo userInfo, bool isUpdate, int copyID = 0)
        { 
            List<AuditHdrInfo> audits = new List<AuditHdrInfo>();
            AuditHdrInfo audit;
            if (info.FujiClass2.ID == 0)
            {
                if (copyID != 0)
                {
                    FujiClass2Info copyInfo = this.GetFujiClass2ByID(copyID);
                    copyInfo.FujiClass1 = info.FujiClass2.FujiClass1;
                    copyInfo.Name = info.FujiClass2.Name;
                    copyInfo.Description = info.FujiClass2.Description;
                    info.FujiClass2.ID = this.fujiClassDao.AddFujiClass2(copyInfo);
                    this.fujiClassDao.AddFujiClass2EqpType(info);
                    copyInfo.Repairs.ForEach(rate => rate.ObjectID = info.FujiClass2.ID);
                    this.AddFaultRates(copyInfo.Repairs);
                    if (copyInfo.Components.Count > 0)
                    {
                        foreach(ComponentInfo componentInfo in copyInfo.Components)
                        {
                            componentInfo.ID = 0;
                            componentInfo.FujiClass2.ID = info.FujiClass2.ID;
                            this.componentManager.SaveComponent(componentInfo, userInfo);
                        }
                    }
                    if (copyInfo.Consumables.Count > 0)
                    {
                        foreach(ConsumableInfo consumableInfo in copyInfo.Consumables)
                        {
                            consumableInfo.ID = 0;
                            consumableInfo.FujiClass2.ID = info.FujiClass2.ID;
                            this.consumableDao.AddConsumable(consumableInfo);
                        }
                    }
                }
                else
                {
                    this.fujiClassDao.AddFujiClass2(info.FujiClass2);
                    this.fujiClassDao.AddFujiClass2EqpType(info);
                    info.FujiClass2.Repairs = FaultRateInfo.GetInitList(info.FujiClass2.ID, FaultRateInfo.ObjectType.Repair);
                    this.AddFaultRates(info.FujiClass2.Repairs);
                }
                audit = info.ConvertAudit(userInfo);
                if(audit.DetailInfo.Count>0)
                    audits.Add(audit);
            }
            else
            {
                FujiClassLink existsInfo = this.GetFujiLinkByClass2ID(info.FujiClass2.ID);
                if (isUpdate)
                {
                    info.FujiClass2.CheckEquipmentTypeRelatedFields();
                    this.fujiClassDao.UpdateFujiClass2(info.FujiClass2); 
                    this.UpdateFaultRates(info.FujiClass2.Repairs);
                     
                    audit = existsInfo.FujiClass2.ConvertAudit(info.FujiClass2, userInfo); 
                    audit.DetailInfo = audit.DetailInfo.Concat(FaultRateInfo.ConvertAuditDetail(existsInfo.FujiClass2.Repairs, info.FujiClass2.Repairs)).ToList();
                    if (audit.DetailInfo.Count>0)
                        audits.Add(audit);

                    int componentLen = info.FujiClass2.Components.Count;
                    info.FujiClass2.Components.Sort();
                    existsInfo.FujiClass2.Components.Sort();
                    info.FujiClass2.Consumables.Sort();
                    existsInfo.FujiClass2.Consumables.Sort();
                    for(int i= 0; i < componentLen; i++)
                    {
                        this.componentDao.UpdateComponent(info.FujiClass2.Components[i]);
                        audit = existsInfo.FujiClass2.Components[i].ConvertAudit(info.FujiClass2.Components[i], userInfo);
                        if (audit.DetailInfo.Count > 0)
                            audits.Add(audit);
                    }
                    componentLen = info.FujiClass2.Consumables.Count;
                    for (int i = 0; i < componentLen; i++)
                    {
                        this.consumableDao.UpdateConsumable(info.FujiClass2.Consumables[i]);
                        audit = existsInfo.FujiClass2.Consumables[i].ConvertAudit(info.FujiClass2.Consumables[i], userInfo);
                        if (audit.DetailInfo.Count > 0)
                            audits.Add(audit);
                    }
                }
                else
                {
                    this.fujiClassDao.AddFujiClass2EqpType(info);
                    audit = info.ConvertAudit(userInfo);
                    if (audit.DetailInfo.Count > 0)
                        audits.Add(audit);
                }
            }

            int len = audits.Count;
            if (len == 0)
                return info.FujiClass2.ID;
            DataTable auditDT = audits.ConvertAuditDT();
            DataTable auditDetailDT = null;
            this.auditDao.AddAuditHdr(auditDT);
            for (int i = 0; i < len; i++)
            {
                if (auditDetailDT == null)
                    auditDetailDT = audits[i].DetailInfo.ConvertAuditDetailDT(SQLUtil.ConvertInt(auditDT.Rows[i]["ID"]));
                else
                    auditDetailDT.Merge(audits[i].DetailInfo.ConvertAuditDetailDT(SQLUtil.ConvertInt(auditDT.Rows[i]["ID"])));
            }
            this.auditDao.AddAuditDetail(auditDetailDT);

            return info.FujiClass2.ID;
        }
		/// <summary>
        /// 获取富士II类零件/耗材信息
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        private FujiClass2Info SetFujiClass2Rate(FujiClass2Info info)
        {
            info.Components = this.componentDao.QueryComponentsByFujiClass2ID(info.ID, -1, true);
            Dictionary<int, List<FaultRateInfo>> faultRates = this.faultRateDao.GetFaultRateByObject(info.Components.Select(component => component.ID).ToList(), FaultRateInfo.ObjectType.Component);
            info.Components.ForEach(component =>
            {
                if (faultRates.ContainsKey(component.ID))
                    component.FaultRates = faultRates[component.ID];
            });
            info.Consumables = this.consumableDao.QueryConsumablesByFujiClass2ID(info.ID, true);
            return info;
        }

		[TransactionAspect]
        public void SaveFujiClass2s(List<FujiClass2Info> infos, FujiClass2Info.SectionType type,UserInfo userInfo)
        {
            List<FujiClass2Info> existsInfos = this.QueryFujiClass2sByIDs(infos.Select(info => info.ID).ToList());
            DataTable dt = FujiClass2Info.ConvertFujiClass2DataTable(infos); 
            switch (type)
            {
                case FujiClass2Info.SectionType.Labour:
                    this.fujiClassDao.UpdateFujiClass2Labour(dt);
                    break;
                case FujiClass2Info.SectionType.Contract:
                    this.fujiClassDao.UpdateFujiClass2Contract(dt);
                    break;
                case FujiClass2Info.SectionType.Spare:
                    this.fujiClassDao.UpdateFujiClass2Spare(dt);
                    break;
                case FujiClass2Info.SectionType.Repair:
                    this.fujiClassDao.UpdateFujiClass2Repair(dt);
                    this.UpdateFaultRates(infos.SelectMany(info => info.Repairs).ToList());
                    break;
            }

            //转换日志信息
            infos.Sort(); 
            existsInfos.Sort();
            List<AuditHdrInfo> audits = new List<AuditHdrInfo>();
            int len = existsInfos.Count;
            for (int i = 0; i<len; i++)
            {
                AuditHdrInfo audit = existsInfos[i].ConvertAudit(infos[i], userInfo); 
                audit.DetailInfo = audit.DetailInfo.Concat(FaultRateInfo.ConvertAuditDetail(existsInfos[i].Repairs, infos[i].Repairs)).ToList();
                audits.Add(audit);
            }
            DataTable auditDT = audits.ConvertAuditDT();
            DataTable auditDetailDT = null;
            this.auditDao.AddAuditHdr(auditDT); 
            for (int i = 0; i < len; i++)
            {
                if (auditDetailDT == null)
                    auditDetailDT = audits[i].DetailInfo.ConvertAuditDetailDT(SQLUtil.ConvertInt(auditDT.Rows[i]["ID"]));
                else
                    auditDetailDT.Merge(audits[i].DetailInfo.ConvertAuditDetailDT(SQLUtil.ConvertInt(auditDT.Rows[i]["ID"])));
            }
            this.auditDao.AddAuditDetail(auditDetailDT);
        }
        

        [TransactionAspect]
        public void AddFaultRates(List<FaultRateInfo> infos)
        {
            DataTable dt = FaultRateInfo.ConvertFaultRateDataTable(infos);
            this.faultRateDao.AddFaultRates(dt);
        }
        [TransactionAspect]
        public void UpdateFaultRates(List<FaultRateInfo> infos)
        { 
            DataTable dt = FaultRateInfo.ConvertFaultRateDataTable(infos);
            this.faultRateDao.UpdateFaultRates(dt); 
        }

        /// <summary>
        /// 删除富士I类设备类型关联
        /// </summary>
        /// <param name="info">富士关联信息</param>
        [TransactionAspect]
        public void DeleteFujiClass2ByLink(FujiClassLink info)
        {
            this.fujiClassDao.DeleteFujiClass2Link(info);

            if (!this.fujiClassDao.CheckFujiClass2LinkExisted(info))
            {
                this.faultRateDao.DeleteFaultRateByObjID(info.FujiClass2.ID, FaultRateInfo.ObjectType.Repair);
                this.consumableDao.DeleteConsumableByFujiClass2ID(info.FujiClass2.ID);
                FujiClass2Info fujiClass2 = this.GetFujiClass2ByID(info.FujiClass2.ID);
                foreach(ComponentInfo component in fujiClass2.Components)
                {
                    this.componentManager.DeleteComponentByID(component.ID);
                }
                this.fujiClassDao.DeleteFujiClass2ByID(info.FujiClass2.ID);
            }

        }

        #endregion

        #region"FujiClass1"
        /// <summary>
        /// 保存富士I类
        /// </summary>
        /// <param name="info">富士I类信息</param>
        /// <param name="isUpdate">是否更新</param>
        /// <returns>富士I类ID</returns>
        [TransactionAspect]
        public int SaveFujiClass1(FujiClass1Info info, bool isUpdate)
        {
            if (info.ID == 0)
            {
                info.ID = this.fujiClassDao.AddFujiClass1(info);
                this.fujiClassDao.AddFujiClass1EqpType(info);
            }
            else
            {
                //引用富士I类
                if (!isUpdate)
                {
                    this.fujiClassDao.AddFujiClass1EqpType(info);
                }
                else
                {
                    this.fujiClassDao.UpdateFujiClass1(info);
                }
            }

            return info.ID;
        }

        /// <summary>
        /// 删除富士I类设备类型关联
        /// </summary>
        /// <param name="info">富士关联信息</param>
        [TransactionAspect]
        public void DeleteFujiClassLink(FujiClassLink info)
        {
            this.fujiClassDao.DeleteFujiClassLink(info);
        }

        /// <summary>
        /// 根据ID删除富士I类
        /// </summary>
        /// <param name="id">富士I类ID</param>
        [TransactionAspect]
        public void DeleteFujiClass1ByID(int id)
        {
            this.fujiClassDao.DeleteFujiClass1ByID(id);
            this.fujiClassDao.DeleteFujiClass1LinkByID(id);
        }
        #endregion
    }
}
