
----------------------------------------------------------------------ContractDao.cs----------------------------------------------------------------------------------------

using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 合同dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class ContractDao : BaseDao
    {
        #region "tblContract"
        /// <summary>
        /// 获取合同列表
        /// </summary>
        /// <param name="status">合同状态</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>合同列表</returns>
        public List<ContractInfo> QueryContracts(int status, string filterField, string filterText, string sortField, bool sortDirection, int curRowNum= 0, int pageSize = 0) 
        {
            List<ContractInfo> contracts = new List<ContractInfo>();
            sqlStr = "SELECT c.*,s.Name supplierName " +
                    " FROM tblContract c " +
                    " LEFT JOIN tblSupplier s ON c.SupplierID=s.ID " +
                    " WHERE 1=1 ";
            if (status != 0) sqlStr += ContractInfo.Statuses.GetSqlFilter(status);

            if (!string.IsNullOrEmpty(filterText))
            {
                if (filterField.Equals("e.ID") || filterField.Equals("e.Name") || filterField.Equals("e.SerialCode"))
                {
                    sqlStr += " AND EXISTS (SELECT j.EquipmentID FROM jctContractEqpt j INNER JOIN tblEquipment as e ON j.EquipmentID = e.ID WHERE j.ContractID = c.ID";
                    sqlStr += GetFieldFilterClause(filterField);
                    sqlStr += ")";
                }
                else
                {
                    sqlStr += GetFieldFilterClause(filterField);
                }
            }

            sqlStr += GenerateSortClause(sortDirection, sortField, "c.ID");

            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);
            using(SqlCommand command=ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))AddFieldFilterParam(command, filterField, filterText);

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        contracts.Add(new ContractInfo(dr));
                    }
                }
            }
            return contracts;
        }
        /// <summary>
        /// App获取合同列表信息
        /// </summary>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>合同列表信息</returns>
        public List<ContractInfo> GetContracts(string filterText, int curRowNum = 0, int pageSize = 0)
        {
            List<ContractInfo> infos = new List<ContractInfo>();

            sqlStr = "SELECT c.*,s.Name supplierName " +
                    " FROM tblContract c " +
                    " LEFT JOIN tblSupplier s ON c.SupplierID=s.ID " +
                    " WHERE 1=1 ";
            if (!string.IsNullOrEmpty(filterText))
                sqlStr += " AND ( UPPER(c.Name) LIKE @FilterText OR UPPER(c.ID) LIKE @FilterText OR UPPER(c.ContractNum) LIKE @FilterText ) ";
            sqlStr += " ORDER BY ID";
            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!string.IsNullOrEmpty(filterText))
                    command.Parameters.Add("@FilterText", SqlDbType.NVarChar).Value = "%" + filterText.ToUpper() + "%";

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new ContractInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 获取合同数量
        /// </summary>
        /// <param name="status">合同状态</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <returns>合同数量</returns>
        public int QueryContractsCount(int status, string filterField, string filterText)
        {
            List<ContractInfo> contracts = new List<ContractInfo>();
            sqlStr = "SELECT COUNT(c.ID) FROM tblContract c " +
                    " LEFT JOIN tblSupplier s ON c.SupplierID=s.ID " +
                    " WHERE 1=1 ";

            if (status != 0) sqlStr += ContractInfo.Statuses.GetSqlFilter(status);

            if (!string.IsNullOrEmpty(filterText))
            {
                if (filterField.Equals("e.ID") || filterField.Equals("e.Name") || filterField.Equals("e.SerialCode"))
                {
                    sqlStr += " AND EXISTS (SELECT j.EquipmentID FROM jctContractEqpt j INNER JOIN tblEquipment as e ON j.EquipmentID = e.ID WHERE j.ContractID = c.ID";
                    sqlStr += GetFieldFilterClause(filterField);
                    sqlStr += ")";
                }
                else
                {
                    sqlStr += GetFieldFilterClause(filterField);
                }
            }
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText)) AddFieldFilterParam(command, filterField, filterText);

                return GetCount(command);
            }
        }
        /// <summary>
        /// 新增合同
        /// </summary>
        /// <param name="contract">合同信息</param>
        /// <returns>合同ID</returns>
        public int AddContract(ContractInfo contract)
        {
            sqlStr = "INSERT INTO tblContract(SupplierID,ContractNum,"+
                            "Name,TypeID,ScopeID,ScopeComments,Amount,ProjectNum,StartDate,EndDate,Comments)" +
                    "VALUES(@SupplierID,@ContractNum,@Name,@TypeID,@ScopeID,@ScopeComments,@Amount," +
                            "@ProjectNum,@StartDate,@EndDate,@Comments)"+
                            "SELECT @@IDENTITY";
            using(SqlCommand command=ConnectionUtil.GetCommand(sqlStr)){
                command.Parameters.Add("@SupplierID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Supplier.ID);
                command.Parameters.Add("@ContractNum", SqlDbType.VarChar).Value = SQLUtil.TrimNull(contract.ContractNum);
                command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.Name);
                command.Parameters.Add("@TypeID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Type.ID);
                command.Parameters.Add("@ScopeID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Scope.ID);
                command.Parameters.Add("@ScopeComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.ScopeComments);
                command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = SQLUtil.ConvertDouble(contract.Amount);
                command.Parameters.Add("@ProjectNum", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.ProjectNum);
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(contract.StartDate);
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(contract.EndDate);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.Comments);

                contract.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return contract.ID;
        }
        /// <summary>
        /// 修改合同
        /// </summary>
        /// <param name="contract">合同信息</param>
        public void UpdateContract(ContractInfo contract)
        {
            sqlStr = " UPDATE tblContract SET SupplierID=@SupplierID, " +
                     " ContractNum=@ContractNum,Name=@Name,TypeID=@TypeID,ScopeID=@ScopeID,ScopeComments=@ScopeComments, " +
                     " Amount=@Amount,ProjectNum=@ProjectNum,StartDate=@StartDate,EndDate=@EndDate,Comments=@Comments " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@SupplierID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Supplier.ID);
                command.Parameters.Add("@ContractNum", SqlDbType.VarChar).Value = SQLUtil.TrimNull(contract.ContractNum);
                command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.Name);
                command.Parameters.Add("@TypeID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Type.ID);
                command.Parameters.Add("@ScopeID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.Scope.ID);
                command.Parameters.Add("@ScopeComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.ScopeComments);
                command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = SQLUtil.ConvertDouble(contract.Amount);
                command.Parameters.Add("@ProjectNum", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.ProjectNum);
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(contract.StartDate);
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(contract.EndDate);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(contract.Comments);
                command.Parameters.Add("@ID", SqlDbType.Int).Value = SQLUtil.ConvertInt(contract.ID);
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 根据id获取合同信息
        /// </summary>
        /// <param name="contractID">合同ID</param>
        /// <returns>合同信息</returns>
        public ContractInfo GetContractByID(int contractID)
        {
            sqlStr = "SELECT c.*,s.Name supplierName " +
                    " FROM tblContract c " +
                    " LEFT JOIN tblSupplier s ON c.SupplierID=s.ID " +
                    " WHERE c.ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = contractID;
                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new ContractInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 根据合同状态编号获取合同数量
        /// </summary>
        /// <param name="statusID">合同状态ID</param>
        /// <returns>该状态合同数量</returns>
        public int GetContractCount(int statusID)
        {
            sqlStr = "SELECT COUNT(ID)" +
                    " FROM tblContract c " +
                    " WHERE 1=1 " + ContractInfo.Statuses.GetSqlFilter(statusID);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetCount(command);
            }
        }
        /// <summary>
        /// 删除合同绑定的设备信息
        /// </summary>
        /// <param name="contractID">合同ID</param>
        public void DeleteContractEqpt(int contractID)
        {
            sqlStr = " DELETE FROM jctContractEqpt WHERE ContractID = @ContractID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ContractID", SqlDbType.Int).Value = contractID;

                command.ExecuteNonQuery();
            } 
        }

        #endregion

        #region jctContractEqpt
        /// <summary>
        /// 新增合同设备关联信息
        /// </summary>
        /// <param name="contractID">合同ID</param>
        /// <param name="equipmentID">设备ID</param>
        public void AddContractEqpt(int contractID, int equipmentID)
        {
            sqlStr = "INSERT INTO jctContractEqpt (ContractID,EquipmentID) " +
                     " VALUES(@ContractID,@EquipmentID); ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ContractID", SqlDbType.Int).Value = contractID;
                command.Parameters.Add("@EquipmentID", SqlDbType.Int).Value = equipmentID;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 根据合同id获取有效的合同关联的设备信息
        /// </summary>
        /// <param name="contractID">合同ID</param>
        /// <returns>有效的合同及关联的设备信息</returns>
        public List<EquipmentInfo> GetContractEqpts(int contractID)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT e.*, s.Name AS SupplierName, su.Name AS ManufacturerName, c.ContractID,ct.ScopeID,ct.ScopeComments FROM jctContractEqpt j " +
                    " INNER JOIN tblEquipment AS e ON e.ID = j.EquipmentID" +
                     " LEFT JOIN tblSupplier AS s ON e.SupplierID=s.ID " +
                     " LEFT JOIN tblSupplier AS su ON e.ManufacturerID=su.ID " +
                     " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID" +
                     " LEFT JOIN tblContract AS ct on ct.ID = c.ContractID" +
                     " WHERE j.ContractID = @ContractID ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ContractID", SqlDbType.Int).Value = contractID;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 获取合同及关联的设备信息
        /// </summary>
        /// <param name="contractIDs">合同ID</param>
        /// <returns>合同及关联的设备信息</returns>
        public List<ContractEqptInfo> GetContractEqpts(List<int> contractIDs)
        {
            List<ContractEqptInfo> infos = new List<ContractEqptInfo>();

            sqlStr = "SELECT e.ID ,e.Name ,e.DepartmentID ,e.SerialCode , j.ContractID FROM jctContractEqpt j " +
                    " INNER JOIN tblEquipment AS e ON e.ID = j.EquipmentID" +
                    " WHERE j.ContractID in (" + (string.IsNullOrEmpty(SQLUtil.ConvertToInStr(contractIDs)) ? "null" : SQLUtil.ConvertToInStr(contractIDs)) + ") ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    ContractEqptInfo info = null;
                    foreach (DataRow dr in dt.Rows)
                    {
                        info = new ContractEqptInfo();
                        info.ContractID = SQLUtil.ConvertInt(dr["ContractID"]);
                        info.Equipment.ID = SQLUtil.ConvertInt(dr["ID"]);
                        info.Equipment.Name = SQLUtil.TrimNull(dr["Name"]);
                        info.Equipment.SerialCode = SQLUtil.TrimNull(dr["SerialCode"]);
                        info.Equipment.Department.ID = SQLUtil.ConvertInt(dr["DepartmentID"]);
                        info.Equipment.Department.Name = Manager.LookupManager.GetDepartmentDesc(info.Equipment.Department.ID);
                        infos.Add(info);
                    }
                }
            }

            return infos;
        }

        #endregion
    }
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------DispatchDao.cs----------------------------------------------------------------------------------------


using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Manager;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 派工单dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class DispatchDao:BaseDao
    {
        /// <summary>
        /// 新增派工单
        /// </summary>
        /// <param name="info">派工单信息</param>
        /// <returns>派工单信息</returns>
        public DispatchInfo AddDispatch(DispatchInfo info)
        {
            sqlStr = "INSERT INTO tblDispatch(RequestID,RequestType,UrgencyID,EquipmentStatus,EngineerID," +
                     " ScheduleDate,LeaderComments,StatusID,CreateDate) " +
                     " VALUES(@RequestID,@RequestType,@UrgencyID,@EquipmentStatus,@EngineerID," +
                     " @ScheduleDate,@LeaderComments,@StatusID,GETDATE()); " +
                     " SELECT @@IDENTITY";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = info.Request.ID;
                command.Parameters.Add("@RequestType", SqlDbType.Int).Value = info.RequestType.ID;
                command.Parameters.Add("@UrgencyID", SqlDbType.Int).Value = SQLUtil.ZeroToNull(info.Urgency.ID);
                command.Parameters.Add("@EquipmentStatus", SqlDbType.Int).Value = info.MachineStatus.ID;
                command.Parameters.Add("@EngineerID", SqlDbType.Int).Value = info.Engineer.ID;
                command.Parameters.Add("@ScheduleDate", SqlDbType.DateTime).Value = info.ScheduleDate;
                command.Parameters.Add("@LeaderComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.LeaderComments);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = info.Status.ID;

                info.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return info;
        }
        /// <summary>
        /// 获取派工单列表
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="userRoleID">用户角色ID</param>
        /// <param name="statusList">状态ID</param>
        /// <param name="urgency">派工单紧急程度</param>
        /// <param name="type">派工类型</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>派工单列表</returns>
        public List<DispatchInfo> QueryDispatches(int userID,int userRoleID, List<int> statusList, int urgency, int type, string filterField, string filterText, string sortField, bool sortDirection, int curRowNum = 0, int pageSize = 0)
        {
            List<DispatchInfo> dispatches = new List<DispatchInfo>();
            sqlStr = "SELECT DISTINCT d.*, CONVERT(VARCHAR(10),d.CreateDate,112),j.ID as DispatchJournalID,dr.ID as DispatchReportID , j.StatusID AS DispatchJournalStatusID,dr.StatusID AS DispatchReportStatusID, " + DispatchReportInfo.GetOverDueSQL() + string.Format(", CASE WHEN d.StatusID = {0} THEN -1 ELSE d.StatusID END AS newStatusID ", DispatchInfo.Statuses.Responded) +
                " FROM tblDispatch d " + 
                " LEFT JOIN tblDispatchJournal  j ON d.ID = j.DispatchID " +
                " LEFT JOIN tblDispatchReport dr ON d.ID = dr.DispatchID " +
                " LEFT JOIN tblRequest as r on r.ID = d.RequestID " +
                " LEFT JOIN jctRequestEqpt jc ON jc.RequestID=r.ID  " +
                " LEFT JOIN tblEquipment e ON e.ID=jc.EquipmentID " +
                " WHERE 1=1 ";
            if (statusList != null && statusList.Count > 1) sqlStr += " AND d.StatusID IN (" + SQLUtil.ConvertToInStr(statusList) + ")";
            else if (statusList != null && statusList.Count == 1 && statusList[0] != 0) sqlStr += " AND d.StatusID IN (" + SQLUtil.ConvertToInStr(statusList) + ")";
            else sqlStr += " AND d.StatusID <> " + DispatchInfo.Statuses.Cancelled;
            
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;
            if (type != 0) sqlStr += " AND d.RequestType=" + type;
            if (userRoleID == BusinessObjects.Domain.UserRole.Admin) sqlStr += " AND d.EngineerID=" + userID;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            if (sortField.Equals("init"))
            {
                if (userRoleID == BusinessObjects.Domain.UserRole.Admin)
                    sqlStr += string.Format(" ORDER BY newStatusID, d.RequestType, CONVERT(VARCHAR(10),d.CreateDate,112) DESC , d.ID ", DispatchInfo.Statuses.Responded, DispatchReportInfo.GetOverDueSQL());
                else
                    sqlStr += string.Format(" ORDER BY {0} DESC, d.RequestType, CONVERT(VARCHAR(10),d.CreateDate,112) DESC, d.StatusID, d.ID ", DispatchReportInfo.GetOverDueSQL());
            }
            else
                sqlStr += GenerateSortClause(sortDirection, sortField, "d.ID");

            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        dispatches.Add(new DispatchInfo(dr));
                    }
                }
            }
            return dispatches;
        }
        /// <summary>
        /// 获取派工单数量
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="userRoleID">用户角色ID</param>
        /// <param name="status">派工单状态ID</param>
        /// <param name="urgency">派工紧急程度</param>
        /// <param name="type">派工类型</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <returns>派工单数量</returns>
        public int QueryDispatchesCount(int userID,int userRoleID,int status, int urgency, int type, string filterField, string filterText)
        {
            sqlStr = "SELECT COUNT(d.ID) FROM tblDispatch d " +
                    " LEFT JOIN tblDispatchJournal  j ON d.ID = j.DispatchID " +
                    " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                    " WHERE 1=1 ";

            if (status != 0) sqlStr += " AND d.StatusID=" + status;
            else sqlStr += " AND d.StatusID <> " + DispatchInfo.Statuses.Cancelled;
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;
            if (type != 0) sqlStr += " AND d.RequestType=" + type;
            if (userRoleID == BusinessObjects.Domain.UserRole.Admin) sqlStr += " AND d.EngineerID=" + userID;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取作业报告列表
        /// </summary>
        /// <param name="status">作业报告状态</param>
        /// <param name="urgency">派工单紧急程度</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>作业报告列表</returns>
        public List<DispatchReportInfo> QueryDispatchReports(int status, int urgency, string filterField, string filterText, string sortField, bool sortDirection, int curRowNum = 0, int pageSize = 10)
        {
            List<DispatchReportInfo> dispatches = new List<DispatchReportInfo>();
            sqlStr = "SELECT DISTINCT d.*,r.ID AS DispatchReportID , r.StatusID AS DispatchReportStatusID ,j.ID as DispatchJournalID, j.StatusID AS DispatchJournalStatusID " +
                " FROM tblDispatchReport r " +
                " LEFT JOIN tblDispatch d ON d.ID = r.DispatchID " +
                " LEFT JOIN tblDispatchJournal j ON d.ID = j.DispatchID " +
                " WHERE 1=1 ";
            if (status != 0) sqlStr += " AND r.StatusID=" + status;
            else sqlStr += " AND r.StatusID <> " + DispatchReportInfo.DispatchReportStatus.Cancelled;
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            sqlStr += GenerateSortClause(sortDirection, sortField, "r.ID");

            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        DispatchReportInfo dispatchReport = new DispatchReportInfo();
                        dispatchReport.ID = SQLUtil.ConvertInt(dr["DispatchReportID"]);
                        dispatchReport.Status.ID = SQLUtil.ConvertInt(dr["DispatchReportStatusID"]);
                        dispatchReport.Status.Name = LookupManager.GetDispatchDocStatusDesc(dispatchReport.Status.ID);

                        dispatchReport.Dispatch.ID = SQLUtil.ConvertInt(dr["ID"]);
                        dispatchReport.Dispatch.Request.ID = SQLUtil.ConvertInt(dr["RequestID"]);
                        dispatchReport.Dispatch.RequestType.ID = SQLUtil.ConvertInt(dr["RequestType"]);
                        dispatchReport.Dispatch.RequestType.Name = LookupManager.GetRequestTypeDesc(dispatchReport.Dispatch.RequestType.ID);
                        dispatchReport.Dispatch.Urgency.ID = SQLUtil.ConvertInt(dr["UrgencyID"]);
                        dispatchReport.Dispatch.Urgency.Name = LookupManager.GetUrgencyDesc(dispatchReport.Dispatch.Urgency.ID);
                        dispatchReport.Dispatch.ScheduleDate = SQLUtil.ConvertDateTime(dr["ScheduleDate"]); 
                        dispatchReport.Dispatch.EndDate = SQLUtil.ConvertDateTime(dr["EndDate"]);
                        dispatches.Add(dispatchReport);
                    }
                }
            }
            return dispatches;
        }
        /// <summary>
        /// 获取作业报告数量
        /// </summary>
        /// <param name="status">作业报告状态</param>
        /// <param name="urgency">派工单紧急程度</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <returns>作业报告数量</returns>
        public int QueryDispatchReportsCount(int status, int urgency, string filterField, string filterText)
        {
            sqlStr = "SELECT COUNT(r.ID) FROM tblDispatchReport r " +
                    " LEFT JOIN tblDispatch d ON d.ID = r.DispatchID " +
                    " LEFT JOIN tblDispatchJournal j ON d.ID = j.DispatchID " +
                    " WHERE 1=1 ";

            if (status != 0) sqlStr += " AND r.StatusID= " + status;
            else sqlStr += " AND r.StatusID <> " + DispatchReportInfo.DispatchReportStatus.Cancelled;
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取服务凭证列表
        /// </summary>
        /// <param name="status">服务凭证状态</param>
        /// <param name="urgency">派工单紧急程度</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>服务凭证列表</returns>
        public List<DispatchJournalInfo> QueryDispatchJournals(int status, int urgency, string filterField, string filterText, string sortField, bool sortDirection, int curRowNum = 0, int pageSize = 10)
        {
            List<DispatchJournalInfo> dispatchJournals = new List<DispatchJournalInfo>();
            sqlStr = "SELECT DISTINCT d.*,j.ID as DispatchJournalID, j.StatusID AS DispatchJournalStatusID ,r.ID AS DispatchReportID , r.StatusID AS DispatchReportStatusID " +
                " FROM tblDispatchJournal j " +
                " LEFT JOIN tblDispatch d ON d.ID = j.DispatchID " +
                " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                " WHERE 1=1 ";
            if (status != 0) sqlStr += " AND j.StatusID=" + status;
            else sqlStr += " AND j.StatusID <> " + DispatchJournalInfo.DispatchJournalStatus.Cancelled;
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            sqlStr += GenerateSortClause(sortDirection, sortField, "j.ID");

            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        DispatchJournalInfo dispatchJournal = new DispatchJournalInfo();
                        dispatchJournal.ID = SQLUtil.ConvertInt(dr["DispatchJournalID"]);
                        dispatchJournal.Status.ID = SQLUtil.ConvertInt(dr["DispatchJournalStatusID"]);
                        dispatchJournal.Status.Name = LookupManager.GetDispatchDocStatusDesc(dispatchJournal.Status.ID);

                        dispatchJournal.Dispatch.ID = SQLUtil.ConvertInt(dr["ID"]);
                        dispatchJournal.Dispatch.Request.ID = SQLUtil.ConvertInt(dr["RequestID"]);
                        dispatchJournal.Dispatch.RequestType.ID = SQLUtil.ConvertInt(dr["RequestType"]);
                        dispatchJournal.Dispatch.RequestType.Name = LookupManager.GetRequestTypeDesc(dispatchJournal.Dispatch.RequestType.ID);
                        dispatchJournal.Dispatch.Urgency.ID = SQLUtil.ConvertInt(dr["UrgencyID"]);
                        dispatchJournal.Dispatch.Urgency.Name = LookupManager.GetUrgencyDesc(dispatchJournal.Dispatch.Urgency.ID);
                        dispatchJournal.Dispatch.ScheduleDate = SQLUtil.ConvertDateTime(dr["ScheduleDate"]); 
                        dispatchJournal.Dispatch.EndDate = SQLUtil.ConvertDateTime(dr["EndDate"]);

                        dispatchJournals.Add(dispatchJournal);
                    }
                }
            }
            return dispatchJournals;
        }
        /// <summary>
        /// 获取服务凭证数量
        /// </summary>
        /// <param name="status">服务凭证状态</param>
        /// <param name="urgency">派工单紧急程度</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <returns>服务凭证数量</returns>
        public int QueryDispatchJournalsCount(int status, int urgency, string filterField, string filterText)
        {
            sqlStr = "SELECT COUNT(j.ID) FROM tblDispatchJournal j " +
                    " LEFT JOIN tblDispatch d ON d.ID = j.DispatchID " +
                    " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                    " WHERE 1=1 ";
            if (status != 0) sqlStr += " AND j.StatusID= " + status;
            else sqlStr += " AND j.StatusID <> " + DispatchJournalInfo.DispatchJournalStatus.Cancelled;
            if (urgency != 0) sqlStr += " AND d.UrgencyID=" + urgency;

            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                return GetCount(command);
            }
        }
        /// <summary>
        /// 根据请求id获取最新派工单信息
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <returns>最新派工单信息</returns>
        public DispatchInfo GetDispatchByRequestID(int requestID)
        {
            sqlStr = "SELECT top 1 d.*,j.ID as DispatchJournalID,r.ID as DispatchReportID ," +
                     " j.StatusID AS DispatchJournalStatusID,r.StatusID AS DispatchReportStatusID FROM tblDispatch d " +
                     " LEFT JOIN tblDispatchJournal j ON d.ID = j.DispatchID " +
                     " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                     " WHERE d.RequestID = @RequestID " +
                     " ORDER BY d.ID DESC ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = requestID;

                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new DispatchInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 根据派工单ID获取派工单信息
        /// </summary>
        /// <param name="id">派工单ID</param>
        /// <returns>派工单信息</returns>
        public DispatchInfo GetDispatchByID(int id)
        {
            sqlStr = "SELECT DISTINCT d.*,j.ID as DispatchJournalID,r.ID as DispatchReportID ," +
                " j.StatusID AS DispatchJournalStatusID,r.StatusID AS DispatchReportStatusID FROM tblDispatch d " +
                " LEFT JOIN tblDispatchJournal j ON d.ID = j.DispatchID " +
                " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                " WHERE d.ID = @ID ;";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;

                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new DispatchInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 根据用户获取派工单各状态数量
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="roleID">角色ID</param>
        /// <returns>派工单各状态数量</returns>
        public Dictionary<int, int> GetDispatchCount(int userID,int roleID)
        {
            sqlStr = "SELECT StatusID, Count(ID) " +
                " FROM tblDispatch " +
                " WHERE 1=1 ";
            if (roleID == BusinessObjects.Domain.UserRole.Admin)
                sqlStr += " AND EngineerID = " + userID;
             sqlStr += " GROUP BY StatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDictionary(command);
            }
        }
        /// <summary>
        /// 获取各状态作业报告数量
        /// </summary>
        /// <returns>各状态作业报告数量</returns>
        public Dictionary<int, int> GetDispatchReportCount()
        {
            sqlStr = "SELECT StatusID, Count(ID) FROM tblDispatchReport GROUP BY StatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDictionary(command);
            }
        }
        /// <summary>
        /// 获取各状态服务凭证数量
        /// </summary>
        /// <returns>获取各状态服务凭证数量</returns>
        public Dictionary<int, int> GetDispatchJournalCount()
        {
            sqlStr = "SELECT StatusID, Count(ID) FROM tblDispatchJournal GROUP BY StatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDictionary(command);
            }
        }
        /// <summary>
        /// 更新派工单状态
        /// </summary>
        /// <param name="dispatchID">派工单ID</param>
        /// <param name="status">状态ID</param>
        public void UpdateDispatchStatus(int dispatchID, int status)
        {
            sqlStr = "UPDATE tblDispatch SET StatusID=@StatusID " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = status;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新派工单结束日期
        /// </summary>
        /// <param name="dispatchID">派工单ID</param>
        public void UpdateDispatchEndDate(int dispatchID)
        {
            sqlStr = "UPDATE tblDispatch SET EndDate=@EndDate " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = DateTime.Now;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新派工单开始日期
        /// </summary>
        /// <param name="dispatchID">派工单ID</param>
        public void UpdateDispatchStartDate(int dispatchID)
        {
            sqlStr = "UPDATE tblDispatch SET StartDate=@StartDate " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = DateTime.Now;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchID;
                command.ExecuteNonQuery();
            }
        }

        #region "APP"
        /// <summary>
        /// 获取派工单列表
        /// </summary>
        /// <param name="userID">用户ID</param>
        /// <param name="status">派工单状态</param>
        /// <returns>派工单列表</returns>
        public List<DispatchInfo> GetDispatches(int userID,int status)
        {
            List<DispatchInfo> dispatches = new List<DispatchInfo>();
            sqlStr = "SELECT DISTINCT d.*,j.ID as DispatchJournalID,r.ID as DispatchReportID ," +
                " j.StatusID AS DispatchJournalStatusID,r.StatusID AS DispatchReportStatusID FROM tblDispatch d " +
                " LEFT JOIN tblDispatchJournal  j ON d.ID = j.DispatchID " +
                " LEFT JOIN tblDispatchReport r ON d.ID = r.DispatchID " +
                " WHERE 1=1 ";
            if (status != 0) sqlStr += " AND d.StatusID=" + status;
            sqlStr += " AND d.EngineerID = " + userID;
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        dispatches.Add(new DispatchInfo(dr));
                    }
                }
            }
            return dispatches;
        }
        /// <summary>
        /// 根据派工单状态获取派工单数量
        /// </summary>
        /// <param name="statusList">派工单状态</param>
        /// <param name="userId">用户ID</param>
        /// <returns>派工单数量</returns>
        public int GetDispatchCount4App(List<int> statusList, int userId = 0)
        {
            sqlStr = "SELECT COUNT(d.ID) FROM tblDispatch AS d " +
                     " WHERE d.StatusID IN (" + SQLUtil.ConvertToInStr(statusList) + ")";
            if (userId > 0) sqlStr += " AND d.EngineerID=" + userId;
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetCount(command);
            }
        }
        /// <summary>
        /// 根据请求ID获取派工单信息
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <returns>派工单信息</returns>
        public List<DispatchInfo> GetDispatchesByRequestID(int requestID)
        {
            List<DispatchInfo> dispatches = new List<DispatchInfo>();

            sqlStr = "SELECT d.* FROM tblDispatch d " +
                     " WHERE d.RequestID = @RequestID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = requestID;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        dispatches.Add(new DispatchInfo(dr).Copy4App());
                    }
                }
            }
            return dispatches;
        }
        /// <summary>
        /// 根据请求ID获取未完成派工单信息
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <returns>未完成派工单信息</returns>
        public List<DispatchInfo> GetOpenDispatchesByRequestID(int requestID)
        {
            List<DispatchInfo> dispatches = new List<DispatchInfo>();

            sqlStr = "SELECT d.* FROM tblDispatch d " +
                     " WHERE d.StatusID not in (@Cancelled,@Approved) AND d.RequestID = @RequestID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = requestID;
                command.Parameters.Add("@Cancelled", SqlDbType.Int).Value = DispatchInfo.Statuses.Cancelled;
                command.Parameters.Add("@Approved", SqlDbType.Int).Value = DispatchInfo.Statuses.Approved;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        dispatches.Add(new DispatchInfo(dr).Copy4App());
                    }
                }
            }
            return dispatches;
        }
        #endregion
    }
}

--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------DispatchJournalDao.cs----------------------------------------------------------------------------------------


using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 服务凭证dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class DispatchJournalDao:BaseDao
    {
        #region"tblDispatchJournal"
        /// <summary>
        /// 根据服务凭证id获取服务凭证信息
        /// </summary>
        /// <param name="dispatchJournalID">服务凭证ID</param>
        /// <returns>服务凭证信息</returns>
        public DispatchJournalInfo GetDispatchJournalByID(int dispatchJournalID)
        {
            sqlStr = "SELECT j.* FROM tblDispatchJournal j " +
                " WHERE j.ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchJournalID;
                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new DispatchJournalInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 根据派工单id获取服务凭证信息
        /// </summary>
        /// <param name="dispatchID">派工单id</param>
        /// <returns>服务凭证信息</returns>
        public DispatchJournalInfo GetDispatchJournalByDispatchID(int dispatchID)
        {
            sqlStr = "SELECT j.* FROM tblDispatchJournal j " +
                " WHERE j.DispatchID=@DispatchID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchID", SqlDbType.Int).Value = dispatchID;
                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new DispatchJournalInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 保存服务凭证信息
        /// </summary>
        /// <param name="dispatchJournal">服务凭证信息</param>
        /// <returns>服务凭证ID</returns>
        public int AddDispatchJournal(DispatchJournalInfo dispatchJournal)
        {
            sqlStr = "INSERT INTO tblDispatchJournal(DispatchID,FaultCode,JobContent,FujiComments,ResultStatusID, "+
                            " FollowProblem,Advice,UserName,UserMobile,Signed,StatusID) " +
                     " VALUES(@DispatchID,@FaultCode,@JobContent,@FujiComments,@ResultStatusID, " +
                            " @FollowProblem,@Advice,@UserName,@UserMobile,@Signed,@StatusID); " +
                     " SELECT @@IDENTITY";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchID", SqlDbType.Int).Value = dispatchJournal.Dispatch.ID;
                command.Parameters.Add("@FaultCode", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FaultCode);
                command.Parameters.Add("@JobContent", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.JobContent);
                command.Parameters.Add("@ResultStatusID", SqlDbType.Int).Value = dispatchJournal.ResultStatus.ID;
                command.Parameters.Add("@FollowProblem", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FollowProblem);
                command.Parameters.Add("@Advice", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.Advice);
                command.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = SQLUtil.EmptyStringToNull(dispatchJournal.UserName);
                command.Parameters.Add("@UserMobile", SqlDbType.VarChar).Value = SQLUtil.EmptyStringToNull(dispatchJournal.UserMobile);
                command.Parameters.Add("@Signed", SqlDbType.Bit).Value = dispatchJournal.Signed;
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = dispatchJournal.Status.ID;
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FujiComments);
                
                dispatchJournal.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return dispatchJournal.ID;
        }
        /// <summary>
        /// 修改服务凭证信息
        /// </summary>
        /// <param name="dispatchJournal">服务凭证信息</param>
        public void UpdateDispatchJournal(DispatchJournalInfo dispatchJournal)
        {
            sqlStr = "UPDATE tblDispatchJournal SET DispatchID = @DispatchID,FaultCode=@FaultCode,"+
                " FujiComments=@FujiComments,JobContent=@JobContent,ResultStatusID=@ResultStatusID,StatusID=@StatusID,FollowProblem=@FollowProblem," +
                " Advice=@Advice,UserName=@UserName,UserMobile=@UserMobile, Signed=@Signed";
            sqlStr += " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchID", SqlDbType.VarChar).Value = dispatchJournal.Dispatch.ID;
                command.Parameters.Add("@FaultCode", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FaultCode);
                command.Parameters.Add("@JobContent", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.JobContent);
                command.Parameters.Add("@ResultStatusID", SqlDbType.Int).Value = dispatchJournal.ResultStatus.ID;
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = dispatchJournal.Status.ID;
                command.Parameters.Add("@FollowProblem", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FollowProblem);
                command.Parameters.Add("@Advice", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.Advice);
                command.Parameters.Add("@UserName", SqlDbType.NVarChar).Value = SQLUtil.EmptyStringToNull(dispatchJournal.UserName);
                command.Parameters.Add("@UserMobile", SqlDbType.VarChar).Value = SQLUtil.EmptyStringToNull(dispatchJournal.UserMobile);
                command.Parameters.Add("@Signed", SqlDbType.Bit).Value = dispatchJournal.Signed;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchJournal.ID;
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchJournal.FujiComments);

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 审批服务凭证
        /// </summary>
        /// <param name="journalID">服务凭证ID</param>
        /// <param name="statusID">审批后服务凭证状态</param>
        /// <param name="resultStatusID">服务结果ID</param>
        /// <param name="followProblem">待跟进问题</param>
        /// <param name="fujiComments">审批备注</param>
        public void UpdateDispatchJournalStatus(int journalID, int statusID, int resultStatusID, string followProblem = "", string fujiComments = "")
        {
            sqlStr = "UPDATE tblDispatchJournal SET FujiComments=@FujiComments ,StatusID=@StatusID, ResultStatusID=@ResultStatusID,FollowProblem=@FollowProblem " +
                     " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(fujiComments);
                command.Parameters.Add("@ResultStatusID", SqlDbType.Int).Value = resultStatusID;
                command.Parameters.Add("@FollowProblem", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(followProblem);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = journalID;

                command.ExecuteNonQuery();
            }
        }
        #endregion
    }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------DispatchReportDao.cs----------------------------------------------------------------------------------------

using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 作业报告dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class DispatchReportDao:BaseDao
    {
        #region"tblDispatchReport"
        /// <summary>
        /// 根据作业报告ID获取作业报告信息
        /// </summary>
        /// <param name="dispatchReportID">作业报告ID</param>
        /// <returns>作业报告信息</returns>
        public DispatchReportInfo GetDispatchReportByID(int dispatchReportID)
        {
            sqlStr = "SELECT re.* FROM tblDispatchReport re " +
                " WHERE re.ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchReportID;
                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new DispatchReportInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 新增作业报告
        /// </summary>
        /// <param name="dispatchReport">作业报告信息</param>
        /// <returns>作业报告ID</returns>
        public int AddDispatchReport(DispatchReportInfo dispatchReport)
        {
            sqlStr = "INSERT INTO tblDispatchReport(DispatchID ,TypeID ,FaultCode ,"+
                " FaultDesc ,SolutionCauseAnalysis ,SolutionWay,IsPrivate, ServiceProvider,SolutionResultStatusID ," +
                " SolutionUnsolvedComments ,DelayReason,Comments,FujiComments ,StatusID, " +
                " EquipmentStatus, PurchaseAmount, ServiceScope, Result, IsRecall,AcceptanceDate) " +
                " VALUES(@DispatchID ,@TypeID ,@FaultCode ," +
                " @FaultDesc ,@SolutionCauseAnalysis , @SolutionWay,@IsPrivate,@ServiceProvider,@SolutionResultStatusID ," +
                " @SolutionUnsolvedComments ,@DelayReason,@Comments,@FujiComments,@StatusID,  " +
                " @EquipmentStatus, @PurchaseAmount, @ServiceScope, @Result, @IsRecall,@AcceptanceDate); " +
                " SELECT @@IDENTITY";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchID", SqlDbType.Int).Value = dispatchReport.Dispatch.ID;
                command.Parameters.Add("@TypeID", SqlDbType.Int).Value = dispatchReport.Type.ID;
                command.Parameters.Add("@FaultCode", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.FaultCode);
                command.Parameters.Add("@FaultDesc", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.FaultDesc);
                command.Parameters.Add("@SolutionCauseAnalysis", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.SolutionCauseAnalysis);
                command.Parameters.Add("@SolutionWay", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.SolutionWay);
                command.Parameters.Add("@IsPrivate", SqlDbType.Bit).Value = dispatchReport.IsPrivate;
                command.Parameters.Add("@ServiceProvider", SqlDbType.Int).Value = SQLUtil.ZeroToNull(dispatchReport.ServiceProvider.ID); 
                command.Parameters.Add("@SolutionResultStatusID", SqlDbType.Int).Value = dispatchReport.SolutionResultStatus.ID;
                command.Parameters.Add("@SolutionUnsolvedComments", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.SolutionUnsolvedComments);
                command.Parameters.Add("@DelayReason", SqlDbType.NVarChar).Value =  SQLUtil.TrimNull(dispatchReport.DelayReason);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.Comments);
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.FujiComments);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = dispatchReport.Status.ID;

                command.Parameters.Add("@EquipmentStatus", SqlDbType.Int).Value = dispatchReport.EquipmentStatus.ID;
                command.Parameters.Add("@PurchaseAmount", SqlDbType.Decimal).Value = SQLUtil.ConvertDouble(dispatchReport.PurchaseAmount);
                command.Parameters.Add("@ServiceScope", SqlDbType.Bit).Value = dispatchReport.ServiceScope;
                command.Parameters.Add("@Result", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.Result);
                command.Parameters.Add("@IsRecall", SqlDbType.Bit).Value = dispatchReport.IsRecall;
                command.Parameters.Add("@AcceptanceDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(dispatchReport.AcceptanceDate);

                dispatchReport.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return dispatchReport.ID;
        }
        /// <summary>
        /// 更新作业报告
        /// </summary>
        /// <param name="dispatchReport">作业报告信息</param>
        public void UpdateDispatchReport(DispatchReportInfo dispatchReport)
        {
            sqlStr = "UPDATE tblDispatchReport SET DispatchID=@DispatchID ,TypeID=@TypeID ," +
                " FaultCode=@FaultCode ,FaultDesc=@FaultDesc ," +
                " SolutionCauseAnalysis=@SolutionCauseAnalysis,SolutionWay=@SolutionWay," +
                " IsPrivate=@IsPrivate,ServiceProvider=@ServiceProvider,SolutionResultStatusID=@SolutionResultStatusID ," +
                " SolutionUnsolvedComments=@SolutionUnsolvedComments ,DelayReason=@DelayReason,Comments=@Comments," +
                " FujiComments=@FujiComments ,StatusID=@StatusID, " +
                " EquipmentStatus=@EquipmentStatus, PurchaseAmount=@PurchaseAmount, ServiceScope=@ServiceScope, Result= @Result, IsRecall=@IsRecall,AcceptanceDate=@AcceptanceDate";
            sqlStr += " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchID", SqlDbType.Int).Value = dispatchReport.Dispatch.ID;
                command.Parameters.Add("@TypeID", SqlDbType.Int).Value = dispatchReport.Type.ID;
                command.Parameters.Add("@FaultCode", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.FaultCode);
                command.Parameters.Add("@FaultDesc", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.FaultDesc);
                command.Parameters.Add("@SolutionCauseAnalysis", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.SolutionCauseAnalysis);
                command.Parameters.Add("@SolutionWay", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.SolutionWay);
                command.Parameters.Add("@IsPrivate", SqlDbType.Bit).Value = dispatchReport.IsPrivate;
                command.Parameters.Add("@ServiceProvider", SqlDbType.Int).Value = SQLUtil.ZeroToNull(dispatchReport.ServiceProvider.ID);
                command.Parameters.Add("@SolutionResultStatusID", SqlDbType.Int).Value = dispatchReport.SolutionResultStatus.ID;
                command.Parameters.Add("@SolutionUnsolvedComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.SolutionUnsolvedComments);
                command.Parameters.Add("@DelayReason", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.DelayReason);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.Comments);
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.FujiComments);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = dispatchReport.Status.ID;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = dispatchReport.ID;

                command.Parameters.Add("@EquipmentStatus", SqlDbType.Int).Value = dispatchReport.EquipmentStatus.ID;
                command.Parameters.Add("@PurchaseAmount", SqlDbType.Decimal).Value = SQLUtil.ConvertDouble(dispatchReport.PurchaseAmount);
                command.Parameters.Add("@ServiceScope", SqlDbType.Bit).Value = dispatchReport.ServiceScope;
                command.Parameters.Add("@Result", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(dispatchReport.Result);
                command.Parameters.Add("@IsRecall", SqlDbType.Bit).Value = dispatchReport.IsRecall;
                command.Parameters.Add("@AcceptanceDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(dispatchReport.AcceptanceDate);

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新作业报告审批信息
        /// </summary>
        /// <param name="reportID">作业报告ID</param>
        /// <param name="statusID">审批后作业报告状态</param>
        /// <param name="fujiComments">审批备注</param>
        /// <param name="solutionResultStatusID">作业报告结果ID</param>
        /// <param name="solutionUnsolvedComments">问题升级</param>
        public void UpdateDispatchReportStatus(int reportID, int statusID, string fujiComments = "", int solutionResultStatusID = 0, string solutionUnsolvedComments = "")
        {
            sqlStr = "UPDATE tblDispatchReport SET FujiComments=@FujiComments ,StatusID=@StatusID, SolutionResultStatusID=@SolutionResultStatusID, " +
                " SolutionUnsolvedComments=@SolutionUnsolvedComments" +
                     " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = statusID;
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(fujiComments);
                command.Parameters.Add("@SolutionResultStatusID", SqlDbType.Int).Value = solutionResultStatusID;
                command.Parameters.Add("@SolutionUnsolvedComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(solutionUnsolvedComments);
                command.Parameters.Add("@ID", SqlDbType.Int).Value = reportID;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 审批通过作业报告信息
        /// </summary>
        /// <param name="reportID">作业报告ID</param>
        /// <param name="solutionResultStatusID">作业报告结果ID</param>
        /// <param name="solutionUnsolvedComments">问题升级</param>
        /// <param name="fujiComments">审批备注</param>
        public void PassDispatchReport(int reportID, int solutionResultStatusID, string solutionUnsolvedComments, string fujiComments)
        {
            sqlStr = "UPDATE tblDispatchReport SET SolutionResultStatusID=@SolutionResultStatusID, FujiComments=@FujiComments ,StatusID=@StatusID, " +
                " SolutionUnsolvedComments=@SolutionUnsolvedComments " +
                     " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@FujiComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(fujiComments);
                command.Parameters.Add("@SolutionResultStatusID", SqlDbType.Int).Value = solutionResultStatusID;
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = DispatchReportInfo.DispatchReportStatus.Approved;
                command.Parameters.Add("@SolutionUnsolvedComments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(solutionUnsolvedComments);
                command.Parameters.Add("@ID", SqlDbType.Int).Value = reportID;

                command.ExecuteNonQuery();
            }
        }

        #endregion

        #region"tblReportAccessory"
        /// <summary>
        /// 根据作业报告ID获取零配件信息
        /// </summary>
        /// <param name="dispatchReportID">作业报告ID</param>
        /// <returns>零配件信息</returns>
        public List<ReportAccessoryInfo> GetReportAccessoriesByDispatchReportID(int dispatchReportID)
        {
            List<ReportAccessoryInfo> reportAccessories = new List<ReportAccessoryInfo>();
            sqlStr = "SELECT a.*,s.ID SupplierID,s.Name SupplierName FROM tblReportAccessory a " +
                " LEFT JOIN tblSupplier s ON s.ID=a.SupplierID "+
                " WHERE a.DispatchReportID=@DispatchReportID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchReportID", SqlDbType.Int).Value = dispatchReportID;
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        reportAccessories.Add(new ReportAccessoryInfo(dr));
                    }
                }
                return reportAccessories;
            }
        }
        /// <summary>
        /// 新增零配件信息
        /// </summary>
        /// <param name="reportAccessory">零配件信息信息</param>
        /// <returns>零配件信息ID</returns>
        public int AddReportAccessory(ReportAccessoryInfo reportAccessory)
        {
            sqlStr = "INSERT INTO tblReportAccessory(DispatchReportID, Name, SourceID, SupplierID, NewSerialCode, OldSerialCode, Qty, Amount) " +
                     " VALUES(@DispatchReportID, @Name, @SourceID, @SupplierID, @NewSerialCode, @OldSerialCode, @Qty, @Amount); " +
                     " SELECT @@IDENTITY";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DispatchReportID", SqlDbType.Int).Value = reportAccessory.DispatchReportID;
                command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(reportAccessory.Name);
                command.Parameters.Add("@SourceID", SqlDbType.Int).Value = reportAccessory.Source.ID;
                command.Parameters.Add("@SupplierID", SqlDbType.Int).Value = SQLUtil.ZeroToNull(reportAccessory.Supplier.ID);
                command.Parameters.Add("@NewSerialCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(reportAccessory.NewSerialCode);
                command.Parameters.Add("@OldSerialCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(reportAccessory.OldSerialCode);
                command.Parameters.Add("@Qty", SqlDbType.Int).Value = reportAccessory.Qty;
                command.Parameters.Add("@Amount", SqlDbType.Decimal).Value = reportAccessory.Amount;

                reportAccessory.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return reportAccessory.ID;
        }
        /// <summary>
        /// 根据零配件ID删除零配件
        /// </summary>
        /// <param name="reportAccessoryID">零配件ID</param>
        public void DeleteReportAccessory(int reportAccessoryID)
        {
            sqlStr = " DELETE FROM tblReportAccessory WHERE ID=@ID";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = reportAccessoryID;
                command.ExecuteNonQuery();
            }
        }

        #endregion
    }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------EquipmentDao.cs----------------------------------------------------------------------------------------


using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Manager;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 设备dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class EquipmentDao : BaseDao
    {

        #region "tblEquipment"
        /// <summary>
        /// 获取设备数量
        /// </summary>
        /// <param name="status">设备状态</param>
        /// <param name="warrantyStatus">维保状态</param>
        /// <param name="departmentID">科室</param>
        /// <param name="filterTextName">设备名称</param>
        /// <param name="filterTextSerialCode">设备序列号</param>
        /// <param name="useStatus">是否停用</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <returns>设备数量</returns>
        public int QueryEquipmentsCount(int status, int warrantyStatus, int departmentID, string filterTextName, string filterTextSerialCode,bool useStatus, string filterField, string filterText)
        {
            sqlStr = "SELECT COUNT(e.ID) FROM tblEquipment AS e " +
                    " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID";
            sqlStr += " WHERE 1=1 ";
            if (status == 0)
                sqlStr += " AND EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap;
            if (status > 0)
                sqlStr += " AND EquipmentStatusID = " + status;
            if (useStatus)
                sqlStr += " AND UsageStatusID = " + EquipmentInfo.UsageStatuses.Stop;
            if (warrantyStatus == EquipmentInfo.WarrantyStatuses.Active)
                sqlStr += " AND c.ContractID IS NOT NULL ";
            if (warrantyStatus == EquipmentInfo.WarrantyStatuses.Expired)
                sqlStr += " AND c.ContractID IS NULL ";
            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);
            if (departmentID >= 0)
                sqlStr += " AND e.DepartmentID = " + departmentID;
            if (!string.IsNullOrEmpty(filterTextName))
                sqlStr += " AND UPPER(e.Name) Like @FilterTextName ";
            if (!string.IsNullOrEmpty(filterTextSerialCode))
                sqlStr += " AND UPPER(e.SerialCode) Like @FilterTextSerialCode ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);
                if (!string.IsNullOrEmpty(filterTextName))
                    command.Parameters.Add("@FilterTextName", SqlDbType.NVarChar).Value = "%" + filterTextName.ToUpper() + "%";
                if (!string.IsNullOrEmpty(filterTextSerialCode))
                    command.Parameters.Add("@FilterTextSerialCode", SqlDbType.NVarChar).Value = "%" + filterTextSerialCode.ToUpper() + "%";

                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取设备列表
        /// </summary>
        /// <param name="status">设备状态</param>
        /// <param name="warrantyStatus">维保状态</param>
        /// <param name="departmentID">科室</param>
        /// <param name="filterTextName">设备名称</param>
        /// <param name="filterTextSerialCode">设备序列号</param>
        /// <param name="useStatus">是否停用</param>
        /// <param name="filterField">搜索条件</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段名</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>设备列表</returns>
        public List<EquipmentInfo> QueryEquipments(int status, int warrantyStatus, int departmentID, string filterTextName, string filterTextSerialCode,bool useStatus, string filterField, string filterText, string sortField, bool sortDirection, int curRowNum = 0, int pageSize = 0)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT e.*, s.Name AS SupplierName, su.Name AS ManufacturerName, c.ContractID FROM tblEquipment AS e " +
                     " LEFT JOIN tblSupplier AS s ON e.SupplierID=s.ID " +
                     " LEFT JOIN tblSupplier AS su ON e.ManufacturerID=su.ID " +
                    " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID" +
                     " WHERE 1=1 ";
            if (status == 0)
                sqlStr += " AND EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap;
            if (status > 0)
                sqlStr += " AND e.EquipmentStatusID = " + status;
            if (useStatus)
                sqlStr += " AND UsageStatusID = " + EquipmentInfo.UsageStatuses.Stop;
            if (warrantyStatus == EquipmentInfo.WarrantyStatuses.Active)
                sqlStr += " AND c.ContractID IS NOT NULL ";
            if (warrantyStatus == EquipmentInfo.WarrantyStatuses.Expired)
                sqlStr += " AND c.ContractID IS NULL ";
            if (!string.IsNullOrEmpty(filterText))
                sqlStr += GetFieldFilterClause(filterField);
            if (departmentID >= 0)
                sqlStr += " AND e.DepartmentID = " + departmentID;
            if (!string.IsNullOrEmpty(filterTextName))
                sqlStr += " AND UPPER(e.Name) Like @FilterTextName ";
            if (!string.IsNullOrEmpty(filterTextSerialCode))
                sqlStr += " AND UPPER(e.SerialCode) Like @FilterTextSerialCode ";

            sqlStr += GenerateSortClause(sortDirection, sortField, "e.ID");

            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);
                if (!string.IsNullOrEmpty(filterTextName))
                    command.Parameters.Add("@FilterTextName", SqlDbType.NVarChar).Value = "%" + filterTextName.ToUpper() + "%";
                if (!string.IsNullOrEmpty(filterTextSerialCode))
                    command.Parameters.Add("@FilterTextSerialCode", SqlDbType.NVarChar).Value = "%" + filterTextSerialCode.ToUpper() + "%";

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 获取设备信息
        /// </summary>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">一页几条数据</param>
        /// <returns>设备信息</returns>
        public List<EquipmentInfo> GetEquipments(string filterText, int curRowNum = 0, int pageSize = 0)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT e.*, s.Name AS ManufacturerName, c.ContractID, ct.ScopeID, ct.ScopeComments FROM tblEquipment AS e" +
                     " LEFT JOIN tblSupplier AS s ON e.ManufacturerID=s.ID " +
                     " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID" +
                     " LEFT JOIN tblContract AS ct on ct.ID = c.ContractID" +
                     " WHERE 1=1 AND EquipmentStatusID <> @EquipmentStatusID ";
            if (!string.IsNullOrEmpty(filterText))
                sqlStr += " AND ( UPPER(e.Name) LIKE @FilterText OR UPPER(e.EquipmentCode) LIKE @FilterText OR UPPER(e.SerialCode) LIKE @FilterText ) ";
            sqlStr += " ORDER BY ID Desc";
            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.NVarChar).Value = EquipmentInfo.EquipmentStatuses.Scrap;
                if (!string.IsNullOrEmpty(filterText))
                    command.Parameters.Add("@FilterText", SqlDbType.NVarChar).Value = "%" + filterText.ToUpper() + "%";

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 根据科室获取设备信息
        /// </summary>
        /// <param name="id">部门ID</param>
        /// <returns>设备信息</returns>
        public List<EquipmentInfo> GetEquipmentsByDepartmentID(int id)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT e.*, s.Name AS ManufacturerName FROM tblEquipment AS e" +
                     " LEFT JOIN tblSupplier AS s ON e.ManufacturerID=s.ID " +
                     " WHERE DepartmentID = @DepartmentID ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DepartmentID", SqlDbType.NVarChar).Value = id;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 根据计划服务类型获取设备信息
        /// </summary>
        /// <param name="type">计划服务类型</param>
        /// <returns>设备信息</returns>
        public List<EquipmentInfo> GetScheduledEquipments(string type)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = string.Format("SELECT * FROM tblEquipment WHERE {0}ID <> 0 AND EquipmentStatusID <> {1} ", type, EquipmentInfo.EquipmentStatuses.Scrap);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 根据设备id和请求类型获取已存在该类型计划服务请求的设备信息
        /// </summary>
        /// <param name="equipmentIds">设备ID</param>
        /// <param name="requestType">请求类型</param>
        /// <returns>设备信息</returns>
        public List<EquipmentInfo> CheckRequestExsist(List<int> equipmentIds, int requestType)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT DISTINCT e.* FROM tblRequest AS r " +
                     " LEFT JOIN jctRequestEqpt AS j ON j.RequestID = r.ID " +
                     " LEFT JOIN tblEquipment AS e ON e.ID = j.EquipmentID " +
                     " WHERE r.Source = @Source AND r.RequestType = @RequestType AND r.CloseDate IS NULL AND e.ID IN (" + SQLUtil.ConvertToInStr(equipmentIds) + ")";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Source", SqlDbType.Int).Value = RequestInfo.Sources.SysRequest;
                command.Parameters.Add("@RequestType", SqlDbType.Int).Value = requestType;
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 获取各个状态的设备数量
        /// </summary>
        /// <returns>各个状态的设备数量</returns>
        public Dictionary<int, int> GetEquipmentCount()
        {
            sqlStr = "SELECT EquipmentStatusID, Count(ID) FROM tblEquipment GROUP BY EquipmentStatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备ID获取设备信息
        /// </summary>
        /// <param name="id">设备ID</param>
        /// <returns>设备信息</returns>
        public EquipmentInfo GetEquipmentByID(int id)
        {
            sqlStr = "SELECT e.*, s.Name AS SupplierName, su.Name AS ManufacturerName, c.ContractID,ct.* FROM tblEquipment AS e " +
                     " LEFT JOIN tblSupplier AS s ON e.SupplierID=s.ID " +
                     " LEFT JOIN tblSupplier AS su ON e.ManufacturerID=su.ID " +
                     " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID" +
                     " LEFT JOIN tblContract AS ct on ct.ID = c.ContractID" +
                     " WHERE e.ID = @ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;
                using (DataTable dt = GetDataTable(command))
                {
                    DataRow dr = GetDataRow(command);
                    if (dr != null)
                        return new EquipmentInfo(dr);
                    else
                        return null;
                }
            }

        }
        /// <summary>
        /// 新增设备
        /// </summary>
        /// <param name="info">设备信息</param>
        /// <param name="user">用户信息</param>
        /// <returns>设备信息</returns>
        public EquipmentInfo AddEquipment(EquipmentInfo info, UserInfo user)
        {
            sqlStr = "INSERT INTO tblEquipment(EquipmentLevel,Name,EquipmentCode,SerialCode,ManufacturerID,EquipmentClass1,EquipmentClass2,EquipmentClass3,ServiceScope,Brand,Comments,ManufacturingDate, " +
                     " FixedAsset,AssetCode,AssetLevel,DepreciationYears,ValidityStartDate,ValidityEndDate, " +
                     " SaleContractName,SupplierID,PurchaseWay,PurchaseAmount,PurchaseDate,IsImport, " +
                     " DepartmentID,InstalSite,InstalDate,UseageDate,Accepted,AcceptanceDate,UsageStatusID,EquipmentStatusID,ScrapDate,MaintenancePeriod, " +
                     " MaintenanceTypeID,PatrolPeriod,PatrolTypeID,CorrectionPeriod,CorrectionTypeID,MandatoryTestStatus,MandatoryTestDate,RecallFlag, " +
                     " RecallDate,CreateDate,CreateUserID,UpdateDate,ResponseTimeLength ) " +
                     " VALUES(@EquipmentLevel,@Name,@EquipmentCode,@SerialCode,@ManufacturerID,@EquipmentClass1,@EquipmentClass2,@EquipmentClass3,@ServiceScope,@Brand,@Comments,@ManufacturingDate, " +
                     " @FixedAsset,@AssetCode,@AssetLevel,@DepreciationYears,@ValidityStartDate,@ValidityEndDate, " +
                     " @SaleContractName,@SupplierID,@PurchaseWay,@PurchaseAmount,@PurchaseDate,@IsImport, " +
                     " @DepartmentID,@InstalSite,@InstalDate,@UseageDate,@Accepted,@AcceptanceDate,@UsageStatusID,@EquipmentStatusID,@ScrapDate,@MaintenancePeriod, " +
                     " @MaintenanceTypeID,@PatrolPeriod,@PatrolTypeID,@CorrectionPeriod,@CorrectionTypeID,@MandatoryTestStatus,@MandatoryTestDate,@RecallFlag, " +
                     " @RecallDate,GETDATE(),@CreateUserID,GETDATE(),@ResponseTimeLength);" +
                     " SELECT @@IDENTITY";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentLevel", SqlDbType.Int).Value = info.EquipmentLevel.ID;
                command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Name);
                command.Parameters.Add("@EquipmentCode", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.EquipmentCode);
                command.Parameters.Add("@SerialCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.SerialCode);
                command.Parameters.Add("@ManufacturerID", SqlDbType.Int).Value = info.Manufacturer.ID;
                command.Parameters.Add("@EquipmentClass1", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass1.Code == null ? "00" : info.EquipmentClass1.Code);
                command.Parameters.Add("@EquipmentClass2", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass2.Code == null ? "00" : info.EquipmentClass2.Code);
                command.Parameters.Add("@EquipmentClass3", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass3.Code == null ? "00" : info.EquipmentClass3.Code);
                command.Parameters.Add("@ServiceScope", SqlDbType.Bit).Value = info.ServiceScope;
                command.Parameters.Add("@Brand", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Brand);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Comments);
                command.Parameters.Add("@ManufacturingDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ManufacturingDate);

                command.Parameters.Add("@FixedAsset", SqlDbType.Bit).Value = info.FixedAsset;
                command.Parameters.Add("@AssetCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.AssetCode);
                command.Parameters.Add("@AssetLevel", SqlDbType.Int).Value = info.AssetLevel.ID;
                command.Parameters.Add("@DepreciationYears", SqlDbType.Int).Value = info.DepreciationYears;
                command.Parameters.Add("@ValidityStartDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ValidityStartDate);
                command.Parameters.Add("@ValidityEndDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ValidityEndDate);

                command.Parameters.Add("@SaleContractName", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.SaleContractName);
                command.Parameters.Add("@SupplierID", SqlDbType.Int).Value = info.Supplier.ID;
                command.Parameters.Add("@PurchaseWay", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.PurchaseWay);
                command.Parameters.Add("@PurchaseAmount", SqlDbType.Decimal).Value = info.PurchaseAmount;
                command.Parameters.Add("@PurchaseDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.PurchaseDate);
                command.Parameters.Add("@IsImport", SqlDbType.Bit).Value = info.IsImport;

                command.Parameters.Add("@DepartmentID", SqlDbType.Int).Value = info.Department.ID;
                command.Parameters.Add("@InstalSite", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.InstalSite);
                command.Parameters.Add("@InstalDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.InstalDate);
                command.Parameters.Add("@UseageDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.UseageDate);
                command.Parameters.Add("@Accepted", SqlDbType.Bit).Value = info.Accepted;
                command.Parameters.Add("@AcceptanceDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.AcceptanceDate);
                command.Parameters.Add("@UsageStatusID", SqlDbType.Int).Value = info.UsageStatus.ID;
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.Int).Value = info.EquipmentStatus.ID;
                command.Parameters.Add("@ScrapDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ScrapDate);
                command.Parameters.Add("@MaintenancePeriod", SqlDbType.Int).Value = info.MaintenancePeriod;
                command.Parameters.Add("@MaintenanceTypeID", SqlDbType.Int).Value = info.MaintenanceType.ID;
                command.Parameters.Add("@PatrolPeriod", SqlDbType.Int).Value = info.PatrolPeriod;
                command.Parameters.Add("@PatrolTypeID", SqlDbType.Int).Value = info.PatrolType.ID;
                command.Parameters.Add("@CorrectionPeriod", SqlDbType.Int).Value = info.CorrectionPeriod;
                command.Parameters.Add("@CorrectionTypeID", SqlDbType.Int).Value = info.CorrectionType.ID;
                command.Parameters.Add("@MandatoryTestStatus", SqlDbType.Int).Value = info.MandatoryTestStatus.ID;
                command.Parameters.Add("@MandatoryTestDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.MandatoryTestDate);
                command.Parameters.Add("@RecallFlag", SqlDbType.Bit).Value = info.RecallFlag;
                command.Parameters.Add("@RecallDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.RecallDate);
                command.Parameters.Add("@CreateUserID", SqlDbType.Int).Value = user.ID;
                command.Parameters.Add("@ResponseTimeLength", SqlDbType.Int).Value = info.ResponseTimeLength;

                info.ID = SQLUtil.ConvertInt(command.ExecuteScalar());

                return info;
            }
        }
        /// <summary>
        /// 更新设备信息
        /// </summary>
        /// <param name="info">设备信息</param>
        /// <param name="user">用户信息</param>
        public void UpdateEquipment(EquipmentInfo info, UserInfo user)
        {
            sqlStr = "UPDATE tblEquipment SET EquipmentLevel = @EquipmentLevel, Name = @Name, EquipmentCode = @EquipmentCode, SerialCode = @SerialCode, " +
                     " ManufacturerID = @ManufacturerID, EquipmentClass1 = @EquipmentClass1, EquipmentClass2 = @EquipmentClass2, EquipmentClass3 = @EquipmentClass3,ServiceScope = @ServiceScope, " +
                     " Brand = @Brand,Comments = @Comments,ManufacturingDate = @ManufacturingDate, " +
                     " FixedAsset = @FixedAsset, AssetCode = @AssetCode,AssetLevel = @AssetLevel,DepreciationYears = @DepreciationYears, ValidityStartDate = @ValidityStartDate, ValidityEndDate = @ValidityEndDate, " +
                     " SaleContractName = @SaleContractName, SupplierID = @SupplierID, PurchaseWay = @PurchaseWay, PurchaseAmount = @PurchaseAmount, PurchaseDate = @PurchaseDate, IsImport = @IsImport, " +
                     " DepartmentID = @DepartmentID, InstalSite = @InstalSite, InstalDate = @InstalDate, UseageDate = @UseageDate, " +
                     " Accepted = @Accepted, AcceptanceDate = @AcceptanceDate, UsageStatusID = @UsageStatusID, EquipmentStatusID = @EquipmentStatusID, ScrapDate = @ScrapDate, MaintenancePeriod = @MaintenancePeriod, " +
                     " MaintenanceTypeID = @MaintenanceTypeID, PatrolPeriod = @PatrolPeriod, PatrolTypeID = @PatrolTypeID, CorrectionPeriod = @CorrectionPeriod, " +
                     " CorrectionTypeID = @CorrectionTypeID, MandatoryTestStatus = @MandatoryTestStatus, MandatoryTestDate = @MandatoryTestDate, RecallFlag = @RecallFlag,  " +
                     " RecallDate = @RecallDate, CreateUserID = @CreateUserID, UpdateDate = @UpdateDate, ResponseTimeLength = @ResponseTimeLength ";

            sqlStr += " WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {

                command.Parameters.Add("@ID", SqlDbType.Int).Value = info.ID;
                command.Parameters.Add("@EquipmentLevel", SqlDbType.Int).Value = info.EquipmentLevel.ID;
                command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Name);
                command.Parameters.Add("@EquipmentCode", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.EquipmentCode);
                command.Parameters.Add("@SerialCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.SerialCode);
                command.Parameters.Add("@ManufacturerID", SqlDbType.Int).Value = info.Manufacturer.ID;
                command.Parameters.Add("@EquipmentClass1", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass1.Code == null ? "00" : info.EquipmentClass1.Code);
                command.Parameters.Add("@EquipmentClass2", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass2.Code == null ? "00" : info.EquipmentClass2.Code);
                command.Parameters.Add("@EquipmentClass3", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.EquipmentClass3.Code == null ? "00" : info.EquipmentClass3.Code);
                command.Parameters.Add("@ServiceScope", SqlDbType.Bit).Value = info.ServiceScope;
                command.Parameters.Add("@Brand", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Brand);
                command.Parameters.Add("@Comments", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Comments);
                command.Parameters.Add("@ManufacturingDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ManufacturingDate);

                command.Parameters.Add("@FixedAsset", SqlDbType.Bit).Value = info.FixedAsset;
                command.Parameters.Add("@AssetCode", SqlDbType.VarChar).Value = SQLUtil.TrimNull(info.AssetCode);
                command.Parameters.Add("@AssetLevel", SqlDbType.Int).Value = info.AssetLevel.ID;
                command.Parameters.Add("@DepreciationYears", SqlDbType.Int).Value = info.DepreciationYears;
                command.Parameters.Add("@ValidityStartDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ValidityStartDate);
                command.Parameters.Add("@ValidityEndDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ValidityEndDate);

                command.Parameters.Add("@SaleContractName", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.SaleContractName);
                command.Parameters.Add("@SupplierID", SqlDbType.Int).Value = info.Supplier.ID;
                command.Parameters.Add("@PurchaseWay", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.PurchaseWay);
                command.Parameters.Add("@PurchaseAmount", SqlDbType.Decimal).Value = info.PurchaseAmount;
                command.Parameters.Add("@PurchaseDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.PurchaseDate);
                command.Parameters.Add("@IsImport", SqlDbType.Int).Value = info.IsImport;

                command.Parameters.Add("@DepartmentID", SqlDbType.Int).Value = info.Department.ID;
                command.Parameters.Add("@InstalSite", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.InstalSite);
                command.Parameters.Add("@InstalDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.InstalDate);
                command.Parameters.Add("@UseageDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.UseageDate);
                command.Parameters.Add("@Accepted", SqlDbType.Bit).Value = info.Accepted;
                command.Parameters.Add("@AcceptanceDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.AcceptanceDate);
                command.Parameters.Add("@UsageStatusID", SqlDbType.Int).Value = info.UsageStatus.ID;
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.Int).Value = info.EquipmentStatus.ID;
                command.Parameters.Add("@ScrapDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.ScrapDate);
                command.Parameters.Add("@MaintenancePeriod", SqlDbType.Int).Value = info.MaintenancePeriod;
                command.Parameters.Add("@MaintenanceTypeID", SqlDbType.Int).Value = info.MaintenanceType.ID;
                command.Parameters.Add("@PatrolPeriod", SqlDbType.Int).Value = info.PatrolPeriod;
                command.Parameters.Add("@PatrolTypeID", SqlDbType.Int).Value = info.PatrolType.ID;
                command.Parameters.Add("@CorrectionPeriod", SqlDbType.Int).Value = info.CorrectionPeriod;
                command.Parameters.Add("@CorrectionTypeID", SqlDbType.Int).Value = info.CorrectionType.ID;
                command.Parameters.Add("@MandatoryTestStatus", SqlDbType.Int).Value = info.MandatoryTestStatus.ID;
                command.Parameters.Add("@MandatoryTestDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.MandatoryTestDate);
                command.Parameters.Add("@RecallFlag", SqlDbType.Bit).Value = info.RecallFlag;
                command.Parameters.Add("@RecallDate", SqlDbType.DateTime).Value = SQLUtil.MinDateToNull(info.RecallDate);
                command.Parameters.Add("@CreateUserID", SqlDbType.Int).Value = user.ID;
                command.Parameters.Add("@ResponseTimeLength", SqlDbType.Int).Value = info.ResponseTimeLength;
                command.Parameters.Add("@UpdateDate", SqlDbType.DateTime).Value = DateTime.Now;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新设备上次保养日期
        /// </summary>
        /// <param name="info">设备信息</param>
        public void UpdateEquipmentLastMaintenanceCheck(EquipmentInfo info)
        {
            sqlStr = "UPDATE tblEquipment SET LastMaintenanceDate = @LastMaintenanceDate WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = info.ID;
                command.Parameters.Add("@LastMaintenanceDate", SqlDbType.DateTime).Value = DateTime.Now;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新设备上次校准日期
        /// </summary>
        /// <param name="info">设备信息</param>
        public void UpdateEquipmentLastCorrectionCheck(EquipmentInfo info)
        {
            sqlStr = "UPDATE tblEquipment SET LastCorrectionDate = @LastCorrectionDate WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = info.ID;
                command.Parameters.Add("@LastCorrectionDate", SqlDbType.DateTime).Value = DateTime.Now;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新设备上次巡检日期
        /// </summary>
        /// <param name="id">设备ID</param>
        /// <param name="lastDate">上次巡检日期</param>
        public void UpdateEquipmentLastPatrolCheck(int id,DateTime lastDate)
        {
            sqlStr = "UPDATE tblEquipment SET LastPatrolDate = @LastPatrolDate WHERE ID = @ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;
                command.Parameters.Add("@LastPatrolDate", SqlDbType.DateTime).Value = lastDate;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 检测序列号是否已存在
        /// </summary>
        /// <param name="id">设备ID</param>
        /// <param name="serialCode">设备序列号</param>
        /// <returns>序列号是否已存在</returns>
        public bool CheckSerialCode(int id, string serialCode)
        {
            sqlStr = "SELECT COUNT(ID) FROM tblEquipment WHERE ID <> @ID AND UPPER(SerialCode) = @SerialCode ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@SerialCode", SqlDbType.VarChar).Value = serialCode.ToUpper();
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;

                return SQLUtil.ConvertInt(command.ExecuteScalar()) > 0;
            }
        }
        /// <summary>
        /// 检测资产编号是否已存在
        /// </summary>
        /// <param name="id">设备</param>
        /// <param name="assetCode">资产编号</param>
        /// <returns>资产编号是否已存在</returns>
        public bool CheckAssetCode(int id, string assetCode)
        {
            sqlStr = "SELECT COUNT(ID) FROM tblEquipment WHERE ID <> @ID AND UPPER(AssetCode) = @AssetCode ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@AssetCode", SqlDbType.VarChar).Value = assetCode.ToUpper();
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;

                return SQLUtil.ConvertInt(command.ExecuteScalar()) > 0;
            }
        }

        /// <summary>
        /// 根据设备编号获取生命周期信息
        /// </summary>
        /// <param name="equipmentID">设备ID</param>
        /// <returns>生命周期信息</returns>
        public List<DispatchInfo> GetTimeLine(int equipmentID)
        {
            List<DispatchInfo> dispatchInfo = new List<DispatchInfo>();

            sqlStr = "SELECT dr.SolutionWay, dr.Comments, d.* FROM tblRequest AS r " +
                     " LEFT JOIN jctRequestEqpt AS jc ON jc.RequestID = r.ID " +
                     " LEFT JOIN tblDispatch AS d ON d.RequestID = r.ID " +
                     " LEFT JOIN tblDispatchReport AS dr ON dr.DispatchID = d.ID " +
                     " WHERE jc.EquipmentID = @EquipmentID AND d.EndDate IS NOT NULL " +
                     " ORDER BY d.EndDate DESC, d.ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentID", SqlDbType.Int).Value = equipmentID;
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        DispatchInfo info = new DispatchInfo();
                        
                        info.ID = SQLUtil.ConvertInt(dr["ID"]);
                        info.Request.ID = SQLUtil.ConvertInt(dr["RequestID"]);
                        info.RequestType.ID = SQLUtil.ConvertInt(dr["RequestType"]);
                        info.RequestType.Name = LookupManager.GetRequestTypeDesc(info.RequestType.ID);
                        info.ScheduleDate = SQLUtil.ConvertDateTime(dr["ScheduleDate"]);
                        info.EndDate = SQLUtil.ConvertDateTime(dr["EndDate"]);
                        info.DispatchReport.SolutionWay = SQLUtil.TrimNull(dr["SolutionWay"]);
                        info.DispatchReport.Comments = SQLUtil.TrimNull(dr["Comments"]);
                        dispatchInfo.Add(info);
                    }
                }
            }

            return dispatchInfo;
        }
        /// <summary>
        /// 获取所有设备厂商信息
        /// </summary>
        /// <returns>所有设备厂商信息</returns>
        public List<SupplierInfo> QueryManufacturer()
        {
            List<SupplierInfo> infos = new List<SupplierInfo>();

            sqlStr = "SELECT s.* FROM tblEquipment e " +
                    " LEFT JOIN tblSupplier s ON e.ManufacturerID = s.ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new SupplierInfo(dr));
                    }
                }
            }

            return infos;
        }
        #endregion

        #region'tblEquipmentCtl'
        /// <summary>
        /// 获取下一个资产编号序号
        /// </summary>
        /// <param name="date">当前日期</param>
        /// <returns>下一个资产编号序号</returns>
        public string GetNextAssetCode(string date)
        {
            int seq = 1;

            sqlStr = "Select Seq From tblEquipmentCtl WHERE Date = @Date";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Date", SqlDbType.VarChar).Value = date;

                Object objSeq = command.ExecuteScalar();

                if (objSeq == DBNull.Value || objSeq == null)
                {
                    command.CommandText = "INSERT INTO tblEquipmentCtl (Date, Seq) VALUES (@Date, 1)";
                }
                else
                {
                    seq = SQLUtil.ConvertInt(objSeq) + 1;
                    command.CommandText = "UPDATE tblEquipmentCtl SET Seq = Seq + 1 WHERE Date = @Date";
                }

                command.ExecuteNonQuery();
            }

            return "HRY" + date + seq.ToString("D3");
        }
        #endregion

        #region"DashBoard"

        /// <summary>
        /// 获取未报废的设备总数量、采购金额总数
        /// </summary>
        /// <returns>设备总数量、采购金额总数</returns>
        public Tuple<int, double> GetEquipmentInfoCounts()
        {
            sqlStr = "SELECT Count(ID) AS Counts,SUM(PurchaseAmount) AS Amounts FROM tblEquipment WHERE EquipmentStatusID <> @EquipmentStatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.NVarChar).Value = EquipmentInfo.EquipmentStatuses.Scrap;

                DataRow dr = GetDataRow(command);

                return new Tuple<int, double>(SQLUtil.ConvertInt(dr["Counts"]), SQLUtil.ConvertDouble(dr["Amounts"]));
            }
        }

        /// <summary>
        /// 获取开机率 
        /// </summary>
        /// <returns>开机率</returns>
        public double GetEquipmentBootRate()
        {
            sqlStr = "SELECT SUM(CASE WHEN UsageStatusID=@Running THEN 1 ELSE 0 END )*1.0/COUNT(ID) FROM tblEquipment WHERE EquipmentStatusID <> @EquipmentStatusID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("Running", SqlDbType.Int).Value = EquipmentInfo.UsageStatuses.Running;
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.NVarChar).Value = EquipmentInfo.EquipmentStatuses.Scrap;

                DataRow dr = GetDataRow(command);

                return SQLUtil.ConvertDouble(dr[0]);
            }
        }

        /// <summary>
        /// 获取各科室未报废设备数量、金额
        /// </summary>
        /// <returns>各科室设备数量、金额</returns>
        public DataTable GetEquipmentInfoCountsByDepartment()
        {
            sqlStr = "SELECT DepartmentID, Count(ID) AS Counts,SUM(PurchaseAmount) AS Amounts FROM tblEquipment WHERE EquipmentStatusID <> @EquipmentStatusID " +
                    " GROUP BY DepartmentID";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.NVarChar).Value = EquipmentInfo.EquipmentStatuses.Scrap;

                return GetDataTable(command);
            }
        }

        /// <summary>
        /// 获取折旧率(采购日期的下个月开始计算折旧率、若折旧率超过1 返回 1.否返回采购日期下月第一天与当前时间“月数”差值 比 预定折旧年限*12)
        /// </summary>
        /// <returns>折旧率</returns>
        public double GetEquipmentDepreciationRate()
        {
            string sqlDiffMonth = "(DATEDIFF(MONTH, PurchaseDate, GETDATE())-1)";

            sqlStr = " SELECT AVG(CASE WHEN  PurchaseDate IS NULL OR {0} <= 0 THEN 0.0 ELSE (CASE WHEN {0} >= (DepreciationYears*12) THEN 1.0 ELSE {0}*1.0/(DepreciationYears*12) END)END ) "+
                    " FROM tblEquipment WHERE EquipmentStatusID <> @EquipmentStatusID ";

            sqlStr = string.Format(sqlStr, sqlDiffMonth);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@EquipmentStatusID", SqlDbType.NVarChar).Value = EquipmentInfo.EquipmentStatuses.Scrap;

                return SQLUtil.ConvertDouble(GetDataRow(command)[0]);
            }
        }
        /// <summary>
        /// 获取设备当年各个类型的请求数量
        /// </summary>
        /// <param name="id">设备ID</param>
        /// <param name="year">年份</param>
        /// <returns>设备当年各个类型的请求数量</returns>
        public Dictionary<int, int> GetRequestCountByID(int id,int year)
        {
            sqlStr = "SELECT r.RequestType, COUNT(r.ID) FROM tblRequest AS r " +
                     " LEFT JOIN jctRequestEqpt AS jc ON jc.RequestID = r.ID " +
                     " WHERE DATEPART(YEAR,r.RequestDate) = @Year AND jc.EquipmentID = @EquipmentID " +
                     " GROUP BY r.RequestType";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("Year", SqlDbType.Int).Value = year;
                command.Parameters.Add("EquipmentID", SqlDbType.Int).Value = id;

                return GetDictionary(command);
            }
        }

        #endregion
    }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------ReportDao.cs----------------------------------------------------------------------------------------


using BusinessObjects.Aspect;
using BusinessObjects.Domain;
using BusinessObjects.Manager;
using BusinessObjects.Util;
using PostSharp.Extensibility;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 报表dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
    public class ReportDao : BaseDao
    {
        /// <summary>
        /// 获取设备数量报表验收日期sql语言
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备数量报表验收日期sql语言</returns>
        private string GetAcceptanceDateFilter(int year = 0, int month = 0)
        {
            string sqlStr = "";
            if (year > 0)
            {
                if (month > 0)
                {
                    if (year == DateTime.Today.Year)
                        sqlStr += " AND (e.AcceptanceDate IS NULL OR DATEPART(YEAR,e.AcceptanceDate) < " + year + " OR (DATEPART(YEAR,e.AcceptanceDate) = " + year + " AND DATEPART(MONTH,e.AcceptanceDate) <= " + month + "))";
                    else
                        sqlStr += " AND (DATEPART(YEAR,e.AcceptanceDate) < " + year + " OR (DATEPART(YEAR,e.AcceptanceDate) = " + year + " AND DATEPART(MONTH,e.AcceptanceDate) <= " + month + "))";
                }
                else
                {
                    if (year == DateTime.Today.Year)
                        sqlStr += " AND (e.AcceptanceDate IS NULL OR DATEPART(YEAR,e.AcceptanceDate) <= " + year + ")";
                    else
                        sqlStr += " AND DATEPART(YEAR,e.AcceptanceDate) <= " + year;
                }

                sqlStr += " AND (e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap + " OR DATEPART(YEAR,e.ScrapDate) > " + year + ")";
            }
            else
            {
                sqlStr += " AND e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap;
            }

            return sqlStr;
        }

        #region 设备数量
        /// <summary>
        /// 获取设备最早验收年份
        /// </summary>
        /// <returns>设备最早验收年份</returns>
        public int ReportEquipmentCountMinYear()
        {
            sqlStr = "SELECT Min(DATEPART(YEAR,e.AcceptanceDate)) FROM tblEquipment e";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取设备各个资产类型的数量
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备各个资产类型的数量</returns>
        public Dictionary<string, double> ReportEquipmentCountByPurchaseAmount(int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + ", COUNT(e.ID) " +
                    " FROM tblEquipment e" +
                    " WHERE 1 = 1 ";

            sqlStr += GetAcceptanceDateFilter(year, month);

            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 获取设备各个设备年限的数量
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备各个设备年限的数量</returns>
        public Dictionary<string, double> ReportEquipmentCountByUsageTime(int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + ", COUNT(e.ID) " +
                    " FROM tblEquipment e " +
                    " WHERE 1 = 1 ";

            sqlStr += GetAcceptanceDateFilter(year, month);

            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型获取设备数量报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备数量报表信息</returns>
        public DataTable ReportEquipmentCount(int type, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ", COUNT(e.ID) " +
                    " FROM tblEquipment e" +
                    " WHERE 1 = 1";

            sqlStr += GetAcceptanceDateFilter(year, month);

            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);

            if (type == ReportDimension.ManufacturerType)
                sqlStr += " ORDER BY COUNT(e.ID) DESC";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }
        #endregion

        #region 设备总数
        /// <summary>
        /// 根据年月获取设备总数
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备总数</returns>
        public int EquipmentCount(int year, int month)
        {
            sqlStr = "SELECT COUNT(e.ID) " +
                " FROM tblEquipment e " +
                " WHERE 1 = 1 ";
            if (month > 0)
            {
                sqlStr += "AND (DATEPART(YEAR,e.AcceptanceDate) < " + year + " OR " +
                            " (DATEPART(YEAR,e.AcceptanceDate) = " + year + " AND DATEPART(MONTH,e.AcceptanceDate) <= " + month + ")" +
                           ")";
                sqlStr += " AND (e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap + " OR (DATEPART(YEAR,e.ScrapDate) > " + year + "))";
            }
            else
            {
                if (year == DateTime.Today.Year)
                    sqlStr += " AND (e.AcceptanceDate IS NULL OR DATEPART(YEAR,e.AcceptanceDate) <= " + year + ")";
                else
                    sqlStr += " AND DATEPART(YEAR,e.AcceptanceDate) <= " + year;
                sqlStr += " AND (e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap + " OR DATEPART(YEAR,e.ScrapDate) > " + year + ")";
            }

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetCount(command);
            }
        }
        #endregion

        #region 故障时间
        /// <summary>
        /// 获取设备故障时间（天）报表信息
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>设备故障时间（天）报表信息</returns>
        public Dictionary<string, double> ReportEquipmentRepairTimeDay(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = " SELECT " + ReportDimension.GetRepairDaysSql("Hours") + ", count(ID)" +
                    " From (";
            sqlStr += " SELECT e.ID, SUM(" + ReportDimension.SqlRepairTimeHours + ") as Hours " +
                    " FROM tblRequest r " +
                    " INNER JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " INNER JOIN tblEquipment e ON j.EquipmentID = e.ID " +
                    " WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)" +
                    " GROUP BY e.ID";
            sqlStr += ") as temp" +
                    " GROUP BY " + ReportDimension.GetRepairDaysSql("Hours");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;

                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 获取设备故障时间（小时）报表信息
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>设备故障时间（小时）报表信息</returns>
        public Dictionary<string, double> ReportEquipmentRepairTimeHour(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = " SELECT " + ReportDimension.GetRepairHoursSql("Minutes") + ", count(ID)" +
                    " From (";
            sqlStr += " SELECT e.ID, SUM(" + ReportDimension.SqlRepairTimeMinutes + ") as Minutes" +
                    " FROM tblRequest r " +
                    " INNER JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " INNER JOIN tblEquipment e ON j.EquipmentID = e.ID " +
                    " WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)" +
                    " GROUP BY e.ID";
            sqlStr += ") as temp" +
                    " GROUP BY " + ReportDimension.GetRepairHoursSql("Minutes");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;

                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 故障率
        /// <summary>
        /// 获取故障率报表最早年限
        /// </summary>
        /// <returns>故障率报表最早年限</returns>
        public int ReportEquipmentRepairTimeRatioMinYear()
        {
            sqlStr = "SELECT Min(DATEPART(YEAR,RequestDate)) FROM tblRequest" +
                     " WHERE RequestType = " + RequestInfo.RequestTypes.Repair +
                     " AND StatusID <> " + RequestInfo.Statuses.Cancelled;

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetCount(command);
            }
        }
        /// <summary>
        /// “时间”维度获取设备故障时间
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>设备故障时间</returns>
        public int ReportEquipmentRepairTimeRatioByPurchaseDate(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = "SELECT SUM(" + ReportDimension.SqlRepairTimeHours + ")" +
                    " FROM tblRequest r " +
                    " WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;

                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取设备各个资产类型故障时间
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>设备各个资产类型故障时间</returns>
        public Dictionary<string, double> ReportEquipmentRepairTimeRatioByPurchaseAmount(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = " SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + ", SUM(" + ReportDimension.SqlRepairTimeHours + ")" +
                     " FROM tblRequest r " +
                     " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                     " LEFT JOIN tblEquipment e ON j.EquipmentID = e.ID ";
            sqlStr += " WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)";
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;

                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 获取设备各个设备年限故障时间
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>设备各个设备年限故障时间</returns>
        public Dictionary<string, double> ReportEquipmentRepairTimeRatioByUsageTime(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = " SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType)) + " , SUM(" + ReportDimension.SqlRepairTimeHours + ") " +
                     " FROM tblRequest r " +
                     " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                     " LEFT JOIN tblEquipment e ON j.EquipmentID = e.ID ";
            sqlStr += " WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)";
            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;

                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型获取设备故障率报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="dateFrom">年份</param>
        /// <param name="dateTo">月份</param>
        /// <returns>设备故障率报表信息</returns>
        public DataTable ReportEquipmentRepairTimeRatio(int type, DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = " SELECT " + ReportDimension.GetFieldDesc(type) + ", SUM(" + ReportDimension.SqlRepairTimeHours + ")" +
                     " FROM tblRequest r " +
                     " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                     " LEFT JOIN tblEquipment e ON j.EquipmentID = e.ID " ;
            sqlStr += "WHERE r.RequestType = " + RequestInfo.RequestTypes.Repair +
                    " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled +
                    " AND r.RequestDate < @EndDate And (r.CloseDate >= @StartDate OR r.CloseDate IS NULL)";
            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;
                return GetDataTable(command);
            }
        }
        #endregion

        #region 服务合格率
        /// <summary>
        /// 根据年份获取服务合格率报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <returns>服务合格率报表信息</returns>
        public List<Tuple<double, double, double, double>> QueryRequestFinishedRate(int year)
        {
            List<Tuple<double, double, double, double>> count = new List<Tuple<double, double, double, double>>();
            string monthOrYear = (year > 0) ? "MONTH" : "YEAR";

            sqlStr = "SELECT DATEPART({0},r.RequestDate), COUNT(r.ID), ";
            if (year > 0)
                sqlStr += " SUM(CASE WHEN r.StatusID = " + RequestInfo.Statuses.Close + " AND DATEPART(YEAR,r.RequestDate) = DATEPART(YEAR,r.CloseDate) AND DATEPART(MONTH,r.RequestDate) = DATEPART(MONTH,r.CloseDate) THEN 1 ELSE 0 END)  ";
            else
                sqlStr += " SUM(CASE WHEN r.StatusID = " + RequestInfo.Statuses.Close + " AND DATEPART(YEAR,r.RequestDate) = DATEPART(YEAR,r.CloseDate) THEN 1 ELSE 0 END) ";

            sqlStr += " FROM tblRequest r " +
                      " WHERE r.StatusID <>" + RequestInfo.Statuses.Cancelled;
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR ,r.RequestDate) = " + year;
            sqlStr += " GROUP BY DATEPART({0}, r.RequestDate)";

            sqlStr = string.Format(sqlStr, monthOrYear);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        count.Add(new Tuple<double, double, double, double>(SQLUtil.ConvertInt(dr[0]), SQLUtil.ConvertDouble(dr[1]), SQLUtil.ConvertDouble(dr[2]), SQLUtil.ConvertDouble(dr[1]) == 0 ? 0 : SQLUtil.ConvertDouble(Math.Round(SQLUtil.ConvertDouble(dr[2]) * 100 / SQLUtil.ConvertDouble(dr[1]), 2))));
                    }
                };
            }
            return count;
        }
        #endregion

        #region 请求响应时间
        /// <summary>
        /// 获取请求响应时间报表信息
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>请求响应时间报表信息</returns>
        public Dictionary<string, double> ResponseTime(int requestType, int year, int month)
        {
            sqlStr = "SELECT " + ReportDimension.GetResponseTimeSql() + " 'type',COUNT(r.ID) sum " +
                    " FROM tblRequest r " +
                    " WHERE r.RequestType =  " + requestType;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            sqlStr += " GROUP BY " + ReportDimension.GetResponseTimeSql();

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 设备采购价格
        /// <summary>
        /// 获取设备采购价格报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备采购价格报表信息</returns>
        public Dictionary<string, double> EquipmentCountByPurchaseAmount(int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " 'price', COUNT(e.ID) " +
                    " FROM tblEquipment e" +
                    " WHERE DATEPART(YEAR,e.AcceptanceDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,e.AcceptanceDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }

        #endregion

        #region 合同金额
        /// <summary>
        /// 获取服务合同金额报表信息
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>服务合同金额报表信息</returns>
        public Dictionary<string, double> ReportContractAmount(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = "SELECT " + ReportDimension.GetContractAmountSql("c.Amount") + " as type,COUNT(c.ID)" +
                    " FROM tblContract c  " +
                    " WHERE (c.StartDate between @StartDate And @EndDate) OR (c.EndDate between @StartDate and @EndDate) OR (c.StartDate < @StartDate And c.EndDate > @EndDate)" +
                    " GROUP BY " + ReportDimension.GetContractAmountSql("c.Amount");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;
                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 合同年限
        /// <summary>
        /// 获取服务合同年限报表信息
        /// </summary>
        /// <param name="dateFrom">开始时间</param>
        /// <param name="dateTo">结束时间</param>
        /// <returns>服务合同年限报表信息</returns>
        public Dictionary<string, double> ReportContractMonths(DateTime dateFrom, DateTime dateTo)
        {
            sqlStr = "SELECT " + ReportDimension.GetContractMonthSql("DATEDIFF(MONTH,GETDATE(), c.EndDate)") + " x,COUNT(c.ID)" +
                    " FROM tblContract c " +
                    " WHERE (c.StartDate between @StartDate And @EndDate) OR (c.EndDate between @StartDate and @EndDate) OR (c.StartDate < @StartDate And c.EndDate > @EndDate)" +
                    " GROUP BY " + ReportDimension.GetContractMonthSql("DATEDIFF(MONTH,GETDATE(), c.EndDate)");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = dateFrom;
                command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = dateTo;
                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 设备剩余折旧年限
        /// <summary>
        /// 获取设备剩余折旧年限报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备剩余折旧年限报表信息</returns>
        public Dictionary<string, double> ReportDepreciationYears(int year, int month)
        {
            sqlStr = "SELECT " + ReportDimension.GetDepreciationYearsSql("@ReportDate") + " type,count(e.ID)" +
                    " From tblEquipment e " +
                    " WHERE e.DepreciationYears > 0 AND e.AcceptanceDate <= @ReportDate And e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap +
                    " GROUP BY " + ReportDimension.GetDepreciationYearsSql("@ReportDate");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ReportDate", SqlDbType.DateTime).Value = new DateTime(year, month == 0 ? 12 : month, 1).AddMonths(1).AddDays(-1);

                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 设备折旧率
        /// <summary>
        /// 获取设备折旧率限报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备折旧率限报表信息</returns>
        public Dictionary<string, double> ReportDepreciationRate(int year, int month)
        {
            sqlStr = " SELECT " + ReportDimension.GetDepreciationRationSql("@ReportDate") + " type,count(e.ID)" +
                    " FROM tblEquipment e " +
                    " WHERE e.DepreciationYears > 0 AND e.AcceptanceDate <= @ReportDate And e.EquipmentStatusID <> " + EquipmentInfo.EquipmentStatuses.Scrap +
                    " GROUP BY " + ReportDimension.GetDepreciationRationSql("@ReportDate");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ReportDate", SqlDbType.DateTime).Value = new DateTime(year, month == 0 ? 12 : month, 1).AddMonths(1).AddDays(-1);

                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 设备检查人次
        /// <summary>
        /// 根据年份获取每月设备检查人次报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <returns>按月份统计设备检查人次报表信息</returns>
        public Dictionary<string, double> ReportServiceCountByAcceptanceMonth(int year)
        {
            sqlStr = "SELECT DATEPART(month,s.TransDate) ,count(ID) " +
                    " FROM tblServiceHis AS s" +
                    " WHERE DATEPART(year,s.TransDate) = " + year +
                    " GROUP BY DATEPART(month,s.TransDate)";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 获取每年的设备检查人次报表信息
        /// </summary>
        /// <returns>每年的设备检查人次报表信息</returns>
        public Dictionary<string, double> ReportServiecCountByAcceptanceYear()
        {
            sqlStr = "SELECT DATEPART(year,s.TransDate), count(ID) " +
                    " FROM tblServiceHis AS s" +
                    " GROUP BY DATEPART(year,s.TransDate)";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据资产类型获取设备检查人次报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <returns>设备检查人次报表信息</returns>
        public Dictionary<string, double> ReportServiceCountByPurchaseAmount(int year)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " 'price', count(s.ID) emps " +
                     " FROM tblServiceHis AS s " +
                     " LEFT JOIN tblEquipment AS e ON e.ID = s.EquipmentID";
            if (year > 0) sqlStr += " WHERE DATEPART(year,s.TransDate) = " + year;
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备年限获取设备检查人次报表信息
        /// </summary>
        /// <param name="year">年限</param>
        /// <returns>设备检查人次报表信息</returns>
        public Dictionary<string, double> ReportServiceCountByDepreciationYears(int year)
        {
            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + " 'price', count(s.ID) emps " +
                     " FROM tblServiceHis AS s " +
                     " LEFT JOIN tblEquipment AS e ON e.ID = s.EquipmentID";
            if (year > 0) sqlStr += " WHERE DATEPART(year,s.TransDate) = " + year;
            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型获取设备检查人次报表信息
        /// </summary>
        /// <param name="typeID">维度类型ID</param>
        /// <param name="year">年份</param>
        /// <returns>设备检查人次报表信息</returns>
        public DataTable ReportServiceCount(int typeID, int year)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(typeID) + ",Count(s.ID) as count" +
                     " FROM tblServiceHis AS s " +
                     " LEFT JOIN tblEquipment AS e ON e.ID = s.EquipmentID" ;
            if (year > 0) sqlStr += " WHERE DATEPART(year,s.TransDate) = " + year;
            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(typeID);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }

        #endregion

        #region 设备检查收入
        /// <summary>
        /// 获取设备检查收入报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备检查收入报表信息</returns>
        public Dictionary<string, double> ReportEquipmentCountByIncome(int year, int month)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql("s.Income") + " 'price', COUNT(s.EquipmentID) " +
                    " FROM (SELECT EquipmentID, SUM(Income) as Income " +
                           " FROM tblServiceHis " +
                           " WHERE DATEPART(YEAR, TransDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,TransDate ) = " + month;
            sqlStr += " GROUP BY EquipmentID) AS s " +
                      " GROUP BY " + ReportDimension.GetAmountSql("s.Income");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 零配件/备件花费
        /// <summary>
        /// 根据年份获取每月设备零配件花费总额报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <returns>每月设备零配件花费总额报表信息</returns>
        public Dictionary<string, double> ReportEquipmentExpenditureByAcceptanceMonth(int year)
        {
            sqlStr = "SELECT DATEPART(MONTH,di.ScheduleDate) ,SUM(ra.Qty * ra.Amount) " +
                    " FROM tblReportAccessory ra" +
                    " LEFT JOIN tblDispatchReport dr ON ra.DispatchReportID = dr.ID " +
                    " LEFT JOIN tblDispatch di ON dr.DispatchID = di.ID " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID = di.RequestID " +
                    " LEFT JOIN tblRequest r ON r.ID = re.RequestID " +
                    " LEFT JOIN tblEquipment e ON e.ID = re.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.OnSiteInspection +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.Inventory +
                    " AND dr.StatusID = " + DispatchInfo.DocStatus.Approved +
                    " AND DATEPART(YEAR,di.ScheduleDate) = " + year +
                    " GROUP BY DATEPART(MONTH,di.ScheduleDate)";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 获取每年设备零配件花费总额
        /// </summary>
        /// <returns>每年设备零配件花费总额</returns>
        public Dictionary<string, double> ReportEquipmentExpenditureByAcceptanceYear()
        {
            sqlStr = "SELECT DATEPART(YEAR,di.ScheduleDate), SUM(ra.Qty * ra.Amount) " +
                    " FROM tblReportAccessory ra" +
                    " LEFT JOIN tblDispatchReport dr ON ra.DispatchReportID = dr.ID " +
                    " LEFT JOIN tblDispatch di ON dr.DispatchID = di.ID " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID = di.RequestID " +
                    " LEFT JOIN tblRequest r ON r.ID = re.RequestID " +
                    " LEFT JOIN tblEquipment e ON e.ID = re.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.OnSiteInspection +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.Inventory +
                    " AND dr.StatusID = " + DispatchInfo.DocStatus.Approved +
                    " GROUP BY DATEPART(YEAR,di.ScheduleDate)";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据资产类型获取设备零配件花费总额报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备零配件花费总额报表信息</returns>
        public Dictionary<string, double> ReportEquipmentExpenditureByPurchaseAmount(int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " 'price', SUM(ra.Qty * ra.Amount) emps " +
                    " FROM tblReportAccessory ra" +
                    " LEFT JOIN tblDispatchReport dr ON ra.DispatchReportID = dr.ID " +
                    " LEFT JOIN tblDispatch di ON dr.DispatchID = di.ID " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID = di.RequestID " +
                    " LEFT JOIN tblRequest r ON r.ID = re.RequestID " +
                    " LEFT JOIN tblEquipment e ON e.ID = re.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.OnSiteInspection +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.Inventory +
                    " AND dr.StatusID = " + DispatchInfo.DocStatus.Approved;

            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,di.ScheduleDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,di.ScheduleDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备年限获取设备零配件花费总额报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备零配件花费总额报表信息</returns>
        public Dictionary<string, double> ReportEquipmentExpenditureByUsageTime(int year = 0, int month = 0)
        {
            sqlStr = " SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType)) + " 'type', SUM(ra.Qty * ra.Amount) " +
                    " FROM tblReportAccessory ra" +
                    " LEFT JOIN tblDispatchReport dr ON ra.DispatchReportID = dr.ID " +
                    " LEFT JOIN tblDispatch di ON dr.DispatchID = di.ID " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID = di.RequestID " +
                    " LEFT JOIN tblRequest r ON r.ID = re.RequestID " +
                    " LEFT JOIN tblEquipment e ON e.ID = re.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.OnSiteInspection +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.Inventory +
                    " AND dr.StatusID = " + DispatchInfo.DocStatus.Approved;

            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,di.ScheduleDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,di.ScheduleDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型获取设备零配件花费总额报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备零配件花费总额报表信息</returns>
        public DataTable ReportEquipmentExpenditure(int type, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ",SUM(ra.Qty * ra.Amount) " +
                    " FROM tblReportAccessory ra" +
                    " LEFT JOIN tblDispatchReport dr ON ra.DispatchReportID = dr.ID " +
                    " LEFT JOIN tblDispatch di ON dr.DispatchID = di.ID " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID = di.RequestID " +
                    " LEFT JOIN tblRequest r ON r.ID = re.RequestID " +
                    " LEFT JOIN tblEquipment e ON e.ID = re.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.OnSiteInspection +
                    " AND di.RequestType <> " + RequestInfo.RequestTypes.Inventory +
                    " AND dr.StatusID = " + DispatchInfo.DocStatus.Approved;
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,di.ScheduleDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,di.ScheduleDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }
        #endregion

        #region 设备总收入
        /// <summary>
        /// 获取每年/每月设备总收入报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <returns>每年/每月设备总收入报表信息</returns>
        public Dictionary<string, double> ReportEquipmentIncomeByAcceptanceDate(int year = 0)
        {
            sqlStr = "SELECT DATEPART({0},seh.TransDate) ,SUM(seh.Income) " +
                    " FROM tblServiceHis seh" +
                    " LEFT JOIN tblEquipment e ON seh.EquipmentID = e.ID " +
                    " WHERE 1=1 ";
            if (year > 0) sqlStr += " AND DATEPART(YEAR,seh.TransDate) = " + year;
            sqlStr += " GROUP BY DATEPART({0},seh.TransDate)";

            sqlStr = string.Format(sqlStr, year > 0 ? "MONTH" : "YEAR");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据资产类型获取设备总收入报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备总收入报表信息</returns>
        public Dictionary<string, double> ReportEquipmentIncomeByPurchaseAmount(int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " 'price', SUM(seh.Income) " +
                    " FROM tblServiceHis seh" +
                    " LEFT JOIN tblEquipment e ON seh.EquipmentID = e.ID " +
                    " WHERE 1=1 ";
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,seh.TransDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,seh.TransDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备年限获取设备总收入报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备总收入报表信息</returns>
        public Dictionary<string, double> ReportEquipmentIncomeByUsageTime(int year = 0, int month = 0)
        {

            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + " 'price', SUM(seh.Income) " +
                 " FROM tblServiceHis seh" +
                 " LEFT JOIN tblEquipment e ON seh.EquipmentID = e.ID " +
                 " WHERE 1=1 ";
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,seh.TransDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,seh.TransDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型获取设备总收入报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备总收入报表信息</returns>
        public DataTable ReportEquipmentIncome(int type, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ",SUM(seh.Income) " +
                    " FROM tblServiceHis seh" +
                    " LEFT JOIN tblEquipment e ON seh.EquipmentID = e.ID " ;

            sqlStr += " WHERE 1=1 ";
            if (year > 0)
                sqlStr += " AND DATEPART(YEAR,seh.TransDate) = " + year;
            if (month > 0)
                sqlStr += " AND DATEPART(MONTH,seh.TransDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }

        #endregion

        #region 请求数量
        /// <summary>
        /// 根据请求状态返回sql语句
        /// </summary>
        /// <param name="status">请求状态</param>
        /// <returns>sql语句</returns>
        private string GetRequestStatusSql(int status)
        {
            switch (status)
            {
                case RequestInfo.ReportStatus.Unclosed:
                    return " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled + " AND r.StatusID <> " + RequestInfo.Statuses.Close;
                case RequestInfo.ReportStatus.Unresponsed:
                    return " AND r.StatusID = " + RequestInfo.Statuses.New;
                case RequestInfo.ReportStatus.Closed:
                    return " AND r.StatusID = " + RequestInfo.Statuses.Close;
                case RequestInfo.ReportStatus.Responsed:
                    return " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled + " AND r.StatusID <> " + RequestInfo.Statuses.New;
                default:
                    return " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled;
            }
        }
        /// <summary>
        /// 根据请求类型返回sql语句
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <returns>sql语句</returns>
        private string GetRequestTypeSql(int requestType)
        {
            if (requestType != 0)
            {
                if (requestType == RequestInfo.RequestTypes.Recall)
                    return " AND r.IsRecall = 1 ";
                else
                    return " AND r.RequestType = " + requestType;
            }
            else return "";
        }
        /// <summary>
        /// 根据请求类型,请求状态和年份获取请求数量报表信息
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <returns>请求数量报表信息</returns>
        public Dictionary<string, double> RequestCountByDate(int requestType = 0, int status = 0, int year = 0)
        {
            sqlStr = "SELECT DATEPART({0},r.RequestDate), COUNT(r.ID)" +
                    " FROM tblRequest r " +
                    " WHERE 1=1 ";
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            sqlStr += GetRequestTypeSql(requestType);
            sqlStr += GetRequestStatusSql(status);
            sqlStr += " GROUP BY DATEPART({0},r.RequestDate)";

            sqlStr = string.Format(sqlStr, year > 0 ? "MONTH" : "YEAR");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据资产类型,请求类型,请求状态,年份和月份获取请求数量报表信息
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>请求数量报表信息</returns>
        public Dictionary<string, double> RequestCountByPurchaseAmount(int requestType, int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + ", COUNT(DISTINCT r.ID) " +
                " FROM tblRequest r " +
                " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                " WHERE 1=1 ";
            sqlStr += GetRequestTypeSql(requestType);
            sqlStr += GetRequestStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备年限,请求类型,请求状态,年份和月份获取请求数量报表信息
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>请求数量报表信息</returns>
        public Dictionary<string, double> RequestCountByUsageTime(int requestType, int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + " AS type, COUNT(DISTINCT r.ID) " +
                " FROM tblRequest r " +
                " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                " WHERE 1=1 ";
            sqlStr += GetRequestTypeSql(requestType);
            sqlStr += GetRequestStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型,请求类型,请求状态,年份和月份获取请求数量报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>请求数量报表信息</returns>
        public DataTable ReportRequestCount(int type, int requestType = 0, int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ",COUNT(DISTINCT r.ID) " +
                    " FROM tblRequest r " +
                    " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                    " WHERE 1 = 1";

            sqlStr += GetRequestTypeSql(requestType);
            sqlStr += GetRequestStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);
            if (type == ReportDimension.ManufacturerType)
                sqlStr += " ORDER BY COUNT(r.ID) DESC";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }
        #endregion

        #region 派工响应时间
        /// <summary>
        /// 根据年份,月份获取派工响应时间报表信息
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>派工响应时间报表信息</returns>
        public Dictionary<string, double> QueryResponseDispatchTime(int year, int month)
        {
            sqlStr = " SELECT " + ReportDimension.GetDispatchResponseTimeSql() + " , COUNT(d.ID) " +
                    " FROM tblDispatch d " +
                    " WHERE d.StatusID <> @Cancelled " +
                    " AND d.RequestType <> " + RequestInfo.RequestTypes.Others;
            if (year > 0) sqlStr += " AND DATEPART(YEAR,d.CreateDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,d.CreateDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetDispatchResponseTimeSql();
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Cancelled", SqlDbType.Int).Value = DispatchInfo.Statuses.Cancelled;
                command.Parameters.Add("@New", SqlDbType.Int).Value = DispatchInfo.Statuses.New;

                using (DataTable dt = GetDataTable(command))
                {
                    return GetStringDoubleDictionary(command);
                };
            }
        }
        #endregion

        #region 派工执行率
        /// <summary>
        /// 根据派工单状态返回sql语句
        /// </summary>
        /// <param name="status">派工单状态</param>
        /// <returns>sql语句</returns>
        private string GetDispatchStatusSql(int status)
        {
            switch (status)
            {
                case DispatchInfo.Statuses.New:
                    return " AND di.StatusID = " + status + " AND di.StatusID <> " + DispatchInfo.Statuses.Cancelled;
                case DispatchInfo.Statuses.Responded:
                    return " AND di.Status.ID <> " + DispatchInfo.Statuses.New + " AND di.StatusID <> " + DispatchInfo.Statuses.Cancelled;
                case DispatchInfo.Statuses.Approved:
                    return " AND di.StatusID <> " + DispatchInfo.Statuses.Cancelled + " AND di.StatusID = " + DispatchInfo.Statuses.Approved;
                default:
                    return " AND di.StatusID <> " + DispatchInfo.Statuses.Cancelled;
            }
        }
        /// <summary>
        /// 根据资产类型,派工单状态,年份和月份获取派工执行率报表信息
        /// </summary>
        /// <param name="status">派工单状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>派工执行率报表信息</returns>
        public Dictionary<string, double> DispatchResponseCountByPurchaseAmount(int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " 'price', COUNT(DISTINCT di.ID) " +
                " FROM tblDispatch di " +
                " LEFT JOIN tblRequest r ON di.RequestID = r.ID " +
                " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others;
            sqlStr += GetDispatchStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,di.CreateDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,di.CreateDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据设备年限,派工单状态,年份和月份获取派工执行率报表信息
        /// </summary>
        /// <param name="status">派工单状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>派工执行率报表信息</returns>
        public Dictionary<string, double> DispatchResponseCountByUsageTime(int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + " AS type, COUNT(DISTINCT di.ID) " +
                " FROM tblDispatch di " +
                " LEFT JOIN tblRequest r ON di.RequestID = r.ID " +
                " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others;
            sqlStr += GetDispatchStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,di.CreateDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,di.CreateDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据维度类型,派工单状态,年份和月份获取派工执行率报表信息
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="status">派工单状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>派工执行率报表信息</returns>
        public DataTable DispatchResponseCount(int type, int status = 0, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ",COUNT(DISTINCT di.ID) " +
                    " FROM tblDispatch di " +
                    " LEFT JOIN tblRequest r ON di.RequestID = r.ID " +
                    " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                    " WHERE di.RequestType <> " + RequestInfo.RequestTypes.Others;
            sqlStr += GetDispatchStatusSql(status);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,di.CreateDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,di.CreateDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);
            if (type == ReportDimension.ManufacturerType)
                sqlStr += " ORDER BY COUNT(di.ID) DESC";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }

        #endregion

        #region 服务时间达标率
        /// <summary>
        /// 根据是否超期和年份获取每年/每月请求数量
        /// </summary>
        /// <param name="isOverdue">是否超期</param>
        /// <param name="year">年份</param>
        /// <returns>服务时间达标率报表信息</returns>
        public Dictionary<string, double> ServiceCountByDate(bool isOverdue, int year = 0)
        {
            sqlStr = "SELECT DATEPART({0},r.RequestDate), COUNT(r.ID) " +
                " FROM tblRequest r " +
                " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                " WHERE r.StatusID <>" + RequestInfo.Statuses.Cancelled +
                " AND r.RequestType = " + RequestInfo.RequestTypes.Repair;
            if (isOverdue)
                sqlStr += " AND " + RequestInfo.Statuses.GetHisOverDueSQL();

            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            sqlStr += " GROUP BY DATEPART({0},r.RequestDate)";
            sqlStr = string.Format(sqlStr, year > 0 ? "MONTH" : "YEAR");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        #endregion

        #region 供应商维修/保养
        /// <summary>
        /// 根据请求类型和年份获取设备供应商维修/保养数量
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <returns>设备供应商维修/保养数量</returns>
        public Dictionary<string, double> RequestCount_supplierByDate(int requestType, int year)
        {
            sqlStr = "SELECT DATEPART({0},r.RequestDate),COUNT(DISTINCT r.ID)" +
                    " FROM tblDispatchReport dr " +
                    " LEFT JOIN tblDispatch di ON di.ID = dr.DispatchID " +
                    " LEFT JOIN tblRequest r ON di.RequestID = r.ID" +
                    " WHERE dr.ServiceProvider = " + DispatchReportInfo.ServiceProviders.Third_Party +
                    " AND di.StatusID = " + DispatchInfo.Statuses.Approved;
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            sqlStr += GetRequestTypeSql(requestType);
            sqlStr += " GROUP BY DATEPART({0},r.RequestDate)";

            sqlStr = string.Format(sqlStr, year > 0 ? "MONTH" : "YEAR");

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据请求类型,资产类型,年份和月份获取设备供应商维修/保养数量
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备供应商维修/保养数量</returns>
        public Dictionary<string, double> RequestCount_supplierByPurchaseAmount(int requestType, int year, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType)) + " , COUNT(DISTINCT r.ID) " +
                    " FROM tblDispatchReport dr " +
                    " LEFT JOIN tblDispatch di ON di.ID = dr.DispatchID " +
                    " LEFT JOIN tblRequest r ON di.RequestID = r.ID" +
                    " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                    " WHERE dr.ServiceProvider = " + DispatchReportInfo.ServiceProviders.Third_Party +
                    " AND di.StatusID = " + DispatchInfo.Statuses.Approved;
            sqlStr += GetRequestTypeSql(requestType);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;
            sqlStr += " GROUP BY " + ReportDimension.GetAmountSql(ReportDimension.GetFieldDesc(ReportDimension.AmountType));

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据请求类型,设备年限,年份和月份获取设备供应商维修/保养数量
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备供应商维修/保养数量</returns>
        public Dictionary<string, double> RequestCount_supplierByUsageTime(int requestType, int year, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0) + " AS type, COUNT(DISTINCT e.ID) " +
                    " FROM tblDispatchReport dr " +
                    " LEFT JOIN tblDispatch di ON di.ID = dr.DispatchID " +
                    " LEFT JOIN tblRequest r ON di.RequestID = r.ID" +
                     " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                    " WHERE dr.ServiceProvider = " + DispatchReportInfo.ServiceProviders.Third_Party +
                    " AND di.StatusID = " + DispatchInfo.Statuses.Approved;
            sqlStr += GetRequestTypeSql(requestType);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetUsageTimeSql(ReportDimension.GetFieldDesc(ReportDimension.UsageTimeType), 0);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetStringDoubleDictionary(command);
            }
        }
        /// <summary>
        /// 根据请求类型,维度类型,年份和月份获取设备供应商维修/保养数量
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备供应商维修/保养数量</returns>
        public DataTable RequestCount_supplier(int type, int requestType, int year = 0, int month = 0)
        {
            sqlStr = "SELECT " + ReportDimension.GetFieldDesc(type) + ",COUNT(DISTINCT r.ID) " +
                    " FROM tblDispatchReport dr " +
                    " LEFT JOIN tblDispatch di ON di.ID = dr.DispatchID " +
                    " LEFT JOIN tblRequest r ON di.RequestID = r.ID" +
                    " LEFT JOIN jctRequestEqpt j ON j.RequestID = r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID = j.EquipmentID " +
                    " WHERE dr.ServiceProvider = " + DispatchReportInfo.ServiceProviders.Third_Party +
                    " AND di.StatusID = " + DispatchInfo.Statuses.Approved;
            sqlStr += GetRequestTypeSql(requestType);
            if (year > 0) sqlStr += " AND DATEPART(YEAR,r.RequestDate) = " + year;
            if (month > 0) sqlStr += " AND DATEPART(MONTH,r.RequestDate) = " + month;

            sqlStr += " GROUP BY " + ReportDimension.GetFieldDesc(type);
            if (type == ReportDimension.ManufacturerType)
                sqlStr += " ORDER BY COUNT(r.ID) DESC";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                return GetDataTable(command);
            }
        }

        #endregion

    }
}



--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------RequestDao.cs----------------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using BusinessObjects.Aspect;
using PostSharp.Extensibility;
using BusinessObjects.Domain;
using System.Data.SqlClient;
using System.Data;
using BusinessObjects.Util;
using BusinessObjects.Manager;

namespace BusinessObjects.DataAccess
{
    /// <summary>
    /// 请求dao
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    [ConnectionAspect(AspectPriority = 2, AttributeTargetTypeAttributes = MulticastAttributes.Public)]
   public class RequestDao : BaseDao
   {
        #region "tblRequest"
        /// <summary>
        /// 根据搜索条件获取请求数量
        /// </summary>
        /// <param name="status">请求状态</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="isRecall">是否召回</param>
        /// <param name="department">科室编号</param>
        /// <param name="urgency">请求紧急程度</param>
        /// <param name="overDue">是否超期</param>
        /// <param name="filterField">搜索字段</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">截至日期</param>
        /// <returns>请求数量</returns>
        public int QueryRequestsCount(int status, int requestType,bool isRecall, int department, int urgency, bool overDue, string filterField, string filterText, string startDate, string endDate)
        {
            sqlStr = "SELECT COUNT(DISTINCT r.ID) FROM tblRequest AS r " +
                     " LEFT JOIN jctRequestEqpt re ON re.RequestID=r.ID" +
                     " LEFT JOIN tblEquipment e ON e.ID=re.EquipmentID" +
                     " LEFT JOIN tblDispatch d ON d.RequestID=r.ID";
            sqlStr += " WHERE 1=1 ";
            if (status == RequestInfo.Statuses.Unfinished)
                sqlStr += " AND  r.StatusID <> " + RequestInfo.Statuses.Cancelled + " AND r.StatusID <> " + RequestInfo.Statuses.Close;
            else if (status != 0)
                sqlStr += " AND r.StatusID = " + status;
            else sqlStr += " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled;
            if (department >= 0)
                sqlStr += " AND e.DepartmentID = " + department;
            if (urgency != 0)
                sqlStr += " AND r.PriorityID = " + urgency;
            if (overDue)
                sqlStr += " AND " + RequestInfo.Statuses.GetCurOverDueSQL();

            if (requestType > 0)
                sqlStr += " AND r.RequestType = " + requestType;
            if (!string.IsNullOrEmpty(startDate))
                sqlStr += " AND r.RequestDate >= @StartDate ";
            if (!string.IsNullOrEmpty(endDate))
                sqlStr += " AND r.RequestDate < @EndDate ";
            if (isRecall)
                sqlStr += " AND r.IsRecall = 1 ";
            if (!string.IsNullOrEmpty(filterText))
            {
                if (filterField.Equals("e.ID") || filterField.Equals("e.Name"))
                {
                    sqlStr += " AND EXISTS (SELECT j.EquipmentID FROM jctRequestEqpt j INNER JOIN tblEquipment as e ON j.EquipmentID = e.ID WHERE j.RequestID = r.ID";
                    sqlStr += GetFieldFilterClause(filterField);
                    sqlStr += ")";
                }
                else
                {
                    sqlStr += GetFieldFilterClause(filterField);
                }
            }

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                if (!string.IsNullOrEmpty(startDate))
                    command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(startDate);
                if (!string.IsNullOrEmpty(endDate))
                    command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(endDate).AddDays(1);

                return GetCount(command);
            }
        }
        /// <summary>
        /// 获取请求列表信息
        /// </summary>
        /// <param name="statusList">请求状态</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="isRecall">是否召回</param>
        /// <param name="department">科室编号</param>
        /// <param name="urgency">请求紧急程度</param>
        /// <param name="overDue">是否超期</param>
        /// <param name="filterField">搜索字段</param>
        /// <param name="filterText">搜索框填写内容</param>
        /// <param name="sortField">排序字段</param>
        /// <param name="sortDirection">排序方式</param>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">截至日期</param>
        /// <param name="curRowNum">当前页数第一个数据的位置</param>
        /// <param name="pageSize">每页展示数据条数</param>
        /// <param name="requestUserID">请求用户ID</param>
        /// <returns>请求列表信息</returns>
        public List<RequestInfo> QueryRequestsList(List<int> statusList, int requestType, bool isRecall, int department, int urgency, bool overDue, string filterField, string filterText, string sortField, bool sortDirection, string startDate, string endDate, int curRowNum = 0, int pageSize = 0, int requestUserID = 0)
        {
            List<RequestInfo> infos = new List<RequestInfo>();
            sqlStr = " SELECT DISTINCT r.*,CONVERT(VARCHAR(10),r.RequestDate,112), " + RequestInfo.Statuses.GetCurOverDueField() + 
                     " FROM tblRequest r  " +
                     " LEFT JOIN jctRequestEqpt re ON re.RequestID=r.ID" +
                     " LEFT JOIN tblEquipment e ON e.ID=re.EquipmentID" +
                     " LEFT JOIN tblDispatch d ON d.RequestID=r.ID" +
                     " WHERE 1=1 ";
            if (statusList != null && statusList.Count > 1) sqlStr += " AND r.StatusID IN (" + SQLUtil.ConvertToInStr(statusList) + ")";
            else if (statusList != null && statusList.Count == 1 && statusList[0] == RequestInfo.Statuses.Unfinished)
                sqlStr += " AND  r.StatusID <> "+RequestInfo.Statuses.Cancelled+" AND r.StatusID <> "+RequestInfo.Statuses.Close;
            else if (statusList != null && statusList.Count == 1 && statusList[0] != 0)
                sqlStr += " AND r.StatusID = " + statusList[0];
            else sqlStr += " AND r.StatusID <> " + RequestInfo.Statuses.Cancelled;
            if (department >= 0)
                sqlStr += " AND e.DepartmentID = " + department;
            if (urgency != 0)
                sqlStr += " AND r.PriorityID = " + urgency;
            if (overDue)
                sqlStr += " AND "+RequestInfo.Statuses.GetCurOverDueSQL();

            if (!string.IsNullOrEmpty(startDate))
                sqlStr += " AND r.RequestDate >= @StartDate ";
            if (!string.IsNullOrEmpty(endDate))
                sqlStr += " AND r.RequestDate < @EndDate ";
            if (requestType > 0)
                sqlStr += " AND r.RequestType = " + requestType;
            if (isRecall)
                sqlStr += " AND r.IsRecall = 1 ";
            if (requestUserID != 0)
                sqlStr += " AND r.RequestUserID = " + requestUserID;
            if (!string.IsNullOrEmpty(filterText))
            {
                if (filterField.Equals("e.ID") || filterField.Equals("e.Name"))
                {
                    sqlStr += " AND EXISTS (SELECT j.EquipmentID FROM jctRequestEqpt j INNER JOIN tblEquipment as e ON j.EquipmentID = e.ID WHERE j.RequestID = r.ID";
                    sqlStr += GetFieldFilterClause(filterField);
                    sqlStr += ")";
                }
                else
                {
                    sqlStr += GetFieldFilterClause(filterField);
                }               
            }
            if (sortField.Equals("init"))
                sqlStr += string.Format(" ORDER BY {0} DESC, r.RequestType ASC, CONVERT(VARCHAR(10),r.RequestDate,112) DESC,r.StatusID, r.ID ", RequestInfo.Statuses.GetCurOverDueField());
            else
                sqlStr += GenerateSortClause(sortDirection, sortField, "r.ID");
            sqlStr = AppendLimitClause(sqlStr, curRowNum, pageSize);

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                if (!String.IsNullOrEmpty(filterText))
                    AddFieldFilterParam(command, filterField, filterText);

                if (!string.IsNullOrEmpty(startDate))
                    command.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(startDate);
                if (!string.IsNullOrEmpty(endDate))
                    command.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = SQLUtil.ConvertDateTime(endDate).AddDays(1);
                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new RequestInfo(dr));
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 根据请求ID获取请求信息
        /// </summary>
        /// <param name="id">请求ID</param>
        /// <returns>请求信息</returns>
        public RequestInfo QueryRequestByID(int id)
        {
            sqlStr = "SELECT r.* From tblRequest as r " +
                    " WHERE r.ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;

                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new RequestInfo(dr);
                else
                    return null;
            }
        }
        /// <summary>
        /// 新增请求
        /// </summary>
        /// <param name="info">请求信息</param>
        /// <returns>请求ID</returns>
        public int AddRequest(RequestInfo info)
        {
            sqlStr = "INSERT INTO tblRequest(Source,RequestType,RequestUserID,RequestUserName,RequestUserMobile," +
                     " Subject,EquipmentStatus,FaultTypeID,FaultDesc,StatusID,DealTypeID,PriorityID,RequestDate,LastStatusID,IsRecall) " +
                     " VALUES(@Source,@RequestType,@RequestUserID,@RequestUserName,@RequestUserMobile," +
                     " @Subject,@EquipmentStatus,@FaultTypeID,@FaultDesc,@StatusID,@DealTypeID,@PriorityID,@RequestDate,@LastStatusID,@IsRecall); " +
                     " SELECT @@IDENTITY";
                     
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Source", SqlDbType.Int).Value = info.Source.ID;
                command.Parameters.Add("@RequestType", SqlDbType.Int).Value = info.RequestType.ID;
                command.Parameters.Add("@RequestUserID", SqlDbType.Int).Value = SQLUtil.ZeroToNull(info.RequestUser.ID);
                command.Parameters.Add("@RequestUserName", SqlDbType.NVarChar).Value = SQLUtil.EmptyStringToNull(info.RequestUser.Name);
                command.Parameters.Add("@RequestUserMobile", SqlDbType.VarChar).Value = SQLUtil.EmptyStringToNull(info.RequestUser.Mobile);
                command.Parameters.Add("@EquipmentStatus", SqlDbType.Int).Value = info.MachineStatus.ID;
                command.Parameters.Add("@Subject", SqlDbType.NVarChar).Value = info.EquipmentName + '-' + info.RequestType.Name;
                command.Parameters.Add("@FaultTypeID", SqlDbType.Int).Value = SQLUtil.ZeroToNull(info.FaultType.ID);
                command.Parameters.Add("@FaultDesc", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.FaultDesc);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = info.Status.ID;
                command.Parameters.Add("@DealTypeID", SqlDbType.Int).Value = info.DealType.ID;
                command.Parameters.Add("@PriorityID", SqlDbType.Int).Value = info.Priority.ID;
                command.Parameters.Add("@RequestDate", SqlDbType.DateTime).Value = info.RequestDate == DateTime.MinValue ? DateTime.Now : info.RequestDate;
                command.Parameters.Add("@LastStatusID", SqlDbType.Int).Value = info.LastStatus.ID;
                command.Parameters.Add("@IsRecall", SqlDbType.Bit).Value = info.IsRecall;

                info.ID = SQLUtil.ConvertInt(command.ExecuteScalar());
            }
            return info.ID;
        }
        /// <summary>
        /// 更新请求信息
        /// </summary>
        /// <param name="info">请求信息</param>
        public void UpdateRequest(RequestInfo info)
        {
            sqlStr = " UPDATE tblRequest SET Subject=@Subject,EquipmentStatus=@EquipmentStatus,FaultTypeID=@FaultTypeID,FaultDesc=@FaultDesc,StatusID=@StatusID, " +
                     " LastStatusID=@LastStatusID,DealTypeID=@DealTypeID,PriorityID=@PriorityID,IsRecall=@IsRecall " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Subject", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.Subject);
                command.Parameters.Add("@EquipmentStatus", SqlDbType.Int).Value = info.MachineStatus.ID;
                command.Parameters.Add("@FaultTypeID", SqlDbType.Int).Value = SQLUtil.ZeroToNull(info.FaultType.ID);
                command.Parameters.Add("@FaultDesc", SqlDbType.NVarChar).Value = SQLUtil.TrimNull(info.FaultDesc);
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = info.Status.ID;
                command.Parameters.Add("@LastStatusID", SqlDbType.Int).Value = info.LastStatus.ID;
                command.Parameters.Add("@DealTypeID", SqlDbType.Int).Value = info.DealType.ID;
                command.Parameters.Add("@PriorityID", SqlDbType.Int).Value = info.Priority.ID;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = info.ID;
                command.Parameters.Add("@IsRecall", SqlDbType.Bit).Value = info.IsRecall;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新上次请求状态
        /// </summary>
        /// <param name="id">请求ID</param>
        /// <param name="lastStatusID">上次请求状态ID</param>
        public void UpdateLastStatusID(int id, int lastStatusID)
        {
            sqlStr = " UPDATE tblRequest SET LastStatusID=@LastStatusID " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@LastStatusID", SqlDbType.Int).Value = lastStatusID;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新择期日期
        /// </summary>
        /// <param name="id">请求ID</param>
        /// <param name="selectiveDate">择期日期</param>
        public void UpdateSelectiveDate(int id, DateTime selectiveDate)
        {
            sqlStr = " UPDATE tblRequest SET SelectiveDate=@SelectiveDate " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@SelectiveDate", SqlDbType.DateTime).Value = selectiveDate;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = id;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新请求状态和首次响应时间
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <param name="status">请求状态</param>
        public void UpdateRequest4DispatchResponse(int requestID, int status)
        {
            sqlStr = "UPDATE tblRequest SET StatusID=@StatusID,ResponseDate=@ResponseDate " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = status;
                command.Parameters.Add("@ResponseDate", SqlDbType.DateTime).Value = DateTime.Now;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = requestID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新请求状态
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <param name="status">请求状态</param>
        public void UpdateRequestStatus(int requestID, int status)
        {
            sqlStr = "UPDATE tblRequest SET StatusID=@StatusID WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StatusID", SqlDbType.Int).Value = status;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = requestID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新请求结束日期
        /// </summary>
        /// <param name="requestID">请求ID</param>
        public void UpdateRequestCloseDate(int requestID)
        {
            sqlStr = "UPDATE tblRequest SET CloseDate=@CloseDate WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@CloseDate", SqlDbType.DateTime).Value = DateTime.Now;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = requestID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 更新请求首次派工时间,首次分配时间
        /// </summary>
        /// <param name="requestID">请求ID</param>
        /// <param name="distributeDate">首次分配时间</param>
        public void UpdateRequestDistributeDate(int requestID, DateTime distributeDate)
        {
            sqlStr = "UPDATE tblRequest SET DistributeDate=@DistributeDate,DispatchDate=@DispatchDate " +
                     " WHERE ID=@ID ";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@DistributeDate", SqlDbType.DateTime).Value = distributeDate;
                command.Parameters.Add("@DispatchDate", SqlDbType.DateTime).Value = DateTime.Now;
                command.Parameters.Add("@ID", SqlDbType.Int).Value = requestID;
                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 根据请求类型获取请求数量
        /// </summary>
        /// <param name="statusIdList">请求类型</param>
        /// <returns>请求数量</returns>
        public int GetRequestCount4App(List<int> statusIdList)
        {
            sqlStr = "SELECT COUNT(r.ID) FROM tblRequest AS r " +
                     " WHERE 1=1 ";
            if (statusIdList[0] == RequestInfo.Statuses.Unfinished)
                sqlStr += " AND r.StatusID != -1 AND r.StatusID != 99 ";
            else
                sqlStr += " AND r.StatusID IN (" + SQLUtil.ConvertToInStr(statusIdList) + ")";
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {

                return GetCount(command);
            }
        }
        #endregion

        #region "jctRequestEqpt"
        /// <summary>
        /// 新增请求设备关联信息
        /// </summary>
        /// <param name="requestId">请求ID</param>
        /// <param name="equipmentId">设备ID</param>
        public void AddRequestEqpt(int requestId,int equipmentId)
        {
            sqlStr = "INSERT INTO jctRequestEqpt (RequestID,EquipmentID) " +
                     " VALUES(@RequestID,@EquipmentID); " ;
            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = requestId;
                command.Parameters.Add("@EquipmentID", SqlDbType.Int).Value = equipmentId;

                command.ExecuteNonQuery();
            }
        }
        /// <summary>
        /// 获取请求关联设备信息
        /// </summary>
        /// <param name="requestId">请求ID</param>
        /// <returns>请求关联设备信息</returns>
        public List<EquipmentInfo> GetRequestEgpts(int requestId)
        {
            List<EquipmentInfo> infos = new List<EquipmentInfo>();

            sqlStr = "SELECT e.*, s.Name AS SupplierName, su.Name AS ManufacturerName, c.ContractID,ct.ScopeID,ct.ScopeComments FROM jctRequestEqpt j " +
                    " INNER JOIN tblEquipment AS e ON e.ID = j.EquipmentID" +
                     " LEFT JOIN tblSupplier AS s ON e.SupplierID=s.ID " +
                     " LEFT JOIN tblSupplier AS su ON e.ManufacturerID=su.ID " +
                     " LEFT JOIN v_ActiveContract AS c on c.EquipmentID = e.ID" +
                     " LEFT JOIN tblContract AS ct on ct.ID = c.ContractID" +
                     " WHERE j.RequestID = @RequestID ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@RequestID", SqlDbType.Int).Value = requestId;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        infos.Add(new EquipmentInfo(dr));                     
                    }
                }
            }

            return infos;
        }
        /// <summary>
        /// 获取请求关联设备信息
        /// </summary>
        /// <param name="requestIds">请求ID</param>
        /// <returns>请求关联设备信息</returns>
        public List<RequestEqptInfo> GetRequestEgpts(List<int> requestIds)
        {
            List<RequestEqptInfo> infos = new List<RequestEqptInfo>();

            sqlStr = "SELECT e.ID ,e.Name ,e.DepartmentID ,e.SerialCode , j.RequestID FROM jctRequestEqpt j " +
                    " INNER JOIN tblEquipment AS e ON e.ID = j.EquipmentID" +
                    " WHERE j.RequestID in (" + (string.IsNullOrEmpty(SQLUtil.ConvertToInStr(requestIds)) ? "null" : SQLUtil.ConvertToInStr(requestIds)) + ") ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                using (DataTable dt = GetDataTable(command))
                {
                    RequestEqptInfo info = null;
                    foreach (DataRow dr in dt.Rows)
                    {
                        info = new RequestEqptInfo();
                        info.RequestID = SQLUtil.ConvertInt(dr["RequestID"]);
                        info.Equipment.ID = SQLUtil.ConvertInt(dr["ID"]);
                        info.Equipment.Name = SQLUtil.TrimNull(dr["Name"]);
                        info.Equipment.SerialCode = SQLUtil.TrimNull(dr["SerialCode"]);
                        info.Equipment.Department.ID = SQLUtil.ConvertInt(dr["DepartmentID"]);
                        info.Equipment.Department.Name = Manager.LookupManager.GetDepartmentDesc(info.Equipment.Department.ID);
                        infos.Add(info);
                    }
                }
            }

            return infos;
        }

        #endregion

        #region "Dashboard"

        /// <summary>
        /// 获取今日报修请求
        /// </summary>
        /// <returns>今日报修请求</returns>
        public List<RequestInfo> GetTodayRepair(DateTime today)
        {
            List<RequestInfo> repairs = new List<RequestInfo>();
            sqlStr = "SELECT r.* FROM tblRequest r " +
                    " LEFT JOIN jctRequestEqpt re ON re.RequestID=r.ID " +
                    " LEFT JOIN tblEquipment e ON e.ID=re.EquipmentID " +
                    " WHERE r.RequestDate BETWEEN @Today AND @Tomorrow" +
                    " AND r.RequestType= @RequestType ORDER BY RequestDate DESC, r.ID";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@Today", SqlDbType.DateTime).Value = today;
                command.Parameters.Add("@Tomorrow", SqlDbType.DateTime).Value = today.AddDays(1).AddMilliseconds(-1);
                command.Parameters.Add("@RequestType", SqlDbType.Int).Value = RequestInfo.RequestTypes.Repair;

                using (DataTable dt = GetDataTable(command))
                {
                    foreach (DataRow dr in dt.Rows)
                    {
                        repairs.Add(new RequestInfo(dr));
                    }
                }
            }
            return repairs;
        }

        /// <summary>
        /// 根据请求类型获取当月校准、保养、巡检 占比 KPI
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="today">目标日期</param>
        /// <returns>当月校准、保养、巡检 占比 KPI</returns>
        public Tuple<int, int> GetRequestPlanActual(int requestType,DateTime today)
        {
            sqlStr = " SELECT COUNT(ID) AS Plans, SUM(CASE WHEN StatusID = @StatusClose THEN 1 ELSE 0 END) AS Actuals " +
                    " FROM tblRequest " +
                    " WHERE DATEPART(YEAR, RequestDate) = @Year And DATEPART(MONTH, RequestDate) = @Month " +
                    " AND RequestType = @RequestType AND Source=@Source ";

            using (SqlCommand command = ConnectionUtil.GetCommand(sqlStr))
            {
                command.Parameters.Add("@StatusClose", SqlDbType.Int).Value = RequestInfo.Statuses.Close;
                command.Parameters.Add("@Year", SqlDbType.Int).Value = today.Year;
                command.Parameters.Add("@Month", SqlDbType.Int).Value = today.Month;
                command.Parameters.Add("@RequestType", SqlDbType.Int).Value = requestType;
                command.Parameters.Add("@Source", SqlDbType.Int).Value = RequestInfo.Sources.SysRequest;

                DataRow dr = GetDataRow(command);
                if (dr != null)
                    return new Tuple<int, int>(SQLUtil.ConvertInt(dr["Plans"]), SQLUtil.ConvertInt(dr["Actuals"]));
                else
                    return new Tuple<int, int>(0, 0);
            }
        }

       #endregion
   }
}



--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------


----------------------------------------------------------------------EquipmentInfo.cs----------------------------------------------------------------------------------------

using BusinessObjects.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Domain
{
    /// <summary>
    /// 设备信息
    /// </summary>
    public class EquipmentInfo : EntityInfo
    {
        /// <summary>
        /// 1,2,3类医疗器械
        /// </summary>
        /// <value>
        /// The equipment level.
        /// </value>
        public KeyValueInfo EquipmentLevel { get; set; }
        /// <summary>
        /// 设备名称
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        public string Name { get; set; }
        /// <summary>
        /// 设备型号
        /// </summary>
        /// <value>
        /// The equipment code.
        /// </value>
        public string EquipmentCode { get; set; }
        /// <summary>
        /// 设备序列号
        /// </summary>
        /// <value>
        /// The serial code.
        /// </value>
        public string SerialCode { get; set; }
        /// <summary>
        /// 设备厂商
        /// </summary>
        /// <value>
        /// The manufacturer.
        /// </value>
        public SupplierInfo Manufacturer { get; set; }
        /// <summary>
        /// 设备分类一级
        /// </summary>
        /// <value>
        /// The equipment class1.
        /// </value>
        public EquipmentClassInfo EquipmentClass1 { get; set; }
        /// <summary>
        /// 设备分类二级
        /// </summary>
        /// <value>
        /// The equipment class2.
        /// </value>
        public EquipmentClassInfo EquipmentClass2 { get; set; }
        /// <summary>
        /// 设备分类三级
        /// </summary>
        /// <value>
        /// The equipment class3.
        /// </value>
        public EquipmentClassInfo EquipmentClass3 { get; set; }
        /// <summary>
        /// 标准响应时间时长
        /// </summary>
        /// <value>
        /// The length of the response time.
        /// </value>
        public int ResponseTimeLength { get; set; }
        /// <summary>
        /// 整包范围
        /// </summary>
        /// <value>
        ///   <c>true</c> if [service scope]; otherwise, <c>false</c>.
        /// </value>
        public bool ServiceScope { get; set; }
        /// <summary>
        /// 品牌
        /// </summary>
        public string Brand { get; set; }
        /// <summary>
        /// 备注
        /// </summary>
        public string Comments { get; set; }
        /// <summary>
        /// 出厂日期
        /// </summary>
        public DateTime ManufacturingDate { get; set; }
        /// <summary>
        /// 固定资产
        /// </summary>
        /// <value>
        ///   <c>true</c> if [fixed asset]; otherwise, <c>false</c>.
        /// </value>
        public bool FixedAsset { get; set; }
        /// <summary>
        /// 医院系统资产编号
        /// </summary>
        /// <value>
        /// The asset code.
        /// </value>
        public string AssetCode { get; set; }
        /// <summary>
        /// 资产等级
        /// </summary>
        /// <value>
        /// The asset level.
        /// </value>
        public KeyValueInfo AssetLevel { get; set; }
        /// <summary>
        /// 折旧年限
        /// </summary>
        /// <value>
        /// The depreciation years.
        /// </value>
        public int DepreciationYears { get; set; }
        /// <summary>
        /// 注册证有效开始日期
        /// </summary>
        /// <value>
        /// The validity start date.
        /// </value>
        public DateTime ValidityStartDate { get; set; }
        /// <summary>
        /// 注册证有效结束日期
        /// </summary>
        /// <value>
        /// The validity end date.
        /// </value>
        public DateTime ValidityEndDate { get; set; }
        /// <summary>
        /// 销售合同名称
        /// </summary>
        /// <value>
        /// The name of the sale contract.
        /// </value>
        public string SaleContractName { get; set; }
        /// <summary>
        /// 供应商
        /// </summary>
        /// <value>
        /// The supplier.
        /// </value>
        public SupplierInfo Supplier { get; set; }
        /// <summary>
        /// 采购方式
        /// </summary>
        /// <value>
        /// The purchase way.
        /// </value>
        public string PurchaseWay { get; set; }
        /// <summary>
        /// 采购金额
        /// </summary>
        /// <value>
        /// The purchase amount.
        /// </value>
        public double PurchaseAmount { get; set; }
        /// <summary>
        ///采购日期
        /// </summary>
        /// <value>
        /// The purchase date.
        /// </value>
        public DateTime PurchaseDate { get; set; }
        /// <summary>
        /// 设备产地
        /// </summary>
        /// <value>
        ///   <c>true</c> if this instance is import; otherwise, <c>false</c>.
        /// </value>
        public bool IsImport { get; set; }
        /// <summary>
        /// 设备科室
        /// </summary>
        /// <value>
        /// The department.
        /// </value>
        public KeyValueInfo Department { get; set; }
        /// <summary>
        /// 安装地点
        /// </summary>
        /// <value>
        /// The instal site.
        /// </value>
        public string InstalSite { get; set; }
        /// <summary>
        /// 安装日期
        /// </summary>
        /// <value>
        /// The instal date.
        /// </value>
        public DateTime InstalDate { get; set; }
        /// <summary>
        /// 启用日期
        /// </summary>
        public DateTime UseageDate { get; set; }
        /// <summary>
        /// 验收状态
        /// </summary>
        /// <value>
        ///   <c>true</c> if accepted; otherwise, <c>false</c>.
        /// </value>
        public bool Accepted { get; set; }
        /// <summary>
        /// 验收日期
        /// </summary>
        /// <value>
        /// The acceptance date.
        /// </value>
        public DateTime AcceptanceDate { get; set; }
        /// <summary>
        /// 使用状态
        /// </summary>
        /// <value>
        /// The usage status.
        /// </value>
        public KeyValueInfo UsageStatus { get; set; }
        /// <summary>
        /// 设备状态
        /// </summary>
        /// <value>
        /// The equipment status.
        /// </value>
        public KeyValueInfo EquipmentStatus { get; set; }
        /// <summary>
        /// 报废时间
        /// </summary>
        /// <value>
        /// The scrap date.
        /// </value>
        public DateTime ScrapDate { get; set; }
        /// <summary>
        /// 保养周期
        /// </summary>
        /// <value>
        /// The maintenance period.
        /// </value>
        public int MaintenancePeriod { get; set; }
        /// <summary>
        /// 保养周期类型
        /// </summary>
        /// <value>
        /// The type of the maintenance.
        /// </value>
        public KeyValueInfo MaintenanceType { get; set; }
        /// <summary>
        /// 上次保养日期
        /// </summary>
        /// <value>
        /// The last maintenance date.
        /// </value>
        public DateTime LastMaintenanceDate { get; set; }
        /// <summary>
        /// 巡检周期
        /// </summary>
        /// <value>
        /// The patrol period.
        /// </value>
        public int PatrolPeriod { get; set; }
        /// <summary>
        /// 巡检周期类型
        /// </summary>
        /// <value>
        /// The type of the patrol.
        /// </value>
        public KeyValueInfo PatrolType { get; set; }
        /// <summary>
        /// 上次巡检日期
        /// </summary>
        /// <value>
        /// The last patrol date.
        /// </value>
        public DateTime LastPatrolDate { get; set; }
        /// <summary>
        /// 校准周期
        /// </summary>
        /// <value>
        /// The correction period.
        /// </value>
        public int CorrectionPeriod { get; set; }
        /// <summary>
        /// 校准周期类型
        /// </summary>
        /// <value>
        /// The type of the correction.
        /// </value>
        public KeyValueInfo CorrectionType { get; set; }
        /// <summary>
        /// 校准周期
        /// </summary>
        /// <value>
        /// The last correction date.
        /// </value>
        public DateTime LastCorrectionDate { get; set; }
        /// <summary>
        /// 强检标记
        /// </summary>
        /// <value>
        /// The mandatory test status.
        /// </value>
        public KeyValueInfo MandatoryTestStatus { get; set; }
        /// <summary>
        /// 强检时间
        /// </summary>
        /// <value>
        /// The mandatory test date.
        /// </value>
        public DateTime MandatoryTestDate { get; set; }
        /// <summary>
        /// 召回标记
        /// </summary>
        /// <value>
        /// </value>
        public bool RecallFlag { get; set; }
        /// <summary>
        /// 召回时间
        /// </summary>
        /// <value>
        /// The recall date.
        /// </value>
        public DateTime RecallDate { get; set; }
        /// <summary>
        /// 添加日期
        /// </summary>
        /// <value>
        /// The create date.
        /// </value>
        public DateTime CreateDate { get; set; }
        /// <summary>
        /// 添加用户
        /// </summary>
        /// <value>
        /// The create user.
        /// </value>
        public UserInfo CreateUser { get; set; }
        /// <summary>
        /// 修改日期
        /// </summary>
        /// <value>
        /// The update date.
        /// </value>
        public DateTime UpdateDate { get; set; }

        /// <summary>
        /// 收入
        /// </summary>
        /// <value>
        /// The incomes.
        /// </value>
        public double Incomes { get; set; }
        /// <summary>
        /// 上次收入
        /// </summary>
        /// <value>
        /// The last incomes.
        /// </value>
        public double LastIncomes { get; set; }
        /// <summary>
        /// 花费
        /// </summary>
        /// <value>
        /// The expenses.
        /// </value>
        public double Expenses { get; set; }
        /// <summary>
        /// 上次花费
        /// </summary>
        /// <value>
        /// The last expenses.
        /// </value>
        public double LastExpenses { get; set; }
        /// <summary>
        /// 合同来源
        /// </summary>
        /// <value>
        /// The contract scope.
        /// </value>
        public KeyValueInfo ContractScope { get; set; }
        /// <summary>
        /// 维保状态
        /// </summary>
        /// <value>
        /// The warranty status.
        /// </value>
        public string WarrantyStatus { get; set; }
        /// <summary>
        /// 设备附件
        /// </summary>
        /// <value>
        /// The equipment file.
        /// </value>
        public List<UploadFileInfo> EquipmentFile { get; set; }
        /// <summary>
        /// 编号
        /// </summary>
        /// <value>
        /// The oid.
        /// </value>
        public string OID { get { return EntityInfo.GenerateOID(ObjectTypes.Equipment, this.ID); } }
        /// <summary>
        /// 产地
        /// </summary>
        /// <value>
        /// The type of the origin.
        /// </value>
        public string OriginType { get { return GetOriginType(this.IsImport); } }
        /// <summary>
        /// 产地
        /// </summary>
        /// <param name="isImport">if set to <c>true</c> [is import].</param>
        /// <returns>是否进口</returns>
        public static string GetOriginType(bool isImport)
        {
            return isImport ? "进口" : "国产";
        }
        /// <summary>
        /// 分类编码
        /// </summary>
        public string ClassCode { get { return this.EquipmentClass1.Code + this.EquipmentClass2.Code + this.EquipmentClass3.Code; } }

        /// <summary>
        /// 派工单信息
        /// </summary>
        /// <value>
        /// The dispatches.
        /// </value>
        public List<DispatchInfo> Dispatches { get; set; }

        /// <summary>
        /// 设备信息
        /// </summary>
        public EquipmentInfo()
        {
            this.EquipmentLevel = new KeyValueInfo();
            this.Manufacturer = new SupplierInfo();
            this.EquipmentClass1 = new EquipmentClassInfo();
            this.EquipmentClass2 = new EquipmentClassInfo();
            this.EquipmentClass3 = new EquipmentClassInfo();
            this.AssetLevel = new KeyValueInfo();
            this.Supplier = new SupplierInfo();
            this.Department = new KeyValueInfo();
            this.UsageStatus = new KeyValueInfo();
            this.EquipmentStatus = new KeyValueInfo();
            this.MaintenanceType = new KeyValueInfo();
            this.PatrolType = new KeyValueInfo();
            this.CorrectionType = new KeyValueInfo();
            this.MandatoryTestStatus = new KeyValueInfo();
            this.ContractScope = new KeyValueInfo();
            this.CreateUser = new UserInfo();
        }

        /// <summary>
        /// 设备信息
        /// </summary>
        /// <param name="dr">dataRow</param>
        public EquipmentInfo(DataRow dr)
            : this()
        {
            this.ID = SQLUtil.ConvertInt(dr["ID"]);
            this.EquipmentLevel.ID = SQLUtil.ConvertInt(dr["EquipmentLevel"]);
            this.EquipmentLevel.Name = EquipmentLevels.GetEquipmentLevelDesc(this.EquipmentLevel.ID);
            this.Name = SQLUtil.TrimNull(dr["Name"]);
            this.EquipmentCode = SQLUtil.TrimNull(dr["EquipmentCode"]);
            this.SerialCode = SQLUtil.TrimNull(dr["SerialCode"]);
            this.Manufacturer.ID = SQLUtil.ConvertInt(dr["ManufacturerID"]);
            if (dr.Table.Columns.Contains("ManufacturerName"))
                this.Manufacturer.Name = SQLUtil.TrimNull(dr["ManufacturerName"]);
            this.EquipmentClass1.Code = SQLUtil.TrimNull(dr["EquipmentClass1"]);
            this.EquipmentClass1.Description = Manager.LookupManager.GetEquipmentClassDesc(this.EquipmentClass1.Code, 1);
            this.EquipmentClass2.Code = SQLUtil.TrimNull(dr["EquipmentClass2"]);
            this.EquipmentClass2.Description = Manager.LookupManager.GetEquipmentClassDesc(this.EquipmentClass2.Code, 2, this.EquipmentClass1.Code);
            this.EquipmentClass3.Code = SQLUtil.TrimNull(dr["EquipmentClass3"]);
            this.EquipmentClass3.Description = Manager.LookupManager.GetEquipmentClassDesc(this.EquipmentClass3.Code, 3, this.EquipmentClass1.Code + this.EquipmentClass2.Code);
            this.ResponseTimeLength = SQLUtil.ConvertInt(dr["ResponseTimeLength"]);
            this.ServiceScope = SQLUtil.ConvertBoolean(dr["ServiceScope"]);
            this.Brand = SQLUtil.TrimNull(dr["Brand"]);
            this.Comments = SQLUtil.TrimNull(dr["Comments"]);
            this.ManufacturingDate = SQLUtil.ConvertDateTime(dr["ManufacturingDate"]);
            this.FixedAsset = SQLUtil.ConvertBoolean(dr["FixedAsset"]);
            this.AssetCode = SQLUtil.TrimNull(dr["AssetCode"]);
            this.AssetLevel.ID = SQLUtil.ConvertInt(dr["AssetLevel"]);
            this.AssetLevel.Name = AssetLevels.GetAssetLevelDesc(this.AssetLevel.ID);
            this.DepreciationYears = SQLUtil.ConvertInt(dr["DepreciationYears"]);
            this.ValidityStartDate = SQLUtil.ConvertDateTime(dr["ValidityStartDate"]);
            this.ValidityEndDate = SQLUtil.ConvertDateTime(dr["ValidityEndDate"]);
            this.SaleContractName = SQLUtil.TrimNull(dr["SaleContractName"]);
            this.Supplier.ID = SQLUtil.ConvertInt(dr["SupplierID"]);
            if (dr.Table.Columns.Contains("SupplierName"))
                this.Supplier.Name = SQLUtil.TrimNull(dr["SupplierName"]);
            this.PurchaseWay = SQLUtil.TrimNull(dr["PurchaseWay"]);
            this.PurchaseAmount = SQLUtil.ConvertDouble(dr["PurchaseAmount"]);
            this.PurchaseDate = SQLUtil.ConvertDateTime(dr["PurchaseDate"]);
            this.IsImport = SQLUtil.ConvertBoolean(dr["IsImport"]);
            this.Department.ID = SQLUtil.ConvertInt(dr["DepartmentID"]);
            this.Department.Name = Manager.LookupManager.GetDepartmentDesc(this.Department.ID);
            this.InstalSite = SQLUtil.TrimNull(dr["InstalSite"]);
            this.InstalDate = SQLUtil.ConvertDateTime(dr["InstalDate"]);
            this.UseageDate = SQLUtil.ConvertDateTime(dr["UseageDate"]);
            this.Accepted = SQLUtil.ConvertBoolean(dr["Accepted"]);
            this.AcceptanceDate = SQLUtil.ConvertDateTime(dr["AcceptanceDate"]);
            this.UsageStatus.ID = SQLUtil.ConvertInt(dr["UsageStatusID"]);
            this.UsageStatus.Name = Manager.LookupManager.GetUsageStatusDesc(this.UsageStatus.ID);
            this.EquipmentStatus.ID = SQLUtil.ConvertInt(dr["EquipmentStatusID"]);
            this.EquipmentStatus.Name = Manager.LookupManager.GetEquipmentStatusDesc(this.EquipmentStatus.ID);
            this.ScrapDate = SQLUtil.ConvertDateTime(dr["ScrapDate"]);
            this.MaintenancePeriod = SQLUtil.ConvertInt(dr["MaintenancePeriod"]);
            this.MaintenanceType.ID = SQLUtil.ConvertInt(dr["MaintenanceTypeID"]);
            this.MaintenanceType.Name = Manager.LookupManager.GetPeriodTypeDesc(this.MaintenanceType.ID);
            this.LastMaintenanceDate = SQLUtil.ConvertDateTime(dr["LastMaintenanceDate"]);
            this.PatrolPeriod = SQLUtil.ConvertInt(dr["PatrolPeriod"]);
            this.PatrolType.ID = SQLUtil.ConvertInt(dr["PatrolTypeID"]);
            this.PatrolType.Name = Manager.LookupManager.GetPeriodTypeDesc(this.PatrolType.ID);
            this.LastPatrolDate = SQLUtil.ConvertDateTime(dr["LastPatrolDate"]);
            this.CorrectionPeriod = SQLUtil.ConvertInt(dr["CorrectionPeriod"]);
            this.CorrectionType.ID = SQLUtil.ConvertInt(dr["CorrectionTypeID"]);
            this.CorrectionType.Name = Manager.LookupManager.GetPeriodTypeDesc(this.CorrectionType.ID);
            this.LastCorrectionDate = SQLUtil.ConvertDateTime(dr["LastCorrectionDate"]);
            this.MandatoryTestStatus.ID = SQLUtil.ConvertInt(dr["MandatoryTestStatus"]);
            this.MandatoryTestStatus.Name = MandatoryTestStatuses.GetMandatoryTestStatusDesc(this.MandatoryTestStatus.ID);
            this.MandatoryTestDate = SQLUtil.ConvertDateTime(dr["MandatoryTestDate"]);
            this.RecallFlag = SQLUtil.ConvertBoolean(dr["RecallFlag"]);
            this.RecallDate = SQLUtil.ConvertDateTime(dr["RecallDate"]);
            this.CreateDate = SQLUtil.ConvertDateTime(dr["CreateDate"]);
            this.CreateUser.ID = SQLUtil.ConvertInt(dr["CreateUserID"]);
            this.UpdateDate = SQLUtil.ConvertDateTime(dr["UpdateDate"]);
            if (dr.Table.Columns.Contains("ScopeID"))
            {
                this.ContractScope.ID = SQLUtil.ConvertInt(dr["ScopeID"]);
                this.ContractScope.Name = this.ContractScope.ID == 0 ? "" : Manager.LookupManager.GetContractScopeDesc(this.ContractScope.ID);
                if (this.ContractScope.ID == ContractInfo.Scopes.Other) this.ContractScope.Name = SQLUtil.TrimNull(dr["ScopeComments"]);
            }
            if (dr.Table.Columns.Contains("ContractID"))
                this.WarrantyStatus = SQLUtil.ConvertInt(dr["ContractID"]) == 0 ? "保外" : "保内";
        }
        /// <summary>
        /// Copy4s the application.
        /// </summary>
        /// <returns>EquipmentInfo</returns>
        public EquipmentInfo Copy4App()
        {
            EquipmentInfo info = new EquipmentInfo();
            info.ID = this.ID;
            info.ServiceScope = this.ServiceScope;
            info.AssetLevel = this.AssetLevel;
            info.AssetCode = this.AssetCode;
            info.Name = this.Name;
            info.Department = this.Department;
            info.EquipmentCode = this.EquipmentCode;
            info.InstalSite = this.InstalSite;
            info.SerialCode = this.SerialCode;
            info.WarrantyStatus = this.WarrantyStatus;
            info.Manufacturer = this.Manufacturer;
            info.ContractScope = this.ContractScope;
            info.EquipmentLevel = null;
            info.EquipmentClass1 = this.EquipmentClass1;
            info.EquipmentClass2 = this.EquipmentClass2;
            info.EquipmentClass3 = this.EquipmentClass3;
            info.Supplier = null;
            info.UsageStatus = null;
            info.EquipmentStatus = this.EquipmentStatus;
            info.MaintenanceType = null;
            info.PatrolType = null;
            info.CorrectionType = null;
            info.MandatoryTestStatus = null;
            info.CreateUser = null;

            return info;
        }
        /// <summary>
        /// 修改设备信息
        /// </summary>
        /// <param name="newInfo">设备信息</param>
        /// <returns>设备信息</returns>
        public DataTable GetChangedFields(EquipmentInfo newInfo)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("FieldName");
            dt.Columns.Add("OldValue");
            dt.Columns.Add("NewValue");

            if (this.EquipmentLevel.ID != newInfo.EquipmentLevel.ID)
            {
                dt.Rows.Add("EquipmentLevelDesc", this.EquipmentLevel.ID, newInfo.EquipmentLevel.ID);
            }

            if (this.Name != SQLUtil.TrimNull(newInfo.Name))
            {
                dt.Rows.Add("EquipmentName", this.Name, SQLUtil.TrimNull(newInfo.Name));
            }

            if (this.EquipmentCode != SQLUtil.TrimNull(newInfo.EquipmentCode))
            {
                dt.Rows.Add("EquipmentCode", this.EquipmentCode, SQLUtil.TrimNull(newInfo.EquipmentCode));
            }

            if (this.SerialCode != SQLUtil.TrimNull(newInfo.SerialCode))
            {
                dt.Rows.Add("SerialCode", this.SerialCode, SQLUtil.TrimNull(newInfo.SerialCode));
            }

            if (this.Manufacturer.ID != newInfo.Manufacturer.ID)
            {
                dt.Rows.Add("EquipmentManufacturerName", this.Manufacturer.ID, newInfo.Manufacturer.ID);
            }

            if (this.EquipmentClass1.Code != SQLUtil.TrimNull(newInfo.EquipmentClass1.Code))
            {
                dt.Rows.Add("EquipmentClass1Name", this.EquipmentClass1.Code, SQLUtil.TrimNull(newInfo.EquipmentClass1.Code));
            }

            if (this.EquipmentClass2.Code != SQLUtil.TrimNull(newInfo.EquipmentClass2.Code) || this.EquipmentClass1.Code != SQLUtil.TrimNull(newInfo.EquipmentClass1.Code))
            {
                dt.Rows.Add("EquipmentClass2Name", this.EquipmentClass2.Code, SQLUtil.TrimNull(newInfo.EquipmentClass2.Code));
            }

            if (this.EquipmentClass3.Code != SQLUtil.TrimNull(newInfo.EquipmentClass3.Code) || (this.EquipmentClass2.Code != SQLUtil.TrimNull(newInfo.EquipmentClass2.Code) || this.EquipmentClass1.Code != SQLUtil.TrimNull(newInfo.EquipmentClass1.Code)))
            {
                dt.Rows.Add("EquipmentClass3Name", this.EquipmentClass3.Code, SQLUtil.TrimNull(newInfo.EquipmentClass3.Code));
            }

            if (this.ResponseTimeLength != newInfo.ResponseTimeLength)
            {
                dt.Rows.Add("ResponseTimeLength", this.ResponseTimeLength, newInfo.ResponseTimeLength);
            }

            if (this.ServiceScope != newInfo.ServiceScope)
            {
                dt.Rows.Add("ServiceScopeDesc", this.ServiceScope, newInfo.ServiceScope);
            }

            if (this.Brand != SQLUtil.TrimNull(newInfo.Brand))
            {
                dt.Rows.Add("Brand", this.Brand, SQLUtil.TrimNull(newInfo.Brand));
            }

            if (this.Comments != SQLUtil.TrimNull(newInfo.Comments))
            {
                dt.Rows.Add("EquipmentComments", this.Comments, SQLUtil.TrimNull(newInfo.Comments));
            }

            if (this.ManufacturingDate != newInfo.ManufacturingDate)
            {
                dt.Rows.Add("ManufacturingDate", this.ManufacturingDate, newInfo.ManufacturingDate);
            }

            if (this.FixedAsset != newInfo.FixedAsset)
            {
                dt.Rows.Add("FixedAsset", this.FixedAsset, newInfo.FixedAsset);
            }

            if (this.AssetCode != SQLUtil.TrimNull(newInfo.AssetCode))
            {
                dt.Rows.Add("AssetCode", this.AssetCode, SQLUtil.TrimNull(newInfo.AssetCode));
            }

            if (this.AssetLevel.ID != newInfo.AssetLevel.ID)
            {
                dt.Rows.Add("AssetLevel", this.AssetLevel.ID, newInfo.AssetLevel.ID);
            }

            if (this.DepreciationYears != newInfo.DepreciationYears)
            {
                dt.Rows.Add("DepreciationYears", this.DepreciationYears, newInfo.DepreciationYears);
            }

            if (this.ValidityStartDate != newInfo.ValidityStartDate)
            {
                dt.Rows.Add("ValidityStartDate", this.ValidityStartDate, newInfo.ValidityStartDate);
            }

            if (this.ValidityEndDate != newInfo.ValidityEndDate)
            {
                dt.Rows.Add("ValidityEndDate", this.ValidityEndDate, newInfo.ValidityEndDate);
            }

            if (this.SaleContractName != SQLUtil.TrimNull(newInfo.SaleContractName))
            {
                dt.Rows.Add("SaleContractName", this.SaleContractName, SQLUtil.TrimNull(newInfo.SaleContractName));
            }

            if (this.Supplier.ID != newInfo.Supplier.ID)
            {
                dt.Rows.Add("DealerName", this.Supplier.ID, newInfo.Supplier.ID);
            }

            if (this.PurchaseWay != SQLUtil.TrimNull(newInfo.PurchaseWay))
            {
                dt.Rows.Add("PurchaseWay", this.PurchaseWay, SQLUtil.TrimNull(newInfo.PurchaseWay));
            }

            if (this.PurchaseAmount != newInfo.PurchaseAmount)
            {
                dt.Rows.Add("EquipmentPurchaseAmount", this.PurchaseAmount, newInfo.PurchaseAmount);
            }

            if (this.PurchaseDate != newInfo.PurchaseDate)
            {
                dt.Rows.Add("PurchaseDate", this.PurchaseDate, newInfo.PurchaseDate);
            }

            if (this.IsImport != newInfo.IsImport)
            {
                dt.Rows.Add("IsImport", this.IsImport, newInfo.IsImport);
            }

            if (this.Department.ID != newInfo.Department.ID)
            {
                dt.Rows.Add("DepartmentName", this.Department.ID, newInfo.Department.ID);
            }

            if (this.InstalSite != SQLUtil.TrimNull(newInfo.InstalSite))
            {
                dt.Rows.Add("InstalSite", this.InstalSite, SQLUtil.TrimNull(newInfo.InstalSite));
            }

            if (this.InstalDate != newInfo.InstalDate)
            {
                dt.Rows.Add("InstalDate", this.InstalDate, newInfo.InstalDate);
            }

            if (this.UseageDate != newInfo.UseageDate)
            {
                dt.Rows.Add("UseageDate", this.UseageDate, newInfo.UseageDate);
            }

            if (this.Accepted != newInfo.Accepted)
            {
                dt.Rows.Add("Accepted", this.Accepted, newInfo.Accepted);
            }

            if (this.AcceptanceDate != newInfo.AcceptanceDate)
            {
                dt.Rows.Add("AcceptanceDate", this.AcceptanceDate, newInfo.AcceptanceDate);
            }

            if (this.UsageStatus.ID != newInfo.UsageStatus.ID)
            {
                dt.Rows.Add("UsageStatusDesc", this.UsageStatus.ID, newInfo.UsageStatus.ID);
            }

            if (this.EquipmentStatus.ID != newInfo.EquipmentStatus.ID)
            {
                dt.Rows.Add("EquipmentStatusDesc", this.EquipmentStatus.ID, newInfo.EquipmentStatus.ID);
            }

            if (this.ScrapDate != newInfo.ScrapDate)
            {
                dt.Rows.Add("ScrapDate", this.ScrapDate, newInfo.ScrapDate);
            }

            if (this.MaintenancePeriod != newInfo.MaintenancePeriod)
            {
                dt.Rows.Add("MaintenancePeriod", this.MaintenancePeriod, newInfo.MaintenancePeriod);
            }

            if (this.MaintenanceType.ID != newInfo.MaintenanceType.ID)
            {
                dt.Rows.Add("MaintenanceTypeDesc", this.MaintenanceType.ID, newInfo.MaintenanceType.ID);
            }

            if (this.PatrolPeriod != newInfo.PatrolPeriod)
            {
                dt.Rows.Add("PatrolPeriod", this.PatrolPeriod, newInfo.PatrolPeriod);
            }

            if (this.PatrolType.ID != newInfo.PatrolType.ID)
            {
                dt.Rows.Add("PatrolTypeDesc", this.PatrolType.ID, newInfo.PatrolType.ID);
            }

            if (this.CorrectionPeriod != newInfo.CorrectionPeriod)
            {
                dt.Rows.Add("CorrectionPeriod", this.CorrectionPeriod, newInfo.CorrectionPeriod);
            }

            if (this.CorrectionType.ID != newInfo.CorrectionType.ID)
            {
                dt.Rows.Add("CorrectionTypeDesc", this.CorrectionType.ID, newInfo.CorrectionType.ID);
            }

            if (this.MandatoryTestStatus.ID != newInfo.MandatoryTestStatus.ID)
            {
                dt.Rows.Add("MandatoryTestStatusDesc", this.MandatoryTestStatus.ID, newInfo.MandatoryTestStatus.ID);
            }

            if (this.MandatoryTestDate != newInfo.MandatoryTestDate)
            {
                dt.Rows.Add("MandatoryTestDate", this.MandatoryTestDate, newInfo.MandatoryTestDate);
            }

            if (this.RecallFlag != newInfo.RecallFlag)
            {
                dt.Rows.Add("RecallFlag", this.RecallFlag, newInfo.RecallFlag);
            }

            if (this.RecallDate != newInfo.RecallDate)
            {
                dt.Rows.Add("RecallDate", this.RecallDate, newInfo.RecallDate);
            }

            return dt;
        }
        /// <summary>
        /// 附件类型
        /// </summary>
        public static class FileTypes
        {
            /// <summary>
            /// 销售合同
            /// </summary>
            public const int SaleContract = 1;
            /// <summary>
            /// 注册证文件
            /// </summary>
            public const int Registration = 2;
            /// <summary>
            /// 采购配置清单
            /// </summary>
            public const int PurchaseDetail = 3;
            /// <summary>
            /// 设备外观
            /// </summary>
            public const int ConfigLicence = 4;
            /// <summary>
            /// 设备铭牌
            /// </summary>
            public const int Nameplate = 5;
            /// <summary>
            /// 设备标签
            /// </summary>
            public const int Label = 6;
            /// <summary>
            /// 技术文档
            /// </summary>
            public const int TechDocu = 7;
            /// <summary>
            /// 其他
            /// </summary>
            public const int OtherFile = 8;

            /// <summary>
            /// 获取附件类型描述
            /// </summary>
            /// <param name="id">附件类型id</param>
            /// <returns>附件类型描述</returns>
            public static string GetFileName(int id)
            {
                switch (id)
                {
                   // case SaleContract:
                   //     return "销售合同文件";
                   // case Registration:
                   //     return "注册证文件";
                   // case PurchaseDetail:
                   //     return "采购配置清单";
                    case ConfigLicence:
                        return "设备外观";
                    case Nameplate:
                        return "设备铭牌";
                    case Label:
                        return "设备标签";
                    //case TechDocu:
                    //    return "技术文档";
                    //case OtherFile:
                    //    return "附件";
                    default:
                        return "";
                }
            }
        }
        /// <summary>
        /// 设备状态
        /// </summary>
        public static class EquipmentStatuses
        {
            /// <summary>
            /// 正常
            /// </summary>
            public const int Normal = 1;
            /// <summary>
            /// 故障
            /// </summary>
            public const int Fault = 2;
            /// <summary>
            /// 报废
            /// </summary>
            public const int Scrap = 3;
        }
        /// <summary>
        /// 设备使用状态
        /// </summary>
        public static class UsageStatuses
        {
            /// <summary>
            /// 使用
            /// </summary>
            public const int Running = 1;
            /// <summary>
            /// 停用
            /// </summary>
            public const int Stop = 2;
        }
        /// <summary>
        /// 设备资产等级
        /// </summary>
        public static class AssetLevels
        {
            /// <summary>
            /// 重要
            /// </summary>
            public const int Important = 1;
            /// <summary>
            /// 一般
            /// </summary>
            public const int Normal = 2;
            /// <summary>
            /// 特殊
            /// </summary>
            public const int Special = 3;

            /// <summary>
            /// 获取设备资产等级列表
            /// </summary>
            /// <returns>设备资产等级列表</returns>
            public static List<KeyValueInfo> GetAssetLevels()
            {
                List<KeyValueInfo> statuses = new List<KeyValueInfo>();
                statuses.Add(new KeyValueInfo() { ID = AssetLevels.Important, Name = GetAssetLevelDesc(AssetLevels.Important) });
                statuses.Add(new KeyValueInfo() { ID = AssetLevels.Normal, Name = GetAssetLevelDesc(AssetLevels.Normal) });
                statuses.Add(new KeyValueInfo() { ID = AssetLevels.Special, Name = GetAssetLevelDesc(AssetLevels.Special) });
                return statuses;
            }
            /// <summary>
            /// 根据设备资产等级编号获取设备资产等级描述
            /// </summary>
            /// <param name="statusId">设备资产等级编号</param>
            /// <returns>设备资产等级描述</returns>
            public static string GetAssetLevelDesc(int statusId)
            {
                switch (statusId)
                {
                    case AssetLevels.Important:
                        return "重要";
                    case AssetLevels.Normal:
                        return "一般";
                    case AssetLevels.Special:
                        return "特殊";
                    default:
                        return "";
                }
            }
        }
        /// <summary>
        /// 设备等级
        /// </summary>
        public static class EquipmentLevels
        {
            /// <summary>
            /// 1类
            /// </summary>
            public const int One = 1;
            /// <summary>
            /// 2类
            /// </summary>
            public const int Two = 2;
            /// <summary>
            /// 3类
            /// </summary>
            public const int Three = 3;

            /// <summary>
            /// 获取设备等级列表
            /// </summary>
            /// <returns>设备等级列表</returns>
            public static List<KeyValueInfo> GetEquipmentLevels()
            {
                List<KeyValueInfo> statuses = new List<KeyValueInfo>();
                statuses.Add(new KeyValueInfo() { ID = EquipmentLevels.One, Name = GetEquipmentLevelDesc(EquipmentLevels.One) });
                statuses.Add(new KeyValueInfo() { ID = EquipmentLevels.Two, Name = GetEquipmentLevelDesc(EquipmentLevels.Two) });
                statuses.Add(new KeyValueInfo() { ID = EquipmentLevels.Three, Name = GetEquipmentLevelDesc(EquipmentLevels.Three) });
                return statuses;
            }
            /// <summary>
            /// 根据设备等级编号获取设备等级描述
            /// </summary>
            /// <param name="statusId">设备等级编号</param>
            /// <returns>设备等级描述</returns>
            public static string GetEquipmentLevelDesc(int statusId)
            {
                switch (statusId)
                {
                    case EquipmentLevels.One:
                        return "1类";
                    case EquipmentLevels.Two:
                        return "2类";
                    case EquipmentLevels.Three:
                        return "3类";
                    default:
                        return "";
                }
            }
        }
        /// <summary>
        /// 强检标记
        /// </summary>
        public static class MandatoryTestStatuses
        {
            /// <summary>
            /// 待强检
            /// </summary>
            public const int Waiting = 1;
            /// <summary>
            /// 已强检
            /// </summary>
            public const int Already = 2;
            /// <summary>
            /// 获取强检标记列表
            /// </summary>
            /// <returns>强检标记列表</returns>
            public static List<KeyValueInfo> GetMandatoryTestStatuses()
            {
                List<KeyValueInfo> statuses = new List<KeyValueInfo>();
                statuses.Add(new KeyValueInfo() { ID = MandatoryTestStatuses.Waiting, Name = GetMandatoryTestStatusDesc(MandatoryTestStatuses.Waiting) });
                statuses.Add(new KeyValueInfo() { ID = MandatoryTestStatuses.Already, Name = GetMandatoryTestStatusDesc(MandatoryTestStatuses.Already) });
                return statuses;
            }
            /// <summary>
            /// 根据强检标记编号获取强检标记描述
            /// </summary>
            /// <param name="statusId">强检标记编号</param>
            /// <returns>强检标记描述</returns>
            public static string GetMandatoryTestStatusDesc(int statusId)
            {
                switch (statusId)
                {
                    case MandatoryTestStatuses.Waiting:
                        return "待强检";
                    case MandatoryTestStatuses.Already:
                        return "已强检";
                    default:
                        return "";
                }
            }
        }
        /// <summary>
        /// 维保状态
        /// </summary>
        public static class WarrantyStatuses
        {
            /// <summary>
            /// 保外
            /// </summary>
            public const int Expired = 1;
            /// <summary>
            /// 保内
            /// </summary>
            public const int Active = 2;
            /// <summary>
            /// 获取维保状态列表
            /// </summary>
            /// <returns>维保状态列表</returns>
            public static List<KeyValueInfo> GetWarrantyStatuses()
            {
                List<KeyValueInfo> statuses = new List<KeyValueInfo>();
                statuses.Add(new KeyValueInfo() { ID = WarrantyStatuses.Expired, Name = GetWarrantyStatusesDesc(WarrantyStatuses.Expired) });
                statuses.Add(new KeyValueInfo() { ID = WarrantyStatuses.Active, Name = GetWarrantyStatusesDesc(WarrantyStatuses.Active) });
                return statuses;
            }
            /// <summary>
            /// 根据维保状态编号获取维保状态描述
            /// </summary>
            /// <param name="statusId">维保状态编号</param>
            /// <returns>维保状态描述</returns>
            public static string GetWarrantyStatusesDesc(int statusId)
            {
                switch (statusId)
                {
                    case WarrantyStatuses.Expired:
                        return "保外";
                    case WarrantyStatuses.Active:
                        return "保内";
                    default:
                        return "全部";
                }
            }
        }
        /// <summary>
        /// 周期
        /// </summary>
        public static class PeriodTypes
        {
            /// <summary>
            /// 天
            /// </summary>
            public const int Day = 1;
            /// <summary>
            /// 月
            /// </summary>
            public const int Month = 3;
            /// <summary>
            /// 年
            /// </summary>
            public const int Year = 4;
        }
    }

    /// <summary>
    /// 设备类别信息
    /// </summary>
    public class EquipmentClassInfo
    {
        /// <summary>
        /// 等级
        /// </summary>
        /// <value>
        /// The level.
        /// </value>
        public int Level { get; set; }
        /// <summary>
        /// 父级编号
        /// </summary>
        /// <value>
        /// The parent code.
        /// </value>
        public string ParentCode { get; set; }
        /// <summary>
        /// 编号
        /// </summary>
        /// <value>
        /// The code.
        /// </value>
        public string Code { get; set; }
        /// <summary>
        /// 描述
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        public string Description { get; set; }
        /// <summary>
        /// 设备类别信息
        /// </summary>
        public EquipmentClassInfo() { }
        /// <summary>
        /// 获取设备类别信息
        /// </summary>
        /// <param name="dr">The dr.</param>
        public EquipmentClassInfo(DataRow dr)
            : this()
        {
            this.Level = SQLUtil.ConvertInt(dr["Level"]);
            this.ParentCode = SQLUtil.TrimNull(dr["ParentCode"]);
            this.Code = SQLUtil.TrimNull(dr["Code"]);
            this.Description = SQLUtil.TrimNull(dr["Description"]);
        }
    }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------



----------------------------------------------------------------------ReportManager.cshtml--------------------------------------------------------------------------

using BusinessObjects.Aspect;
using BusinessObjects.DataAccess;
using BusinessObjects.Domain;
using BusinessObjects.Util;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessObjects.Manager
{
    /// <summary>
    /// 报表manager
    /// </summary>
    [LoggingAspect(AspectPriority = 1)]
    public class ReportManager
    {
        private ReportDao reportDao = new ReportDao();
        private EquipmentDao equipmentDao = new EquipmentDao();
        private SupplierDao supplierDao = new SupplierDao();
        private const int RECORD_LIMIT_MANUFACTURE = 10;

        #region axisX
        /// <summary>
        /// 获取维度下数据列表
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="startYear">年份</param>
        /// <returns>维度下数据列表</returns>
        public List<string> GetAxisXList(int type, int startYear = 0)
        {
            List<string> axisXList = null;
            switch (type)
            {
                case ReportDimension.AcceptanceYear:
                    axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetYearList(startYear), "ID");
                    break;
                case ReportDimension.AcceptanceMonth:
                    axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetMonthList(startYear), "ID");
                    break;
                case ReportDimension.AmountType:
                    axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetAmountList(), "Name");
                    break;
                case ReportDimension.UsageTimeType:
                    axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetUsageTimeList(), "Name");
                    break;
                case ReportDimension.EquipmentType:
                    axisXList = SQLUtil.GetStringListFromObjectList(LookupManager.GetEquipmentClass(1), "Description");
                    axisXList.Add("");
                    break;
                case ReportDimension.OriginType:
                    axisXList = new List<string>();
                    axisXList.Add(EquipmentInfo.GetOriginType(false));
                    axisXList.Add(EquipmentInfo.GetOriginType(true));
                    break;
                case ReportDimension.DepartmentType:
                    axisXList = SQLUtil.GetStringListFromObjectList(LookupManager.GetDepartments(), "Description");
                    break;
                case ReportDimension.ManufacturerType:
                    axisXList = SQLUtil.GetStringListFromObjectList(this.equipmentDao.QueryManufacturer(), "Name");
                    axisXList.Add("");
                    break;
            }
            return axisXList;
        }
        /// <summary>
        /// 获取字段描述信息
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="dr">字段信息</param>
        /// <returns>字段名称</returns>
        public string GetAxisX(int type, DataRow dr)
        {
            string axisX = "";
            switch (type)
            {
                case ReportDimension.AcceptanceYear:
                    axisX = SQLUtil.TrimNull(dr[0]);
                    break;
                case ReportDimension.AcceptanceMonth:
                    axisX = SQLUtil.TrimNull(dr[0]);
                    break;
                case ReportDimension.DepartmentType:
                    axisX = LookupManager.GetDepartmentDesc(SQLUtil.ConvertInt(dr[0]));
                    break;
                case ReportDimension.EquipmentType:
                    axisX = LookupManager.GetEquipmentClassDesc(SQLUtil.TrimNull(dr[0]), 1);
                    break;
                case ReportDimension.ManufacturerType:
                    SupplierInfo info = supplierDao.GetSupplier(SQLUtil.ConvertInt(dr[0]));
                    axisX = (info == null ? "" : info.Name);
                    break;
                case ReportDimension.OriginType:
                    axisX = EquipmentInfo.GetOriginType(SQLUtil.ConvertBoolean(dr[0]));
                    break;
            }
            return axisX;
        }
        /// <summary>
        /// 计算增长率
        /// </summary>
        /// <param name="cur">本年数据</param>
        /// <param name="last">去年数据</param>
        /// <returns>增长率</returns>
        public double GetGrowthRatio(double cur, double last)
        {
            double ratio = last == 0 ? (cur == 0 ? 0 : 100.0) : Math.Round((cur - last) * 100.0 / last, 2);
            return ratio;
        }
        /// <summary>
        /// 计算同比
        /// </summary>
        /// <param name="cur">本年数据</param>
        /// <param name="last">去年数据</param>
        /// <returns>同比比率</returns>
        public double GetVSRatio(double cur, double last)
        {
            return (last == 0 ? (cur == 0 ? 0 : 100.0) : Math.Round(cur * 100.0 / last, 2));
        }
        /// <summary>
        /// 获取日期段
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="checkToday">是否检测时间大于当前时间</param>
        /// <returns>时间段</returns>
        public Tuple<DateTime, DateTime> GetDateRange(int year, int month, bool checkToday = false)
        {
            DateTime dateFrom, dateTo;
            if (month == 0)
            {
                dateFrom = new DateTime(year, 1, 1);
                dateTo = dateFrom.AddYears(1);
            }
            else
            {
                dateFrom = new DateTime(year, month, 1);
                dateTo = dateFrom.AddMonths(1);
            }

            if (checkToday && dateTo > DateTime.Today.AddDays(1)) dateTo = DateTime.Today.AddDays(1);

            return  new Tuple<DateTime, DateTime>(dateFrom, dateTo);
        }
        #endregion

        /// <summary>
        /// dictionary类型数据补充缺失数据
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="result">原始数据</param>
        /// <param name="axisXList">维度下数据列表</param>
        /// <returns>补漏后的数据</returns>
        private List<Tuple<string, double>> FillMissingAxis(int type, Dictionary<string, double> result, List<string> axisXList)
        {
            List<Tuple<string, double>> raw = new List<Tuple<string, double>>();
            foreach (var axisX in axisXList)
            {
                if (result.ContainsKey(axisX))
                {
                    raw.Add(new Tuple<string,double>(axisX, result[axisX]));
                }
                else
                {
                    if (type != ReportDimension.ManufacturerType && type != ReportDimension.EquipmentType)
                    {
                        raw.Add(new Tuple<string,double>(axisX, 0));
                    }
                }
            }
            return raw;
        }
        /// <summary>
        /// 合并且补充缺失数据
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="resultCur">当年数据</param>
        /// <param name="resultLast">去年数据</param>
        /// <param name="axisList">数据列表</param>
        /// <returns>合并补充后的数据</returns>
        private List<Tuple<string, double, double, double>> FillMissingAxis(int type, List<Tuple<string, double>> resultCur, List<Tuple<string, double>> resultLast, List<string> axisList)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            foreach (string axisX in axisList)
            {
                Tuple<string, double> lastInfo = resultLast.SingleOrDefault(t => t.Item1.Equals(axisX));
                Tuple<string, double> curInfo = resultCur.SingleOrDefault(t => t.Item1.Equals(axisX));
                if (lastInfo != null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item2, lastInfo.Item2, GetGrowthRatio(curInfo.Item2, lastInfo.Item2)));
                else if (lastInfo != null && curInfo == null)
                    result.Add(new Tuple<string, double, double, double>(axisX, 0, lastInfo.Item2, lastInfo.Item2 == 0 ? 0 : - 100));
                else if (lastInfo == null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item2, 0, curInfo.Item2 == 0 ? 0 : 100));
                else
                {
                    if (type != ReportDimension.ManufacturerType && type != ReportDimension.EquipmentType)
                        result.Add(new Tuple<string, double, double, double>(axisX, 0, 0, 0));
                }
            }
            return result;
        }
        /// <summary>
        /// 维度为‘厂商分布’的合并补缺的数据取前10个
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="result">合并补缺的数据</param>
        /// <param name="limitRecord">是否需要取前10</param>
        /// <returns>统计后的数据</returns>
        private static List<Tuple<string, double, double, double>> GetTopManufacturer(int type, List<Tuple<string, double, double, double>> result, bool limitRecord)
        {
            if (limitRecord == true && type == ReportDimension.ManufacturerType)
            {
                List<Tuple<string, double, double, double>> resort = new List<Tuple<string, double, double, double>>();

                foreach (var item in result.OrderByDescending(x => x.Item4))
                {
                    resort.Add(item);

                    if (resort.Count == 10) break;
                }
                result = resort;
            }
            return result;
        }
        /// <summary>
        /// 维度为‘厂商分布’的补缺后的数据取前10个
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="result">补缺的数据</param>
        /// <param name="limitRecord">是否需要取前10</param>
        /// <returns>统计后的数据</returns>
        private static List<Tuple<string, double>> GetTopManufacturer(int type, List<Tuple<string, double>> result, bool limitRecord)
        {
            if (limitRecord == true && type == ReportDimension.ManufacturerType)
            {
                List<Tuple<string, double>> manu = new List<Tuple<string, double>>();
                foreach (var item in result.OrderByDescending(x => x.Item2))
                {
                    manu.Add(new Tuple<string,double>(item.Item1, item.Item2));
                    if (manu.Count == 10) break;
                }
                result = manu;
            }
            return result;
        }
        /// <summary>
        /// 计算开机率/故障率同比
        /// </summary>
        /// <param name="type">维度编号</param>
        /// <param name="resultA">当年数据</param>
        /// <param name="resultB">去年数据</param>
        /// <returns>同比后的数据</returns>
        private List<Tuple<string, double, double, double>> GetVSRatio(int type, List<Tuple<string, double, int, int, double>> resultA, List<Tuple<string, double, int, int, double>> resultB)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            List<string> axisXList = GetAxisXList(type);
            Tuple<string, double, int, int, double> lastInfo = null;
            Tuple<string, double, int, int, double> curInfo = null;
            foreach (string axisX in axisXList)
            {
                lastInfo = resultB.SingleOrDefault(t => t.Item1.Equals(axisX));
                curInfo = resultA.SingleOrDefault(t => t.Item1.Equals(axisX));
                if (lastInfo != null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item5, lastInfo.Item5, GetVSRatio(curInfo.Item5, lastInfo.Item5)));
                else if (lastInfo != null && curInfo == null)
                    result.Add(new Tuple<string, double, double, double>(axisX, 0, lastInfo.Item5, 0));
                else if (lastInfo == null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item5, 0, curInfo.Item5 == 0 ? 0 : 100));
                else
                {
                    if (type != ReportDimension.ManufacturerType && type != ReportDimension.EquipmentType)
                        result.Add(new Tuple<string, double, double, double>(axisX, 0, 0, 0));
                }
            }
            return result;
        }
        /// <summary>
        /// Tuple类型的数据同比、补缺
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="income">分子数据</param>
        /// <param name="expenditure">分母数据</param>
        /// <param name="axisXList">数据列表</param>
        /// <returns>同比、补缺后的数据</returns>
        private List<Tuple<string, double, double, double>> GetVSRatio(int type, List<Tuple<string, double>> income, List<Tuple<string, double>> expenditure, List<string> axisXList)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            foreach (var axisX in axisXList)
            {
                Tuple<string, double> curInfo = income.SingleOrDefault(t => t.Item1.Equals(axisX));
                Tuple<string, double> lastInfo = expenditure.SingleOrDefault(t => t.Item1.Equals(axisX));
                if (lastInfo != null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item2, lastInfo.Item2, GetVSRatio(curInfo.Item2, lastInfo.Item2)));
                else if (lastInfo != null && curInfo == null)
                    result.Add(new Tuple<string, double, double, double>(axisX, 0.00, lastInfo.Item2, 0));
                else if (lastInfo == null && curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(axisX, curInfo.Item2, 0, curInfo.Item2 == 0 ? 0 : 100.0));
                else
                {
                    if (type != ReportDimension.ManufacturerType && type != ReportDimension.EquipmentType)
                        result.Add(new Tuple<string, double, double, double>(axisX, 0, 0, 0));
                }
            }

            return result;
        }
        /// <summary>
        /// Dictionary类型的数据同比、补缺
        /// </summary>
        /// <param name="type">维度类型</param>
        /// <param name="income">分子数据</param>
        /// <param name="expenditure">分母数据</param>
        /// <param name="axisXList">数据列表</param>
        /// <returns>同比、补缺后的数据</returns>
        private List<Tuple<string, double, double, double>> GetVSRatio(int type, Dictionary<string, double> income, Dictionary<string, double> expenditure, List<string> axisXList)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            foreach (var axisX in axisXList)
            {
                if (income.ContainsKey(axisX) && expenditure.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, income[axisX], expenditure[axisX], GetVSRatio(income[axisX], expenditure[axisX])));
                else if (income.ContainsKey(axisX) && !expenditure.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, income[axisX], 0, income[axisX] == 0 ? 0 : 100.0));
                else if (!income.ContainsKey(axisX) && expenditure.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, 0.00, expenditure[axisX], 0));
                else
                {
                    if (type != ReportDimension.ManufacturerType && type != ReportDimension.EquipmentType)
                        result.Add(new Tuple<string, double, double, double>(axisX, 0, 0, 0));
                }           
            }

            return result;
        }     
        
        /// <summary>
        /// 获取设备数量
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>维度下设备数量列表</returns>
        public List<Tuple<string, double>> GetEquipmentCount(int type, int year, int month)
        {
            Dictionary<string, double> result = new Dictionary<string, double>(); 
            List<string> axisXList = GetAxisXList(type, year);
            switch (type)
            {
                case ReportDimension.AcceptanceMonth:
                    foreach (var axis in axisXList)
                    {
                        result.Add(axis, this.reportDao.EquipmentCount(year, SQLUtil.ConvertInt(axis)));
                    }
                    break;
                case ReportDimension.AcceptanceYear:
                    year = this.reportDao.ReportEquipmentCountMinYear();
                    if (year == 0) year = DateTime.Today.Year;
                    axisXList = GetAxisXList(type, year);
                    foreach (var axis in axisXList)
                    {
                        result.Add(axis, this.reportDao.EquipmentCount(SQLUtil.ConvertInt(axis), 0));
                    }
                    break;
                case ReportDimension.AmountType:
                    result = this.reportDao.ReportEquipmentCountByPurchaseAmount(year, month);
                    break;
                case ReportDimension.UsageTimeType:
                    result = this.reportDao.ReportEquipmentCountByUsageTime(year, month);
                    break;
                default:
                    DataTable dtCount = this.reportDao.ReportEquipmentCount(type, year, month);
                    string axisX = null;
                    foreach (DataRow dr in dtCount.Rows)
                    {
                        axisX = GetAxisX(type, dr);
                        result.Add(axisX, SQLUtil.ConvertInt(dr[1]));
                    }
                    break;
            }

            return FillMissingAxis(type, result, axisXList);
        }
        /// <summary>
        /// 设备数量报表(type,eqptCount)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="limitRecord">是否需要获取前10的厂商</param>
        /// <returns>设备数量列表</returns>
        public List<Tuple<string, double>> EquipmentCountReport(int type, int year, bool limitRecord = false)
        {
            List<Tuple<string, double>> result = GetEquipmentCount(type, year, 0);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 设备数量增长率报表(type,cur,last,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否需要厂商维度下取前10</param>
        /// <returns>设备数量增长率统计</returns>
        public List<Tuple<string, double, double, double>> ReportEquipmentRatio(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            List<Tuple<string, double>> resultCur = GetEquipmentCount(type, year, month);
            List<Tuple<string, double>> resultLast = GetEquipmentCount(type, year - 1, month);

            List<string> axisList = GetAxisXList(type);
            result = FillMissingAxis(type, resultCur, resultLast, axisList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 计算故障率
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>故障率</returns>
        private List<Tuple<string, double, int, int, double>> ReportEquipmentRepairTimeRatioInternal(int type, int year, int month = 0)
        {
            List<Tuple<string, double, int, int, double>> result = new List<Tuple<string, double, int, int, double>>();
            Dictionary<string, double> dicRepairTime = new Dictionary<string,double>();
            Dictionary<string, double> dicCount = new Dictionary<string,double>();

            List<string> axisXList = GetAxisXList(type, year);
            if (year == 0) year = DateTime.Today.Year;
            Tuple<DateTime, DateTime> dateRange = GetDateRange(year, month, true);
            DateTime yearBegin = new DateTime(year, 1, 1);
            int thisYear = 0;
            int totalDays = (dateRange.Item2 - dateRange.Item1).Days;

            switch (type)
            {
                case ReportDimension.AcceptanceYear:
                    year = this.reportDao.ReportEquipmentRepairTimeRatioMinYear();
                    if (year == 0) year = DateTime.Today.Year;
                    axisXList = GetAxisXList(type, year);
                    foreach (var axis in axisXList)
                    {
                        thisYear = SQLUtil.ConvertInt(axis);
                        yearBegin = new DateTime(thisYear, 1, 1);
                        totalDays = (yearBegin.AddYears(1) - yearBegin).Days;
                        int equipCount = this.reportDao.EquipmentCount(thisYear, 0);
                        int repairTime = this.reportDao.ReportEquipmentRepairTimeRatioByPurchaseDate(yearBegin, yearBegin.AddYears(1));
                        double repairTimeRatio = equipCount == 0 ? 0 : Math.Round(repairTime * 100.00 / totalDays / 24 / equipCount, 2);

                        result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(thisYear), SQLUtil.ConvertDouble(repairTime), totalDays, equipCount, repairTimeRatio));
                    }
                    break;
                case ReportDimension.AcceptanceMonth:
                    foreach (var axis in axisXList)
                    {
                        int thisMonth = SQLUtil.ConvertInt(axis);
                        int equipCount = this.reportDao.EquipmentCount(year, thisMonth);
                        DateTime monthBegin = new DateTime(year, thisMonth, 1);
                        int repairTime = this.reportDao.ReportEquipmentRepairTimeRatioByPurchaseDate(monthBegin, monthBegin.AddMonths(1));

                        double repairTimeRatio = equipCount == 0 ? 0 : Math.Round(repairTime * 100.00 / monthBegin.AddMonths(1).AddDays(-1).Day / 24 / equipCount, 2);
                        result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(thisMonth), SQLUtil.ConvertDouble(repairTime), monthBegin.AddMonths(1).AddDays(-1).Day, equipCount, repairTimeRatio));
                    }
                    break;
                case ReportDimension.UsageTimeType:
                    dicRepairTime = this.reportDao.ReportEquipmentRepairTimeRatioByUsageTime(dateRange.Item1, dateRange.Item2);
                    dicCount = this.reportDao.ReportEquipmentCountByUsageTime(year, month);
                    foreach (var axisX in axisXList)
                    {
                        if (dicRepairTime.ContainsKey(axisX) && dicRepairTime[axisX] != 0 &&
                            dicCount.ContainsKey(axisX) && dicCount[axisX] != 0)
                        {
                            double repairTimeRatio = Math.Round(dicRepairTime[axisX] * 100.00 / totalDays / 24 / SQLUtil.ConvertInt(dicCount[axisX]), 2);
                            result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(axisX), SQLUtil.ConvertDouble(dicRepairTime[axisX]), totalDays, SQLUtil.ConvertInt(dicCount[axisX]), repairTimeRatio));
                        }
                        else
                            result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(axisX), 0, totalDays, 0, 0));
                    }
                    break;
                case ReportDimension.AmountType:
                    dicRepairTime = this.reportDao.ReportEquipmentRepairTimeRatioByPurchaseAmount(dateRange.Item1, dateRange.Item2);
                    dicCount = this.reportDao.ReportEquipmentCountByPurchaseAmount(year, month);
                    foreach (var axisX in axisXList)
                    {
                        if (dicRepairTime.ContainsKey(axisX) && dicRepairTime[axisX] != 0 &&
                            dicCount.ContainsKey(axisX) && dicCount[axisX] != 0)
                        {
                            double repairTimeRatio = Math.Round(dicRepairTime[axisX] * 100.00 / totalDays / 24 / SQLUtil.ConvertInt(dicCount[axisX]), 2);
                            result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(axisX), SQLUtil.ConvertDouble(dicRepairTime[axisX]), totalDays, SQLUtil.ConvertInt(dicCount[axisX]), repairTimeRatio));
                        }
                        else
                            result.Add(new Tuple<string, double, int, int, double>(SQLUtil.TrimNull(axisX), 0, totalDays, 0, 0));
                    }
                    break;
                default:
                    DataTable dtRepairTime = this.reportDao.ReportEquipmentRepairTimeRatio(type, dateRange.Item1, dateRange.Item2);
                    DataTable dtCount = this.reportDao.ReportEquipmentCount(type, year, month);
                    foreach (string axisX in axisXList)
                    {
                        DataRow drCount = (from DataRow temp in dtCount.Rows where GetAxisX(type, temp) == axisX select temp).FirstOrDefault();
                        DataRow drRepair = (from DataRow temp in dtRepairTime.Rows where GetAxisX(type, temp) == axisX select temp).FirstOrDefault();
                        if (drCount == null || SQLUtil.ConvertInt(drCount[1]) == 0 || drRepair == null || SQLUtil.ConvertInt(drRepair[1]) == 0)
                        {
                            if(type != ReportDimension.EquipmentType && type != ReportDimension.ManufacturerType)
                                result.Add(new Tuple<string, double, int, int, double>(axisX, 0, totalDays, drCount == null ? 0 : SQLUtil.ConvertInt(drCount[1]), 0));
                        }
                        else
                            result.Add(new Tuple<string, double, int, int, double>(axisX, SQLUtil.ConvertDouble(drRepair[1]), totalDays,
                                    SQLUtil.ConvertInt(drCount[1]), Math.Round(SQLUtil.ConvertDouble(SQLUtil.ConvertInt(drRepair[1]) * 100.0 / 24 / totalDays / SQLUtil.ConvertDouble(drCount[1])), 2)));
                    }
                    break;
            }

            return result;
        }
        /// <summary>
        /// 故障率报表(type,repairTime,totalTime,eqptCount,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>故障率统计</returns>
        public List<Tuple<string, double, int, int, double>> ReportEquipmentRepairTimeRatio(int type, int year, bool limitRecord = false)
        {
            List<Tuple<string, double, int, int, double>> result = new List<Tuple<string, double, int, int, double>>();
            
            result = ReportEquipmentRepairTimeRatioInternal(type, year, 0);

            if (limitRecord == true && type == ReportDimension.ManufacturerType)
            {
                List<Tuple<string, double, int, int, double>> resort = new List<Tuple<string, double, int, int, double>>();

                foreach (var item in result.OrderByDescending(x => x.Item5))
                {
                    resort.Add(item);

                    if (resort.Count == 10) break;
                }

                result = resort;
            }

            return result;
        }
        /// <summary>
        /// 故障率同比报表(type,curRatio,lastRatio, Ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>故障率同比统计</returns>
        public List<Tuple<string, double, double, double>> ReportFailureRatio(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double, int, int, double>> resultA = ReportEquipmentRepairTimeRatioInternal(type, year, month);
            List<Tuple<string, double, int, int, double>> resultB = ReportEquipmentRepairTimeRatioInternal(type, year - 1, month);

            List<Tuple<string, double, double, double>> result = GetVSRatio(type, resultA, resultB);
            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 开机率报表(type,repairTime,totalTime,eqptCount,ratio)
       /// </summary>
       /// <param name="type">维度</param>
       /// <param name="year">年份</param>
       /// <param name="limitRecord">是否厂商维度取前10</param>
       /// <returns>开机率统计</returns>
        public List<Tuple<string, double, int, int, double>> ReportEquipmentBootRatio(int type, int year, bool limitRecord = false)
        {
            List<Tuple<string, double, int, int, double>> result = ReportEquipmentRepairTimeRatioInternal(type, year, 0);
            result = GetBoot(result);

            if (limitRecord == true && type == ReportDimension.ManufacturerType)
            {
                List<Tuple<string, double, int, int, double>> resort = new List<Tuple<string, double, int, int, double>>();

                foreach (var item in result.OrderByDescending(x => x.Item5))
                {
                    resort.Add(item);

                    if (resort.Count == 10) break;
                }

                result = resort;
            }

            return result;
        }
        /// <summary>
        /// 根据故障率计算开机率(type,repairTime,totalTime,eqptCount,ratio)
        /// </summary>
        /// <param name="dic">故障率统计</param>
        /// <returns>设备开机率</returns>
        public List<Tuple<string, double, int, int, double>> GetBoot(List<Tuple<string, double, int, int, double>> dic)
        {
            List<Tuple<string, double, int, int, double>> result = new List<Tuple<string, double, int, int, double>>();
            foreach (var item in dic)
            {
                result.Add(new Tuple<string, double, int, int, double>(item.Item1, item.Item2, item.Item3, item.Item4, Math.Round(100 - item.Item5,2)));
            }
            dic = result;
            return dic;
        }
        /// <summary>
        /// 开机率同比报表(type,curRatio,lastRatio, Ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>开机率同比统计</returns>
        public List<Tuple<string, double, double, double>> ReportBootRatio(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double, int, int, double>> resultA = ReportEquipmentRepairTimeRatioInternal(type, year, month);
            resultA = GetBoot(resultA);

            List<Tuple<string, double, int, int, double>> resultB = ReportEquipmentRepairTimeRatioInternal(type, year - 1, month);
            resultB = GetBoot(resultB);

            List<Tuple<string, double, double, double>> result = GetVSRatio(type, resultA, resultB);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 故障时间（天）(type,eqptCount)报表
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>故障时间(天)报表统计</returns>
        public List<Tuple<string, double>> ReportEquipmentRepairTimeDay(int year, int month)
        {
            Tuple<DateTime, DateTime> dateRange = GetDateRange(year, month, true);
            Dictionary<string, double> raw = this.reportDao.ReportEquipmentRepairTimeDay(dateRange.Item1, dateRange.Item2);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetRepairDaysList(),"Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 故障时间（小时）(type,eqptCount)报表
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>故障时间(小时)报表统计</returns>
        public List<Tuple<string, double>> ReportEquipmentRepairTimeHour(int year, int month)
        {
            Tuple<DateTime, DateTime> dateRange = GetDateRange(year, month, true);
            Dictionary<string, double> raw = this.reportDao.ReportEquipmentRepairTimeHour(dateRange.Item1, dateRange.Item2);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetRepairHoursList(), "Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 设备采购价格报表(type,eqptCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备采购价格</returns>
        public List<Tuple<string, double>> EquipmentCountByPurchaseAmount(int year, int month)
        {
            Dictionary<string, double> raw = this.reportDao.EquipmentCountByPurchaseAmount(year, month);
            List<string> axisXList = GetAxisXList(ReportDimension.AmountType);

            return FillMissingAxis(ReportDimension.AmountType, raw, axisXList);
        }
        /// <summary>
        /// 合同金额报表(type,eqptCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>合同金额</returns>
        public List<Tuple<string, double>> ReportContractAmount(int year, int month)
        {
            Tuple<DateTime, DateTime> dateRange = GetDateRange(year, month);
            Dictionary<string, double> raw = this.reportDao.ReportContractAmount(dateRange.Item1, dateRange.Item2.AddDays(-1));
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetContractAmountList(), "Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 合同年限报表(type,eqptCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>合同年限</returns>
        public List<Tuple<string, double>> ReportContractMonth(int year, int month)
        {
            Tuple<DateTime, DateTime> dateRange = GetDateRange(year, month);
            Dictionary<string, double> raw = this.reportDao.ReportContractMonths(dateRange.Item1, dateRange.Item2.AddDays(-1));
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetContractMonthList(), "Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 请求响应时间报表(type,requestCount)
        /// </summary>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>请求响应时间</returns>
        public List<Tuple<string, double>> ResponseTime(int requestType, int year, int month)
        {
            Dictionary<string, double> res = this.reportDao.ResponseTime(requestType, year, month);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetResponseTimeList(), "Name");

            return FillMissingAxis(0, res, axisXList);
        }
        /// <summary>
        /// 折旧剩余年限报表(type,eqptCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>折旧剩余年限</returns>
        public List<Tuple<string, double>> ReportDepreciationYears(int year, int month)
        {
            Dictionary<string, double> raw = this.reportDao.ReportDepreciationYears(year, month);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetDepreciationYearsList(), "Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 折旧率报表(type,eqptCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>折旧率统计</returns>
        public List<Tuple<string, double>> DepreciationRate(int year, int month)
        {
            Dictionary<string, double> raw = this.reportDao.ReportDepreciationRate(year, month);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetDepreciationRationList(), "Name");

            return FillMissingAxis(0, raw, axisXList);
        }
        /// <summary>
        /// 服务人次报表(type,number)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>服务人次统计</returns>
        public List<Tuple<string, double>> ServiceCountReport(int type, int year, bool limitRecord = false)
        {
            Dictionary<string, double> raw = new Dictionary<string, double>();

            if ( type == ReportDimension.AcceptanceMonth)
                raw = this.reportDao.ReportServiceCountByAcceptanceMonth(year);
            else if(type == ReportDimension.AcceptanceYear){
                raw = this.reportDao.ReportServiecCountByAcceptanceYear();
                if(raw.Count != 0)
                    year = SQLUtil.ConvertInt(raw.Keys.Min());
                if (year == 0) year = DateTime.Today.Year;
            }
            else if (type == ReportDimension.AmountType)
                raw = this.reportDao.ReportServiceCountByPurchaseAmount(year);
            else if (type == ReportDimension.UsageTimeType)
                raw = this.reportDao.ReportServiceCountByDepreciationYears(year);
            else
            {
                DataTable count = null;
                count = this.reportDao.ReportServiceCount(type, year);
                string axisX = null;
                foreach (DataRow dr in count.Rows)
                {
                    axisX = GetAxisX(type, dr);
                    raw.Add(axisX, SQLUtil.ConvertDouble(dr[1]));
                }
            }

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double>> result = FillMissingAxis(type, raw, axisXList);

            result = GetTopManufacturer(type, result, limitRecord);

            return result;
        }        
        /// <summary>
        /// 设备检查收入报表(type,amount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>设备检查收入统计</returns>
        public List<Tuple<string, double>> ReportEquipmentCountByIncome(int year, int month)
        {
            Dictionary<string, double> result = this.reportDao.ReportEquipmentCountByIncome(year, month);
            return FillMissingAxis(ReportDimension.AmountType, result, GetAxisXList(ReportDimension.AmountType));
        }
        /// <summary>
        /// 零备件花费报表(type,amount)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>零配件花费统计</returns>
        public List<Tuple<string, double>> PartExpenditureReport(int type, int year, int month = 0, bool limitRecord = false)
        {
            Dictionary<string, double> raw = new Dictionary<string, double>();
            if (type == ReportDimension.AcceptanceMonth)
                raw = this.reportDao.ReportEquipmentExpenditureByAcceptanceMonth(year);
            else if (type == ReportDimension.AcceptanceYear)
            {
                raw = this.reportDao.ReportEquipmentExpenditureByAcceptanceYear();
                if (raw.Count != 0)
                    year = SQLUtil.ConvertInt(raw.Keys.Min());
                if (year == 0) year = DateTime.Today.Year;
            }
            else if (type == ReportDimension.AmountType)
                raw = this.reportDao.ReportEquipmentExpenditureByPurchaseAmount(year, month);
            else if (type == ReportDimension.UsageTimeType)
                raw = this.reportDao.ReportEquipmentExpenditureByUsageTime(year, month);
            else
            {
                DataTable count = null;
                count = this.reportDao.ReportEquipmentExpenditure(type, year, month);
                string axisX = null;

                foreach (DataRow dr in count.Rows)
                {
                    axisX = GetAxisX(type, dr);
                    raw.Add(axisX, SQLUtil.ConvertDouble(dr[1]));
                }
            }

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double>> result = FillMissingAxis(type, raw, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 总支出同比报表(type,cur,last,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>总支出同比统计</returns>
        public List<Tuple<string, double, double, double>> ReportExpenditureRatio(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double>> resultCur = PartExpenditureReport(type, year, month, false);
            List<Tuple<string, double>> resultLast = PartExpenditureReport(type, year - 1, month, false);

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double, double, double>> result = GetVSRatio(type, resultCur, resultLast, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 设备总收入报表(type,amount)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>设备总收入统计</returns>
        public List<Tuple<string, double>> ReportEquipmentIncome(int type, int year = 0, int month = 0, bool limitRecord = false)
        {
            Dictionary<string, double> raw = new Dictionary<string, double>();
            if ( type == ReportDimension.AcceptanceMonth)
                raw = this.reportDao.ReportEquipmentIncomeByAcceptanceDate(year);
            else if(type == ReportDimension.AcceptanceYear){
                raw = this.reportDao.ReportEquipmentIncomeByAcceptanceDate();
                if (raw.Count != 0)
                    year = SQLUtil.ConvertInt(raw.Keys.Min());
                if (year == 0) year = DateTime.Today.Year;
            }
            else if (type == ReportDimension.AmountType)
                raw = this.reportDao.ReportEquipmentIncomeByPurchaseAmount(year, month);
            else if (type == ReportDimension.UsageTimeType)
                raw = this.reportDao.ReportEquipmentIncomeByUsageTime(year, month);
            else
            {
                DataTable count = null;
                count = this.reportDao.ReportEquipmentIncome(type, year, month);
                string axisX = null;
                foreach (DataRow dr in count.Rows)
                {
                    axisX = GetAxisX(type, dr);

                    raw.Add(axisX, SQLUtil.ConvertDouble(dr[1]));
                }
            }

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double>> result = FillMissingAxis(type, raw, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 设备总收入同比报表(type,cur,last,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>设备总收入同比统计</returns>
        public List<Tuple<string, double, double, double>> ReportEquipmentIncomeRatio(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double>> resultCur = ReportEquipmentIncome(type, year, month, false);
            List<Tuple<string, double>> resultLast = ReportEquipmentIncome(type, year - 1, month, false);
            List<string> axisXList = GetAxisXList(type, year);

            List<Tuple<string, double, double, double>> result = GetVSRatio(type, resultCur, resultLast, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 收支比报表(type,income,expenditure,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>设备收支比统计</returns>
        public List<Tuple<string, double, double, double>> IncomeRatioExpenditure(int type, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double>> income = ReportEquipmentIncome(type, year, month);
            List<Tuple<string, double>> expenditure = PartExpenditureReport(type, year, month);
            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double, double, double>> result = GetVSRatio(type, income, expenditure, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        
        /// <summary>
        /// 请求数量(type,requestType)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>请求数量统计</returns>
        public List<Tuple<string, double>> RequestCount(int type, int requestType = 0, int status = 0, int year = 0, int month = 0, bool limitRecord = false)
        {
            Dictionary<string,double> raw = new Dictionary<string,double>();
            switch(type){
                case ReportDimension.AcceptanceYear:
                    raw = this.reportDao.RequestCountByDate(requestType, status);
                    if (raw.Count != 0)
                        year = SQLUtil.ConvertInt(raw.Keys.Min());
                    if (year == 0) year = DateTime.Today.Year;
                    break;
                case ReportDimension.AcceptanceMonth:
                    raw = this.reportDao.RequestCountByDate(requestType, status, year);
                    break;
                case ReportDimension.AmountType:
                    raw = this.reportDao.RequestCountByPurchaseAmount(requestType, status, year, month);
                    break;
                case ReportDimension.UsageTimeType:
                    raw = this.reportDao.RequestCountByUsageTime(requestType, status, year, month);
                    break;
                default:
                    DataTable dtCount = this.reportDao.ReportRequestCount(type,requestType,status,year,month);
                    
                    string axisX = null;
                    foreach (DataRow dr in dtCount.Rows)
                    {
                        axisX = GetAxisX(type, dr);
                        raw.Add(axisX, SQLUtil.ConvertInt(dr[1]));
                    }
                    break;
            }

            List<string> axisXList = GetAxisXList(type,year);
            List<Tuple<string, double>> result = FillMissingAxis(type, raw, axisXList);
            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 请求比率(type,statusRequestCount,totalCount,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>请求比率统计</returns>
        public List<Tuple<string, double, double, double>> RequestRatio(int type, int requestType, int status, int year = 0, int month = 0, bool limitRecord = false)
        {

            List<Tuple<string, double>> resultByStatus = RequestCount(type, requestType, status, year, month, false);
            List<Tuple<string, double>> resultTotle = RequestCount(type, requestType, 0, year, month, false);

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double, double, double>> result = GetVSRatio(type, resultByStatus, resultTotle, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 请求数量增长率报表(type,cur,last,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="status">请求状态</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>请求数量增长率</returns>
        public List<Tuple<string, double, double, double>> RequestGrowthRatioReport(int type, int requestType, int status, int year, int month, bool limitRecord = false)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            List<Tuple<string, double>> resultCur = RequestCount(type, requestType, status, year, month, false);
            List<Tuple<string, double>> resultLast = RequestCount(type, requestType, status, year - 1, month, false);

            List<string> axisList = GetAxisXList(type);
            result = FillMissingAxis(type, resultCur, resultLast, axisList);
           
            return GetTopManufacturer(type, result, limitRecord);
        }

        /// <summary>
        /// 供应商保养/维修数量(type,requestCount)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>供应商保养/维修数量</returns>
        public List<Tuple<string, double>> ResultCount(int type, int requestType, int year, int month = 0, bool limitRecord = false)
        {
            Dictionary<string, double> raw = new Dictionary<string, double>();
            switch (type)
            {
                case ReportDimension.AcceptanceYear:
                    raw = this.reportDao.RequestCount_supplierByDate(requestType, year);
                    if (raw.Count != 0)
                        year = SQLUtil.ConvertInt(raw.Keys.Min());
                    if (year == 0) year = DateTime.Today.Year;
                    break;
                case ReportDimension.AcceptanceMonth:
                    raw = this.reportDao.RequestCount_supplierByDate(requestType, year);
                    break;
                case ReportDimension.AmountType:
                    raw = this.reportDao.RequestCount_supplierByPurchaseAmount(requestType,  year, month);
                    break;
                case ReportDimension.UsageTimeType:
                    raw = this.reportDao.RequestCount_supplierByUsageTime(requestType, year, month);
                    break;
                default:
                    DataTable dtCount = this.reportDao.RequestCount_supplier(type, requestType, year, month);
                    
                    string axisX = null;
                    foreach (DataRow dr in dtCount.Rows)
                    {
                        axisX = GetAxisX(type, dr);
                        raw.Add(axisX, SQLUtil.ConvertInt(dr[1]));
                    }
                    break;
            }

            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double>> result = FillMissingAxis(type, raw, axisXList);

            result = GetTopManufacturer(type, result, limitRecord);
            return result;
        }
        /// <summary>
        /// 内部保养/维修数量(type,requestCount)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>内部保养/维修数量</returns>
        public List<Tuple<string, double>> SelfResultCount(int type, int requestType, int year, int month = 0, bool limitRecord = false)
        {
            List<Tuple<string, double>> result = new List<Tuple<string, double>>();
            List<Tuple<string, double>> BySupplier = ResultCount(type, requestType, year, month, false);
            List<Tuple<string, double>> total = RequestCount(type, requestType, 0, year, month, false);
            if(type == ReportDimension.AcceptanceYear) year = SQLUtil.ConvertInt(total[0].Item1);
            List<string> axisXList = GetAxisXList(type, year);
            foreach (string axisX in axisXList)
            {
                Tuple<string,double> supplierInfo = BySupplier.SingleOrDefault(t => t.Item1.Equals(axisX));
                Tuple<string,double> totalInfo = total.SingleOrDefault(t => t.Item1.Equals(axisX));
                if (supplierInfo != null && totalInfo != null)
                {
                    result.Add(new Tuple<string, double>(axisX,Math.Round(totalInfo.Item2 - supplierInfo.Item2,2)));
                }
                else if(supplierInfo == null && totalInfo != null)
                {
                    result.Add(new Tuple<string, double>(axisX, totalInfo.Item2));
                }
                else
                {
                    if(type != ReportDimension.EquipmentType && type != ReportDimension.ManufacturerType)
                        result.Add(new Tuple<string, double>(axisX, 0));
                }
            }

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 供应商维修/保养率(type,requestCount,totalCount,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>供应商维修/保养率统计</returns>
        public List<Tuple<string, double, double, double>> ResultRatio_supplier(int type, int requestType, int year, int month = 0, bool limitRecord = false)
        {
            List<Tuple<string, double>> supplierResult = ResultCount(type, requestType, year, month, false);
            List<Tuple<string, double>> totalResult = RequestCount(type, requestType, 0, year, month, false);

            List<string> axisXList = GetAxisXList(type, year);

            List<Tuple<string, double, double, double>> result = GetVSRatio(type, supplierResult, totalResult, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 自修/保养率(type,requestCount,totalCount,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="requestType">请求类型</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>自修/保养率</returns>
        public List<Tuple<string, double, double, double>> ResultRatio_self(int type, int requestType, int year, int month = 0, bool limitRecord = false)
        {
            List<string> axisXList = GetAxisXList(type, year);
            List<Tuple<string, double, double, double>> resultSupplier = ResultRatio_supplier(type, requestType, year, month,false);
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            foreach (string axisX in axisXList)
            {
                Tuple<string, double, double, double> curInfo = resultSupplier.SingleOrDefault(t => t.Item1.Equals(axisX));
                if (curInfo != null)
                    result.Add(new Tuple<string, double, double, double>(curInfo.Item1, Math.Round(curInfo.Item3 - curInfo.Item2,2), curInfo.Item3, Math.Round(100 - curInfo.Item4,2)));
                else
                {
                    if(type != ReportDimension.EquipmentType && type != ReportDimension.ManufacturerType)
                        result.Add(new Tuple<string, double, double, double>(axisX, 0, 0, 0));
                }
            }

            return GetTopManufacturer(type, result, limitRecord);
        }
        /// <summary>
        /// 派工响应时间报表(type,dispatchCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <returns>派工响应时间统计</returns>
        public List<Tuple<string,double>> ResponseDispatchTime(int year, int month)
        {
            Dictionary<string,double> raw = this.reportDao.QueryResponseDispatchTime(year, month);
            List<string> axisXList = SQLUtil.GetStringListFromObjectList(ReportDimension.GetDispatchResponseTimeList(), "Name");
            List<Tuple<string, double>> result = FillMissingAxis(0, raw, axisXList);

            return result;
        }
        /// <summary>
        /// 派工执行率报表(type,approveCount,totalDispatchCount,ratio)
        /// </summary>
        /// <param name="type">维度</param>
        /// <param name="year">年份</param>
        /// <param name="month">月份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>派工执行率统计</returns>
        public List<Tuple<string, double, double, double>> DispatchResponseRatio(int type, int year, int month, bool limitRecord)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            Dictionary<string, double> approved = new Dictionary<string, double>();
            Dictionary<string, double> total = new Dictionary<string, double>();
            switch (type)
            {
                case ReportDimension.AmountType:
                    total = this.reportDao.DispatchResponseCountByPurchaseAmount(0, year, month);
                    approved = this.reportDao.DispatchResponseCountByPurchaseAmount(DispatchInfo.Statuses.Approved, year, month);
                    break;
                case ReportDimension.UsageTimeType:
                    total = this.reportDao.DispatchResponseCountByUsageTime(0, year, month);
                    approved = this.reportDao.DispatchResponseCountByUsageTime(DispatchInfo.Statuses.Approved, year, month);
                    break;
                default:
                    DataTable dtTotal = this.reportDao.DispatchResponseCount(type, 0, year, month);
                    DataTable dtResponse = this.reportDao.DispatchResponseCount(type, DispatchInfo.Statuses.Approved, year, month);
                    string axisX = null;
                    foreach (DataRow dr in dtTotal.Rows)
                    {
                        axisX = GetAxisX(type, dr);
                        total.Add(axisX, SQLUtil.ConvertInt(dr[1]));
                    }
                    foreach (DataRow dr in dtResponse.Rows)
                    {
                        axisX = GetAxisX(type, dr);
                        approved.Add(axisX, SQLUtil.ConvertInt(dr[1]));
                    }
                    break;
            }
            List<string> axisXList = GetAxisXList(type, year);

            result = GetVSRatio(type, approved, total, axisXList);

            return GetTopManufacturer(type, result, limitRecord);
        }
        
        /// <summary>
        /// 服务时间达标率报表(type,overdueCount,requestCount)
        /// </summary>
        /// <param name="year">年份</param>
        /// <param name="limitRecord">是否厂商维度取前10</param>
        /// <returns>服务时间达标率统计</returns>
        public List<Tuple<string, double, double, double>> ServicePassRatio(int year, bool limitRecord)
        {
            List<Tuple<string, double, double, double>> result = new List<Tuple<string, double, double, double>>();
            Dictionary<string, double> overdue = this.reportDao.ServiceCountByDate(true, year);
            Dictionary<string, double> total = this.reportDao.ServiceCountByDate(false, year);
            List<string> axisXList;
            if (year > 0)
            {
                 axisXList = GetAxisXList(ReportDimension.AcceptanceMonth, year);
            }else{
                int yearMin = 0;
                if (total.Count != 0)
                    yearMin = SQLUtil.ConvertInt(total.Keys.Min());
                if (yearMin == 0) yearMin = DateTime.Today.Year;
                axisXList = GetAxisXList(ReportDimension.AcceptanceYear, yearMin);
            }
            
            foreach (var axisX in axisXList)
            {
                if (overdue.ContainsKey(axisX) && total.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, Math.Round(total[axisX] - overdue[axisX],2), total[axisX], GetVSRatio(total[axisX] - overdue[axisX], total[axisX])));
                else if (overdue.ContainsKey(axisX) && !total.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, overdue[axisX], 0, 100.0));
                else if (!overdue.ContainsKey(axisX) && total.ContainsKey(axisX))
                    result.Add(new Tuple<string, double, double, double>(axisX, total[axisX], total[axisX], 100));
                else
                {
                    result.Add(new Tuple<string, double, double, double>(axisX, 0, 0,100.0));
                }
            }

            return result;
        }
    
    }
}


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------

----------------------------------------------------------------------DispatchJournalDetail.cshtml----------------------------------------------------------------------------------------

@{
    ViewBag.Title = ViewBag.ActionName;
    Layout = "~/Views/Shared/_SubMain.cshtml";
    string actionName = ViewBag.ActionName;
    List<BusinessObjects.Domain.KeyValueInfo> resultStatus = BusinessObjects.Manager.LookupManager.GetDispatchJournalResultStatus();
    BusinessObjects.Domain.UserInfo user = (BusinessObjects.Domain.UserInfo)Session[MedicalEquipmentHostingSystem.Controllers.BaseController.SESSION_KEY_USER];
    int ID = ViewBag.ID;
}
<div id="dispatchJournalVue" v-cloak class="tblDiv">
    <div>
        <a class="linkFile backPage" href="@Url.Action(actionName, "Dispatch")">
            &lt;&lt; @BusinessObjects.Domain.Constants.BACKLIST
        </a>
    </div>
    <h3 align="center">填写服务凭证</h3>
    <!-- 设备信息 -->
    <div class="tblDiv">
        <table border="1" class="tblDetail" v-if="SelectRequest.Request.RequestType.ID != @BusinessObjects.Domain.RequestInfo.RequestTypes.Others && SelectRequest.Request.RequestType.ID != @BusinessObjects.Domain.RequestInfo.RequestTypes.OnSiteInspection && SelectRequest.Request.RequestType.ID != @BusinessObjects.Domain.RequestInfo.RequestTypes.Inventory">
            <tr class="headtr">
                <td colspan="4" class="tblName" style="border-right:none">设备基本信息</td>
            </tr>
            <tr>
                <td class="tdHead" width="20%">系统编号</td>
                <td class="tdReadOnly" width="30%">{{SelectRequest.Equipment.OID}}</td>
                <td class="tdHead" width="20%">资产等级</td>
                <td class="tdReadOnly" width="30%">{{SelectRequest.Equipment.AssetLevel.Name}}</td>
            </tr>
            <tr>
                <td class="tdHead">名称</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.Name}}</td>
                <td class="tdHead">使用科室</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.Department.Name}}</td>
            </tr>
            <tr>
                <td class="tdHead">型号</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.EquipmentCode}}</td>
                <td class="tdHead">安装地点</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.InstalSite}}</td>
            </tr>
            <tr>
                <td class="tdHead">序列号</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.SerialCode}}</td>
                <td class="tdHead">维保状态</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.WarrantyStatus}}</td>
            </tr>
            <tr>
                <td class="tdHead">设备厂商</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.Manufacturer.Name}}</td>
                <td class="tdHead">服务范围</td>
                <td class="tdReadOnly">{{SelectRequest.Equipment.ContractScope.Name}}</td>
            </tr>
        </table>
        <table class="tblDetail" border="1" v-if="SelectRequest.Request.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.OnSiteInspection || SelectRequest.Request.RequestType.ID == @BusinessObjects.Domain.RequestInfo.RequestTypes.Inventory">
            <tr>
                <td colspan="10" class="tblName" style="border-right:none">
                    设备
                </td>
            </tr>
            <tr>
                <td class="tdHead">系统编号</td>
                <td class="tdHead">名称</td>
                <td class="tdHead">设备型号</td>
                <td class="tdHead">序列号</td>
                <td class="tdHead">设备厂商</td>
                <td class="tdHead">资产等级</td>
                <td class="tdHead">使用科室</td>
                <td class="tdHead">安装地点</td>
                <td class="tdHead">维保状态</td>
                <td class="tdHead">服务范围</td>
            </tr>
            <tr v-for="info in SelectRequest.Request.Equipments" style="font-size:10px">
                <td>{{info.OID}}</td>
                <td>{{info.Name}}</td>
                <td>{{info.EquipmentCode}}</td>
                <td>{{info.SerialCode}}</td>
                <td>{{info.Manufacturer.Name}}</td>
                <td>{{info.AssetLevel.Name}}</td>
                <td>{{info.Department.Name}}</td>
                <td>{{info.InstalSite}}</td>
                <td>{{info.WarrantyStatus}}</td>
                <td>{{info.ContractScope.Name}}</td>
            </tr>
        </table>
        <br v-if="SelectRequest.Request.RequestType.ID != @BusinessObjects.Domain.RequestInfo.RequestTypes.Others" />
        <!-- 派工单信息 -->
        <table border="1" class="tblDetail">
            <tr class="headtr">
                <td colspan="4" class="tblName">派工内容</td>
            </tr>
            <tr class="tblList">
                <td class="tdHead" width="20%">派工单编号</td>
                <td class="tdReadOnly" width="30%"><a class="linkFile cursor" href="#" v-on:click="GoToDispatchResponse()">{{SelectRequest.OID}}</a></td>
                <td class="tdHead" width="20%">紧急程度</td>
                <td class="tdReadOnly" width="30%">{{SelectRequest.Urgency.Name}}</td>
            </tr>
            <tr v-if="SelectRequest.RequestType.ID != @BusinessObjects.Domain.RequestInfo.RequestTypes.Others">
                <td class="tdHead">派工类型</td>
                <td class="tdReadOnly">{{SelectRequest.RequestType.Name}}</td>
                <td class="tdHead">机器状态</td>
                <td class="tdReadOnly">{{SelectRequest.MachineStatus.Name}}</td>
            </tr>
            <tr v-else>
                <td class="tdHead">派工类型</td>
                <td class="tdReadOnly" colspan="3">{{SelectRequest.RequestType.Name}}</td>
            </tr>
            <tr>
                <td class="tdHead">工程师姓名</td>
                <td class="tdReadOnly">{{SelectRequest.Engineer.Name}}</td>
                <td class="tdHead">出发时间</td>
                <td class="tdReadOnly">{{parseAndFormatJsonDate(SelectRequest.ScheduleDate)}}</td>
            </tr>
            <tr>
                <td class="tdHead">派工单状态</td>
                <td class="tdReadOnly" colspan="3">{{SelectRequest.Status.Name}}</td>
            </tr>
            <tr>
                <td class="tdHead">备注</td>
                <td class="tdReadOnly" colspan="3">{{SelectRequest.LeaderComments}}</td>
            </tr>
        </table>
        <br>
        <!--服务详情信息 -->
        <table border="1" class="tblDetail">
            <tbody>
                <tr class="headtr">
                    <td colspan="4" class="tblName">服务详情信息</td>
                </tr>
                <tr>
                    <td class="tdHead" width="20%"><span class="required">&nbsp;&nbsp;</span>服务凭证编号</td>
                    <td class="tdReadOnly" width="30%">{{DispatchJournal.OID == "0" ? "系统自动生成" : DispatchJournal.OID}}</td>
                    <td class="tdHead" width="20%"><span class="required">*</span>服务结果</td>
                    <td class="tdReadOnly" width="30%">
                        @if (ViewBag.dispatchJournalID > 0)
                        {
                            <label class="tdReadOnly">{{DispatchJournal.ResultStatus.ID}}</label>
                        }
                        else
                        {
                            <select v-model="DispatchJournal.ResultStatus.ID">
                                @foreach (var item in resultStatus)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </select>
                            <label class="required" id="reStatus"></label>
                        }

                    </td>
                </tr>
                <tr>
                    <td class="tdHead"><span class="required">&nbsp;&nbsp;</span>客户姓名</td>
                    <td class="tdReadOnly">{{SelectRequest.Request.RequestUser.Name}}</td>
                    <td class="tdHead"><span class="required">&nbsp;&nbsp;</span>客户电话</td>
                    <td class="tdReadOnly">{{SelectRequest.Request.RequestUser.Mobile}}</td>
                </tr>
                <tr>
                    <td class="tdHead"><span class="required">*</span>故障现象/错误代码/事由</td>
                    <td colspan="3">
                        <textarea rows="2" style="width: 600px;" id="FaultCode" maxlength="500" v-model="DispatchJournal.FaultCode"></textarea>
                        <label id="reFaultCode" class="required"></label>
                    </td>

                </tr>
                <tr>
                    <td class="tdHead"><span class="required">*</span>工作内容</td>
                    <td colspan="3">
                        <textarea rows="2" style="width: 600px;" id="JobContent" maxlength="500" v-model="DispatchJournal.JobContent"></textarea>
                        <label id="reJobContent" class="required"></label>
                    </td>
                </tr>
                <tr>
                    <td class="tdHead"><span class="required">&nbsp;&nbsp;</span>待跟进问题</td>
                    <td colspan="3">
                        <textarea rows="2" style="width: 600px;" id="FollowProblem" maxlength="500" v-model="DispatchJournal.FollowProblem"></textarea>
                        <label id="reFollowProblem" class="required"></label>
                    </td>
                </tr>
                <tr>
                    <td class="tdHead"><span class="required">&nbsp;&nbsp;</span>待确认问题</td>
                    <td colspan="3">
                        <textarea rows="2" style="width: 600px;" id="UnconfirmedProblem" maxlength="500" v-model="DispatchJournal.UnconfirmedProblem"></textarea>
                        <lable id="reUnconfirmedProblem" class="required"></lable>
                    </td>
                </tr>
                <tr>
                    <td class="tdHead"><span class="required">&nbsp;&nbsp;</span>建议留言</td>
                    <td colspan="3">
                        <textarea rows="2" style="width: 600px;" maxlength="500" id="Advice" v-model="DispatchJournal.Advice"></textarea>
                        <label id="reAdvice" class="required"></label>
                    </td>
                </tr>
                <tr>
                    <td class="tdHead" width="20%"><span class="required">*</span>客户签名</td>
                    <td colspan="3">
                        <div id="signature" style="border:1px solid black;float:left;width:400px;"></div>@*签名区*@
                        <div class="operationBtn" style="margin:30px 0;">
                            <button type="button" class="btn btn-outline-info btn-sm" id="clear" onclick="ClearSignature()">清除</button>
                            <label id="resignature" class="required">&nbsp;</label>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <br>
        <table class="tblDetail" width="800" border="1">
            <tbody>
                <tr>
                    <td class="tblName" colspan="2">审批流程</td>
                </tr>
                <tr>
                    <td class="tdHead" width="20%">流程信息</td>
                    <td>
                        <textarea readonly style="width:100%">{{DispatchJournal.FormatHistory}}</textarea>
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <table width="600" style="text-align: center; margin: 20px auto;">
            <tbody>
                <tr class="tblList">
                    <td width="30%">
                        <button class="btn btn-info" onclick="SaveDispatchJournal()">保存并提交</button>
                    </td>
                    <td width="30%"><button class="btn btn-info" onclick="back()">返回</button></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<script src="~/Content/scripts/jSignature.min.js"></script>
<script>
    var dispatchJournalVue = new Vue({
        el: "#dispatchJournalVue",
        data: {
            DispatchJournal: {
                OID:'0',
                Status: { ID: 0 },
                ResultStatus:{ID:1},
                SignatureFileName:'',
                FileContent: "",
                FaultCode: '',
                JobContent: '',
                FollowProblem: '',
                Dispatch:{},
                Signed:true
            },
            SelectRequest: {
                ScheduleDate: '',
                Urgency: {},
                RequestType: {},
                MachineStatus: {},
                Engineer: {},
                Status:{},
                Equipment: {
                    AssetLevel: {},
                    Department: {},
                    Manufacturer: {},
                    ContractScope:{}
                },
                Request: {
                    RequestUser: {},
                    DealType: {},
                    FaultType: {},
                    Priority:{},
                    Equipments: [],
                    RequestType: {}
                }
            }
        }
    })
</script>
<script>
    $().ready(function () {
        setTimeout(GetDispatchByID(), 100);
    })

    function GetDispatchByID() {
        $.ajax({
            type: "get",
            async: false,
            secureuri: false,
            url: '@Url.Action("GetDispatchByID", "Dispatch")',
            data: {
                dispatchID: '@ViewBag.DispatchID',
            },
            dataType: "json",
            success: function (response) {
                if (response.ResultCode != "00") {
                    processResponseError(response.ResultCode, response.ResultMessage);
                } else {
                     dispatchJournalVue.SelectRequest = response.Data;
                     if (dispatchJournalVue.SelectRequest.Request.RequestType.ID != '@BusinessObjects.Domain.RequestInfo.RequestTypes.Others' && dispatchJournalVue.SelectRequest.Request.RequestType.ID != '@BusinessObjects.Domain.RequestInfo.RequestTypes.OnSiteInspection' && dispatchJournalVue.SelectRequest.Request.RequestType.ID != '@BusinessObjects.Domain.RequestInfo.RequestTypes.Inventory') {
                        dispatchJournalVue.SelectRequest.Equipment = response.Data.Request.Equipments[0];
                    }
                    dispatchJournalID = dispatchJournalVue.SelectRequest.DispatchJournal.ID;
                    if (dispatchJournalID > 0) {
                        GetDispatchJournalByID(dispatchJournalID);
                    }
                }
            },
            error: function () { jAlert("连接服务器出错", "错误"); }
        })
    }

    function GetDispatchJournalByID(dispatchJournalID) {
        $.get('@Url.Action("GetDispatchJournalByID", "DispatchJournal")', { dispatchJournalID: dispatchJournalID },
            function (response) {
                if (response.ResultCode != "00") {
                    processResponseError(response.ResultCode, response.ResultMessage);
                } else {
                    dispatchJournalVue.DispatchJournal = response.Data;
                }
            }
        )
    }

    function CheckForm() {
        $("label.required").html("");
        var IsValid = true;

        var statusID = dispatchJournalVue.DispatchJournal.ResultStatus.ID;
        if (statusID == 0) {
            $("#reStatus").html("请选择服务结果");
            IsValid = false;
        }

        var faultCode = dispatchJournalVue.DispatchJournal.FaultCode.replace(/\s/g, "");
        if (faultCode == "") {
            $("#FaultCode").focus();
            $("#reFaultCode").html("故障现象/错误代码/事由不能为空");
            IsValid = false;
        }

        var JobContent = dispatchJournalVue.DispatchJournal.JobContent.replace(/\s/g, "");
        if (JobContent == "") {
            $("#JobContent").focus();
            $("#reJobContent").html("工作内容不能为空");
            IsValid = false;
        }

        //var followProblem = dispatchJournalVue.DispatchJournal.FollowProblem.replace(/\s/g, "");
        //if (followProblem == "") {
        //    $("#FollowProblem").focus();
        //    $("#reFollowProblem").html("待跟进问题不能为空");
        //    IsValid = false;
        //}

        if ($("#signature").jSignature("getData", "native").length == 0) {
            $("#signature").focus();
            $("#resignature").html("签名不能为空");
            IsValid = false;
        }

        return IsValid;
    }

    function IsExit() {
        var IsExit = true;
        GetDispatchByID();

        if (dispatchJournalVue.SelectRequest.DispatchJournal.ID > 0 && dispatchJournalVue.DispatchJournal.Status.ID != '@BusinessObjects.Domain.DispatchInfo.DocStatus.New')
            IsExit = false;
        return IsExit;
    }

    function back() {
        window.location.href = '@Url.Action(actionName,"Dispatch")'
    }

    function GoToDispatchResponse() {
        window.open("@Url.Action("DispatchResponse", "Dispatch")" + "?" + $.param({ actionName: '@ViewBag.Title', dispatchID: dispatchJournalVue.SelectRequest.ID, requestType: dispatchJournalVue.SelectRequest.RequestType.ID }))
    }
</script>

<script>
    $(function(){
        $("#signature").jSignature({"decor-color":"transparent"});//初始化签字板,并清除生成的横线
    })

    function ClearSignature(){
        $("#signature").jSignature("reset"); //重置签字板
        dispatchJournalVue.DispatchJournal.FileContent="";
    }

    function GenerateImgData(){//生成图片操作"
        var signature=$("#signature");
        var datapair = signature.jSignature("getData", "image");
        var i = new Image();
        i.src = "data:" + datapair[0] + "," + datapair[1];//得到格式化文件数据
        dispatchJournalVue.DispatchJournal.FileContent=i.src;
    }

    function SaveDispatchJournal() {
        if (!CheckForm()) return;
        if (!IsExit()) {
            jAlert('不可重复提交', '警告', function () {
                GetDispatchByID();
            });
            return;
        }
        SetPageWaiting(true)
        GenerateImgData();

        dispatchJournalVue.DispatchJournal.FujiComments="";
        dispatchJournalVue.DispatchJournal.Status.ID = '@BusinessObjects.Domain.DispatchJournalInfo.DispatchJournalStatus.Pending';
        dispatchJournalVue.DispatchJournal.Dispatch.ID = dispatchJournalVue.SelectRequest.ID;
        
        $.post('@Url.Action("SaveDispatchJournal", "DispatchJournal")', { dispatchJournal: dispatchJournalVue.DispatchJournal },
            function (response) {
                SetPageWaiting(false)
                if (response.ResultCode != "00") {
                    processResponseError(response.ResultCode, response.ResultMessage);
                } else {
                    dispatchJournalVue.DispatchJournal.ID = response.Data;
                    jAlert('提交成功','提交',function(){
                        window.location.href="@Url.Action(actionName,"Dispatch")"
                    })
                }
            }
        )
    }

</script>


--------------------------------------------------------------------------------END----------------------------------------------------------------------------------------
